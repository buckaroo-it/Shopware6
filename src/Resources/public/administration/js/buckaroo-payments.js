(function(){var e={29:function(){},201:function(){},689:function(){},65:function(){let{Application:e}=Shopware,t=Shopware.Classes.ApiService;class n extends t{constructor(e,t,n="buckaroo"){super(e,t,n)}getSupportVersion(){let e=`_action/${this.getApiBasePath()}/version`;return this.httpClient.post(e,{},{headers:this.getBasicHeaders()}).then(e=>t.handleResponse(e))}getTaxes(){let e=`_action/${this.getApiBasePath()}/taxes`;return this.httpClient.post(e,{},{headers:this.getBasicHeaders()}).then(e=>t.handleResponse(e))}getIn3Icons(){let e=`_action/${this.getApiBasePath()}/in3/logos`;return this.httpClient.post(e,{},{headers:this.getBasicHeaders()}).then(e=>t.handleResponse(e))}getApiTest(e,n,a){let s=`_action/${this.getApiBasePath()}/getBuckarooApiTest`;return this.httpClient.post(s,{websiteKeyId:e,secretKeyId:n,saleChannelId:a},{headers:this.getBasicHeaders()}).then(e=>t.handleResponse(e))}}e.addServiceProvider("BuckarooPaymentSettingsService",t=>new n(e.getContainer("init").httpClient,t.loginService))},76:function(){let{Application:e}=Shopware,t=Shopware.Classes.ApiService;class n extends t{constructor(e,t,n="buckaroo"){super(e,t,n)}getBuckarooTransaction(e){let n=`_action/${this.getApiBasePath()}/getBuckarooTransaction`;return this.httpClient.post(n,{transaction:e},{headers:this.getBasicHeaders()}).then(e=>t.handleResponse(e))}refundPayment(e,n,a,s){let o=`_action/${this.getApiBasePath()}/refund`;return this.httpClient.post(o,{transaction:e,transactionsToRefund:n,orderItems:a,customRefundAmount:s},{headers:this.getBasicHeaders()}).then(e=>t.handleResponse(e))}captureOrder(e){let n=`_action/${this.getApiBasePath()}/capture`;return this.httpClient.post(n,{transaction:e},{headers:this.getBasicHeaders()}).then(e=>t.handleResponse(e))}createPaylink(e){let n=`_action/${this.getApiBasePath()}/paylink`;return this.httpClient.post(n,{transaction:e},{headers:this.getBasicHeaders()}).then(e=>t.handleResponse(e))}}e.addServiceProvider("BuckarooPaymentService",t=>new n(e.getContainer("init").httpClient,t.loginService))},795:function(){let{Component:e}=Shopware;e.extend("buckaroo-payment-config","sw-extension-config",{})},627:function(e,t,n){var a=n(29);a.__esModule&&(a=a.default),"string"==typeof a&&(a=[[e.id,a,""]]),a.locals&&(e.exports=a.locals),n(346).Z("7ad51976",a,!0,{})},477:function(e,t,n){var a=n(201);a.__esModule&&(a=a.default),"string"==typeof a&&(a=[[e.id,a,""]]),a.locals&&(e.exports=a.locals),n(346).Z("f0a0b75c",a,!0,{})},496:function(e,t,n){var a=n(689);a.__esModule&&(a=a.default),"string"==typeof a&&(a=[[e.id,a,""]]),a.locals&&(e.exports=a.locals),n(346).Z("d070923a",a,!0,{})},346:function(e,t,n){"use strict";function a(e,t){for(var n=[],a={},s=0;s<t.length;s++){var o=t[s],r=o[0],i={id:e+":"+s,css:o[1],media:o[2],sourceMap:o[3]};a[r]?a[r].parts.push(i):n.push(a[r]={id:r,parts:[i]})}return n}n.d(t,{Z:function(){return g}});var s="undefined"!=typeof document;if("undefined"!=typeof DEBUG&&DEBUG&&!s)throw Error("vue-style-loader cannot be used in a non-browser environment. Use { target: 'node' } in your Webpack config to indicate a server-rendering environment.");var o={},r=s&&(document.head||document.getElementsByTagName("head")[0]),i=null,l=0,c=!1,d=function(){},u=null,m="data-vue-ssr-id",p="undefined"!=typeof navigator&&/msie [6-9]\b/.test(navigator.userAgent.toLowerCase());function g(e,t,n,s){c=n,u=s||{};var r=a(e,t);return h(r),function(t){for(var n=[],s=0;s<r.length;s++){var i=o[r[s].id];i.refs--,n.push(i)}t?h(r=a(e,t)):r=[];for(var s=0;s<n.length;s++){var i=n[s];if(0===i.refs){for(var l=0;l<i.parts.length;l++)i.parts[l]();delete o[i.id]}}}}function h(e){for(var t=0;t<e.length;t++){var n=e[t],a=o[n.id];if(a){a.refs++;for(var s=0;s<a.parts.length;s++)a.parts[s](n.parts[s]);for(;s<n.parts.length;s++)a.parts.push(f(n.parts[s]));a.parts.length>n.parts.length&&(a.parts.length=n.parts.length)}else{for(var r=[],s=0;s<n.parts.length;s++)r.push(f(n.parts[s]));o[n.id]={id:n.id,refs:1,parts:r}}}}function y(){var e=document.createElement("style");return e.type="text/css",r.appendChild(e),e}function f(e){var t,n,a=document.querySelector("style["+m+'~="'+e.id+'"]');if(a){if(c)return d;a.parentNode.removeChild(a)}if(p){var s=l++;t=k.bind(null,a=i||(i=y()),s,!1),n=k.bind(null,a,s,!0)}else t=v.bind(null,a=y()),n=function(){a.parentNode.removeChild(a)};return t(e),function(a){a?(a.css!==e.css||a.media!==e.media||a.sourceMap!==e.sourceMap)&&t(e=a):n()}}var b=function(){var e=[];return function(t,n){return e[t]=n,e.filter(Boolean).join("\n")}}();function k(e,t,n,a){var s=n?"":a.css;if(e.styleSheet)e.styleSheet.cssText=b(t,s);else{var o=document.createTextNode(s),r=e.childNodes;r[t]&&e.removeChild(r[t]),r.length?e.insertBefore(o,r[t]):e.appendChild(o)}}function v(e,t){var n=t.css,a=t.media,s=t.sourceMap;if(a&&e.setAttribute("media",a),u.ssrId&&e.setAttribute(m,t.id),s&&(n+="\n/*# sourceURL="+s.sources[0]+" */\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(s))))+" */"),e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}}},t={};function n(a){var s=t[a];if(void 0!==s)return s.exports;var o=t[a]={id:a,exports:{}};return e[a](o,o.exports,n),o.exports}n.d=function(e,t){for(var a in t)n.o(t,a)&&!n.o(e,a)&&Object.defineProperty(e,a,{enumerable:!0,get:t[a]})},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="bundles/buckaroopayments/",window?.__sw__?.assetPath&&(n.p=window.__sw__.assetPath+"/bundles/buckaroopayments/"),function(){"use strict";let{Component:e,Context:t}=Shopware,a=Shopware.Data.Criteria;e.override("sw-order-detail",{template:'{% block sw_order_detail_content_tabs %}\n    <div\n     v-if="isPaymentInTestMode && setIsBuckarooPayment"\n     style="max-width: 960px; margin: 0 auto 15px; background: rgb(251, 227, 231); border-radius:4px; color: #de294c; display:flex; align-items:center;">\n        <div style="background:#de294c;padding: 4px 8px;border-radius: 4px 0 0 4px;"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="24" height="24" viewBox="0 0 24 24"><defs><path d="m13.7744 1.4124 9.7058 18.6649c.5096.98.1283 2.1875-.8517 2.6971a2 2 0 0 1-.9227.2256H2.2942c-1.1045 0-2-.8954-2-2a2 2 0 0 1 .2256-.9227l9.7058-18.665c.5096-.98 1.7171-1.3613 2.6971-.8517a2 2 0 0 1 .8517.8518zM2.2942 21h19.4116L12 2.335 2.2942 21zM12 17c.5523 0 1 .4477 1 1s-.4477 1-1 1-1-.4477-1-1 .4477-1 1-1zm1-2c0 .5523-.4477 1-1 1s-1-.4477-1-1v-5c0-.5523.4477-1 1-1s1 .4477 1 1v5z" id="icons-default-warning"></path></defs><use xlink:href="#icons-default-warning" fill="#fff" fill-rule="evenodd"></use></svg></div>\n        <p style="margin-left:10px;">{{ $tc(\'buckaroo-payment.paymentInTestMode\') }}</p>\n    </div>\n    {% parent %}\n{% endblock %}\n\n\n{% block sw_order_detail_content_tabs_general %}\n    {% parent %}\n\n    <sw-tabs-item v-if="setIsBuckarooPayment" :route="{ name: \'buckaroo.payment.detail\', params: { id: $route.params.id } }" :title="$tc(\'buckaroo-payment.tabs.title\')">\n        {{ $tc(\'buckaroo-payment.tabs.title\') }}\n    </sw-tabs-item>\n    \n{% endblock %}\n\n{% block sw_order_detail_actions %}\n    <template v-if="isEditable">\n    </template>\n    {% parent %}\n{% endblock %}',data(){return{isBuckarooPayment:!1,isPaymentInTestMode:!1}},computed:{isEditable(){return!this.isBuckarooPayment||"buckaroo.payment.detail"!==this.$route.name},showTabs(){return!0}},watch:{orderId:{deep:!0,handler(){if(!this.orderId){this.setIsBuckarooPayment(null);return}let e=this.repositoryFactory.create("order"),n=new a(1,1);n.addAssociation("transactions"),e.get(this.orderId,t.api,n).then(e=>{if(this.setPaymentInTestMode(e),e.transactions.length<=0||!e.transactions.last().paymentMethodId){this.setIsBuckarooPayment(null);return}let t=e.transactions.last().paymentMethodId;null!=t&&this.setIsBuckarooPayment(t)})},immediate:!0}},methods:{setPaymentInTestMode(e){e.customFields&&e.customFields.buckaroo_payment_in_test_mode&&(this.isPaymentInTestMode=!0===e.customFields.buckaroo_payment_in_test_mode)},setIsBuckarooPayment(e){e&&this.repositoryFactory.create("payment_method").get(e,t.api).then(e=>{this.isBuckarooPayment=e.formattedHandlerIdentifier.indexOf("buckaroo")>=0})}}});let{Component:s,Context:o}=Shopware;Shopware.Data.Criteria,s.override("sw-order-detail-base",{template:'{% block sw_order_detail_base_line_items_summary %}\n\n    <sw-card-section divider="top" secondary slim v-if="order.customFields !== null">\n        <sw-container columns="1fr 440px"\n        class="sw-order-detail__summary" v-if="order.customFields.buckarooFee !== null && order.customFields.buckarooFee > 0">\n            <sw-description-list grid="265px 1fr"\n            class="sw-order-detail__summary-data">\n                <dt>{{ $tc(\'buckaroo-payment.fee\') }}</dt>\n                <dd>{{ order.customFields.buckarooFee }}\n                    {% if order.currency.isoCode == "PLN" %}\n                        PLN\n                    {% else %}\n                        {{ order.currency.symbol }}\n                    {% endif %}\n                    </dd>\n            </sw-description-list>\n        </sw-container>\n    </sw-card-section>\n\n    {% parent %}\n    \n{% endblock %}'});let{Component:r}=Shopware;r.override("sw-order-user-card",{template:"{% block sw_order_detail_base_secondary_info_payment %}\n    <template v-if=\"currentOrder.transactions.length > 0 && (!currentOrder.transactions.last().paymentMethod.translated.customFields || !currentOrder.transactions.last().paymentMethod.translated.customFields.is_buckaroo)\">\n        {% parent %}\n    </template>\n    <template v-if=\"currentOrder.transactions.length > 0 && currentOrder.transactions.last().paymentMethod.translated.customFields && currentOrder.transactions.last().paymentMethod.translated.customFields.is_buckaroo\">\n        <dt>{{ $tc('sw-order.detailBase.labelPaymentMethod') }}</dt>\n        <dd>\n            <template v-if=\"config['BuckarooPayments.config.' + currentOrder.transactions.last().paymentMethod.translated.customFields.buckaroo_key + 'Label']\">\n                {{ config['BuckarooPayments.config.' + currentOrder.transactions.last().paymentMethod.translated.customFields.buckaroo_key + 'Label'] }}\n            </template>\n        </dd>\n    </template>\n{% endblock %}\n\n",inject:["systemConfigApiService"],data(){return{config:{}}},created(){this.systemConfigApiService.getValues("BuckarooPayments.config",null).then(e=>{this.config=e}).finally(()=>{})}});let{Component:i}=Shopware;i.override("sw-system-config",{template:' {% block sw_system_config_content_card %}\n    <template v-if="domain !== \'BuckarooPayments.config\'">\n        {% parent() %}\n    </template>\n    <template v-else>\n       <buckaroo-main-config\n            v-model="actualConfigData[currentSalesChannelId]"\n            :configSettings="config"\n            :isNotDefaultSalesChannel="isNotDefaultSalesChannel"\n            :currentSalesChannelId="currentSalesChannelId"\n            :elementMethods="{getElementBind, getFieldError, getInheritWrapperBind, getInheritedValue, hasMapInheritanceSupport, getInlineSnippet, kebabCase}"\n            v-if="!isLoading"\n        ></buckaroo-main-config>\n    </template>\n {% endblock %}',methods:{saveAll(){return"BuckarooPayments.config"!==this.domain?this.$super("saveAll"):this.saveBuckaroo()},saveBuckaroo(){return this.isLoading=!0,this.systemConfigApiService.batchSave(this.getSelectedValues()).finally(()=>{this.isLoading=!1})},getCurrentConfigCard(){let e=this.$route.params?.paymentCode||"general";return this.config.filter(t=>t.name===e)?.pop()},getSelectedValues(){let e=this.actualConfigData[this.currentSalesChannelId],t=this.getCurrentConfigCard();if(t?.elements){let n={};return t?.elements.forEach(t=>{t?.name&&(n[t.name]=e[t.name])}),{[this.currentSalesChannelId]:n}}return this.actualConfigData}}}),n(496);let{Component:l,Mixin:c,Filter:d,Context:u}=Shopware,m=Shopware.Data.Criteria;l.register("buckaroo-payment-detail",{template:'{% block buckaroo_payment_detail %}\n    <div class="buckaroo-payment-detail">\n        \n        <sw-card positionIdentifier="bk-paylink" :title="$tc(\'buckaroo-payment.paymentDetail.paylinkTitle\')" v-if="isPaylinkVisible">\n\n            {{ $tc(\'buckaroo-payment.paymentDetail.paylinkDescription\') }}\n            \n            <span v-if="paylink"> <br>\n            {{ $tc(\'buckaroo-payment.paymentDetail.yourLink\') }}: <a :href="paylink">{{ paylink }}</a>\n            </span>\n\n            <sw-container columns="1fr 440px" class="sw-order-detail__summary">\n                <sw-description-list grid="265px 1fr" class="sw-order-detail__summary-data"><dt></dt> <dd>\n            \n                        <sw-button @click="createPaylink(orderId)" :disabled="!isPaylinkAvailable">\n                            {{ $tc(\'buckaroo-payment.paymentDetail.paylinkButton\') }}\n                        </sw-button></dd>\n                </sw-description-list>\n            </sw-container>\n\n        </sw-card>\n\n         <sw-card positionIdentifier="bk-refund" :title="$tc(\'buckaroo-payment.paymentDetail.refundTitle\')">\n            \n            {{ $tc(\'buckaroo-payment.orderItems.title\') }}\n            <sw-data-grid :dataSource="orderItems"\n                :columns="orderItemsColumns"\n                :showActions="false"\n                :showSelection="false">\n\n                    <template #column-name="{ item }">\n                        <sw-product-variant-info :showTooltip="false" :variations="item.variations">\n                            {{ item.name }}\n                        </sw-product-variant-info>\n                    </template>\n                    <template #column-quantity="{ item }">\n                        <input class="bk-reund-qty" type="number" min="0" :max="item.quantityMax" v-model="item.quantity" @input="recalculateOrderItems" onkeydown="return event.keyCode !== 69">\n                    </template>\n\n            </sw-data-grid>\n\n            <sw-container columns="1fr 440px" class="sw-order-detail__summary">\n                <sw-description-list grid="265px 1fr" class="sw-order-detail__summary-data">\n                        <dt>{{ $tc(\'buckaroo-payment.paymentDetail.amountTotalTitle\') }}: </dt>\n                        <dd>{{ buckaroo_refund_amount }}  {{ currency }}</dd>\n                </sw-description-list>\n            </sw-container>\n                 \n            <sw-card-section divider="top" secondary slim>\n                <sw-container columns="1fr 440px"\n                              class="sw-order-detail__summary">\n                </sw-container>\n\n                <sw-data-grid :dataSource="transactionsToRefund"\n                    :columns="transactionsToRefundColumns"\n                    :showHeader="false"\n                    :showActions="false"\n                    :showSelection="false">\n\n                        <template #column-transaction_method="{ item }">\n                                <span v-if="item.transaction_method == \'KbcPaymentButton\'">\n                                    Kbc\n                                </span>\n                                <span v-else>\n                                    {{ item.transaction_method }}\n                                </span>\n                        </template>\n\n                        <template #column-amount="{ item }">\n                            <input type="number" min="0" :max="item.amountMax" v-model="item.amount"  @input="recalculateRefundItems" onkeydown="return event.keyCode !== 69">\n                        </template>\n\n                </sw-data-grid>\n\n                <sw-container v-if="!isAuthorized" columns="1fr 440px" class="sw-order-detail__summary">\n                    <sw-description-list grid="265px 1fr" class="sw-order-detail__summary-data">\n                            <dt>{{ $tc(\'buckaroo-payment.paymentDetail.amountCustomRefundTitle\') }}: </dt>\n                            <dd>\n                                <input id="buckaroo_custom_refund_enabled" type="checkbox"\n                                       @click="toggleCustomRefund()">\n                                <input id="buckaroo_custom_refund_amount" type="number"\n                                       v-model="buckaroo_refund_total_amount" disabled style="width:70px;"> {{ currency }}\n                            </dd>\n                    </sw-description-list>\n                    <sw-description-list grid="265px 1fr" class="sw-order-detail__summary-data">\n                            <dt>{{ $tc(\'buckaroo-payment.paymentDetail.amountRefundTotalTitle\') }}: </dt>\n                            <dd>{{ buckaroo_refund_total_amount }} {{ currency }}</dd>\n                    </sw-description-list>\n                </sw-container>\n                 \n            </sw-card-section>\n\n            <sw-container columns="1fr 440px" class="sw-order-detail__summary">\n                <sw-description-list grid="265px 1fr" class="sw-order-detail__summary-data"><dt></dt><dd>\n                    <sw-button @click="refundOrder(orderId, buckaroo_refund_amount)" :disabled="!isRefundPossible || isAuthorized">\n                    {{ $tc(\'buckaroo-payment.paymentDetail.buttonTitle\') }}\n                    </sw-button></dd>\n                </sw-description-list>\n            </sw-container>\n\n         </sw-card>\n\n        <sw-card positionIdentifier="bk-pay-desc" :title="$tc(\'buckaroo-payment.paymentDetail.payTitle\')">\n\n            {{ $tc(\'buckaroo-payment.paymentDetail.payDescription\') }}\n\n            <sw-container columns="1fr 440px" class="sw-order-detail__summary">\n                <sw-description-list grid="265px 1fr" class="sw-order-detail__summary-data"><dt></dt><dd>\n                        <sw-button @click="captureOrder(orderId)" :disabled="!isCapturePossible">\n                            {{ $tc(\'buckaroo-payment.paymentDetail.payButton\') }}\n                        </sw-button></dd>\n                </sw-description-list>\n            </sw-container>\n\n        </sw-card>\n\n         <sw-card positionIdentifier="bk-pay-transaction" :title="$tc(\'buckaroo-payment.paymentDetail.transactionsTitle\')">\n            <sw-data-grid :dataSource="relatedResources"\n                :columns="relatedResourceColumns"\n                :showActions="false"\n                :showSelection="false">\n\n                    <template #column-transaction_method="{ item }">\n                            <span v-if="item.transaction_method == \'KbcPaymentButton\'">\n                                Kbc\n                            </span>\n                            <span v-else>\n                                {{ item.transaction_method }}\n                            </span>\n                    </template>\n\n            </sw-data-grid>\n         </sw-card>\n\n\n        <sw-loader v-if="isLoading">\n        </sw-loader>\n    </div>\n{% endblock %}',inject:["repositoryFactory","BuckarooPaymentService","systemConfigApiService"],mixins:[c.getByName("notification")],data(){return{config:{},buckaroo_refund_amount:"0",buckaroo_refund_total_amount:"0",currency:"EUR",isRefundPossible:!0,isCapturePossible:!1,isPaylinkAvailable:!1,isPaylinkVisible:!1,paylinkMessage:"",paylink:"",isLoading:!1,order:!1,buckarooTransactions:null,orderItems:[],transactionsToRefund:[],relatedResources:[],isAuthorized:!1}},computed:{orderItemsColumns(){return[{property:"name",label:this.$tc("buckaroo-payment.orderItems.types.name"),allowResize:!1,primary:!0,inlineEdit:!0,multiLine:!0},{property:"quantity",label:this.$tc("buckaroo-payment.orderItems.types.quantity"),rawData:!0,align:"right"},{property:"totalAmount",label:this.$tc("buckaroo-payment.orderItems.types.totalAmount"),rawData:!0,align:"right"}]},transactionsToRefundColumns(){return[{property:"transaction_method",rawData:!0},{property:"amount",rawData:!0}]},relatedResourceColumns(){return[{property:"created_at",label:this.$tc("buckaroo-payment.transactionHistory.types.created_at"),rawData:!0},{property:"total",label:this.$tc("buckaroo-payment.transactionHistory.types.total"),rawData:!0},{property:"shipping_costs",label:this.$tc("buckaroo-payment.transactionHistory.types.shipping_costs"),rawData:!0},{property:"total_excluding_vat",label:this.$tc("buckaroo-payment.transactionHistory.types.total_excluding_vat"),rawData:!0},{property:"vat",label:this.$tc("buckaroo-payment.transactionHistory.types.vat"),rawData:!0},{property:"transaction_key",label:this.$tc("buckaroo-payment.transactionHistory.types.transaction_key"),rawData:!0},{property:"transaction_method",label:this.$tc("buckaroo-payment.transactionHistory.types.transaction_method"),rawData:!0},{property:"statuscode",label:this.$tc("buckaroo-payment.transactionHistory.types.statuscode"),rawData:!0}]}},created(){this.createdComponent()},methods:{recalculateOrderItems(){for(let e in this.buckaroo_refund_amount=0,this.orderItems)this.orderItems[e].totalAmount=parseFloat(parseFloat(this.orderItems[e].unitPrice)*parseFloat(this.orderItems[e].quantity||0)).toFixed(2),this.buckaroo_refund_amount=parseFloat(parseFloat(this.buckaroo_refund_amount)+parseFloat(this.orderItems[e].totalAmount)).toFixed(2)},recalculateRefundItems(){for(let e in this.buckaroo_refund_total_amount=0,this.transactionsToRefund)this.transactionsToRefund[e].amount&&(this.buckaroo_refund_total_amount=parseFloat(parseFloat(this.buckaroo_refund_total_amount)+parseFloat(this.transactionsToRefund[e].amount)).toFixed(2))},getCustomRefundEnabledEl(){return document.getElementById("buckaroo_custom_refund_enabled")},getCustomRefundAmountEl(){return document.getElementById("buckaroo_custom_refund_amount")},toggleCustomRefund(){this.getCustomRefundEnabledEl()&&this.getCustomRefundAmountEl()&&(this.getCustomRefundAmountEl().disabled=!this.getCustomRefundEnabledEl().checked)},getCustomRefundAmount(){return this.getCustomRefundEnabledEl()&&this.getCustomRefundAmountEl()&&this.getCustomRefundEnabledEl().checked?this.getCustomRefundAmountEl().value:0},createdComponent(){let e=this,t=this.$route.params.id;this.systemConfigApiService.getValues("BuckarooPayments.config",null).then(e=>{this.config=e});let n=this.repositoryFactory.create("order"),a=new m(1,1);this.orderId=t,a.addAssociation("transactions.paymentMethod").addAssociation("transactions"),a.getAssociation("transactions").addSorting(m.sort("createdAt")),n.get(t,u.api,a).then(t=>{e.checkedIsAuthorized(t),e.isCapturePossible=t.transactions&&t.transactions.last().paymentMethod&&t.transactions.last().paymentMethod.customFields&&t.transactions.last().paymentMethod.customFields.buckaroo_key&&["klarnakp","billink"].includes(t.transactions.last().paymentMethod.customFields.buckaroo_key.toLowerCase())||e.isAfterpayCapturePossible(t),e.isPaylinkVisible=e.isPaylinkAvailable=this.getConfigValue("paylinkEnabled")&&t.stateMachineState&&t.stateMachineState.technicalName&&"open"==t.stateMachineState.technicalName&&t.transactions&&"open"==t.transactions.last().stateMachineState.technicalName}),this.BuckarooPaymentService.getBuckarooTransaction(t).then(t=>{e.orderItems=[],e.transactionsToRefund=[],e.relatedResources=[],this.$emit("loading-change",!1),t.orderItems.forEach(t=>{e.orderItems.push({id:t.id,name:t.name,quantity:t.quantity,quantityMax:t.quantity,unitPrice:t.unitPrice.value,totalAmount:t.totalAmount.value,variations:t.variations||[]})}),e.recalculateOrderItems(),t.transactionsToRefund.forEach(t=>{e.transactionsToRefund.push({id:t.id,transactions:t.transactions,amount:t.total,amountMax:t.total,currency:t.currency,transaction_method:t.transaction_method,logo:t.transaction_method?t.logo:null}),e.currency=t.currency}),e.recalculateRefundItems(),t.transactions.forEach(t=>{e.relatedResources.push({id:t.id,transaction_key:t.transaction,total:t.total,total_excluding_vat:t.total_excluding_vat,shipping_costs:t.shipping_costs,vat:t.vat,transaction_method:t.transaction_method,logo:t.transaction_method?t.logo:null,created_at:t.created_at,statuscode:t.statuscode})})}).catch(e=>{console.log("errorResponse",e)})},isAfterpayCapturePossible(e){return!0===e.customFields.buckaroo_is_authorize},checkedIsAuthorized(e){this.isAuthorized=e?.transactions?.last()?.stateMachineState?.technicalName==="authorized"},refundOrder(e,t){let n=this;n.isRefundPossible=!1,this.BuckarooPaymentService.refundPayment(e,this.transactionsToRefund,this.orderItems,this.getCustomRefundAmount()).then(e=>{for(let t in e)e[t].status?this.createNotificationSuccess({title:n.$tc("buckaroo-payment.settingsForm.titleSuccess"),message:n.$tc(e[t].message)+e[t].amount}):this.createNotificationError({title:n.$tc("buckaroo-payment.settingsForm.titleError"),message:n.$tc(e[t].message)});n.isRefundPossible=!0,this.createdComponent()}).catch(e=>{this.createNotificationError({title:this.$tc("buckaroo-payment.settingsForm.titleError"),message:e.response.data.message}),n.isRefundPossible=!0})},createPaylink(e){let t=this;t.isPaylinkAvailable=!1,this.BuckarooPaymentService.createPaylink(e,this.transactionsToRefund,this.orderItems).then(e=>{e.status?(t.paylinkMessage=t.$tc(e.message)+e.paylinkhref,t.paylink=e.paylink,this.createNotificationSuccess({title:t.$tc("buckaroo-payment.settingsForm.titleSuccess"),message:t.paylinkMessage})):this.createNotificationError({title:t.$tc("buckaroo-payment.settingsForm.titleError"),message:t.$tc(e.message)}),t.isPaylinkAvailable=!0}).catch(e=>{this.createNotificationError({title:this.$tc("buckaroo-payment.settingsForm.titleError"),message:e.response.data.message}),t.isPaylinkAvailable=!0})},getConfigValue(e){return this.config[`BuckarooPayments.config.${e}`]},captureOrder(e){let t=this;t.isCapturePossible=!1,this.BuckarooPaymentService.captureOrder(e,this.transactionsToRefund,this.orderItems).then(e=>{e.status?this.createNotificationSuccess({title:t.$tc("buckaroo-payment.settingsForm.titleSuccess"),message:e.message}):this.createNotificationError({title:t.$tc("buckaroo-payment.settingsForm.titleError"),message:e.message}),t.isCapturePossible=!0,this.createdComponent()}).catch(e=>{this.createNotificationError({title:this.$tc("buckaroo-payment.settingsForm.titleError"),message:t.$tc(e.response.data.message)}),t.isCapturePossible=!0})}}}),n(795);var p=JSON.parse('{"buckaroo-payment":{"fee":"Buckaroo Betaaltoeslag","order":{"refundDescription":"Refund voor bestelling #orderNumber"},"general":{"title":"Buckaroo","description":"Buckaroo Payment"},"settingsForm":{"save":"Opslaan","titleSuccess":"Succes","titleError":"Foutmelding"},"supportModal":{"menuButton":"Version & Support","title":"Versie & Support","support":{"description":"Zorg ervoor dat u uw website key bij de hand heeft voordat u contact opneemt met Buckaroo technical support","label1":"Buckaroo Plaza:","label2":"Telefoonnummer:","label3":"E-mail:","label4":"Website:","your_version":"Uw PHP versie:","version":"Versie compatibiliteit","information":"Informatie"}},"tabs":{"title":"Buckaroo Payment","overview":"Overzicht"},"paymentDetail":{"yourLink":"Uw Paylink","paylinkButton":"Cre\xeber Paylink","paylinkDescription":"Cre\xeber Paylink voor order","paylinkTitle":"Paylink","refundTitle":"Terugbetaling","transactionsTitle":"Transacties","amountTitle":"Hoeveelheid","amountTotalTitle":"Algemeen totaal (grand total)","amountRefundTotalTitle":"Terugbetaling Algemeen totaal (grand total)","amountCustomRefundTitle":"Aangepast bedrag terugbetalen","buttonTitle":"Terugbetaling","successTitle":"Success","successMessage":"Buckaroo terugbetaling succesvol","errorTitle":"Foutmelding","payTitle":"Betaling vastleggen (Capture)","payDescription":"Factuur voor bestelling vastleggen (Capture) en aanmaken","payButton":"Betaling vastleggen (Capture)"},"orderItems":{"title":"Artikelen om terug te betalen","types":{"id":"id","name":"Titel","quantity":"Aantal om terug te betalen","totalAmount":"Subtotaal"}},"transactionsToRefund":{"title":"Terugbetaling Totaal"},"transactionHistory":{"types":{"id":"id","created_at":"Datum/tijd","total":"Totaal","shipping_costs":"Verzendkosten","total_excluding_vat":"Totaal exclusief BTW","total_including_vat":"Totaal inclusief BTW","vat":"BTW","transaction_key":"Transactie key","transaction_method":"Betaalmethode","statuscode":"Status"}},"messageNotValid":"Dit veld is niet geldig.","messageNotBlank":"Dit veld mag niet leeg zijn.","button":{"labelTestApi":"Test gegevens"},"afterpay":{"setup":"Belastingkoppeling instellen voor Riverty old ","hightTaxes":"Hoge BTW-heffingen","middleTaxes":"Middelmatige BTW-belastingen","lowTaxes":"Lage BTW-heffingen","zeroTaxes":"Nul VAT","noTaxes":"Geen BTW"},"paymentInTestMode":"De betaling voor deze bestelling is in testmodus uitgevoerd","refund":{"not_supported":"Terugbetaling wordt niet ondersteund","already_refunded":"Deze bestelling is al terugbetaald","refunded_amount":"Buckaroo terugbetaling succesvol"},"test_api":{"connection_ready":"Verbinding gereed","connection_failed":"Verbinding mislukt"},"paylink":{"invalid_amount":"Het bedrag is niet geldig","pay_link":"Uw Paylink:"},"missing_order_id":"Ontbrekende bestelling orderId","missing_transaction":"Order transactie niet gevonden","general_request_error":"Helaas is er een fout opgetreden tijdens het verwerken van uw aanvraag. Probeer het opnieuw.","in3LogoLabel":"Betaalmethode Logo:","configure-payment":"Configure payment","configure-link":"Configure","payment-methods":"Payment methods"}}'),g=JSON.parse('{"buckaroo-payment":{"fee":"Buckaroo Geb\xfchr","order":{"refundDescription":"R\xfcckerstattung f\xfcr Bestellung #orderNumber"},"general":{"title":"Buckaroo","description":"Buckaroo Zahlung"},"settingsForm":{"save":"Speichern","titleSuccess":"Erfolg","titleError":"Fehler"},"supportModal":{"menuButton":"Version & Unterst\xfctzung","title":"Version & Unterst\xfctzung","support":{"description":"Bevor Sie den technischen Support von Buckaroo kontaktieren, bitte holen Sie Ihren (H\xe4ndler-)Schl\xfcssel und Geheimschl\xfcssel ab.","label1":"Buckaroo Plaza:","label2":"Telefon:","label3":"E-Mail:","label4":"Webseite:","your_version":"Ihre PHP-Version:","version":"Versionskompatibilit\xe4t","information":"Informationen"}},"tabs":{"title":"Buckaroo Payment","overview":"\xdcbersicht"},"paymentDetail":{"yourLink":"Ihr Paylink","paylinkButton":"Paylink erstellen","paylinkDescription":"Paylink erstellen f\xfcr Bestellung","paylinkTitle":"Paylink","refundTitle":"R\xfcckerstattung","transactionsTitle":"Transaktionen","amountTitle":"Betrag","amountTotalTitle":"Gesamtsumme","amountRefundTotalTitle":"Gesamtsumme der R\xfcckerstattung","amountCustomRefundTitle":"R\xfcckerstattung individueller Betrag","buttonTitle":"R\xfcckerstattung","successTitle":"Erfolg","successMessage":"Buckaroo-Erfolg, zur\xfcckerstattet","errorTitle":"Fehler","payTitle":"Zahlung erfassen (Capture)","payDescription":"Erfassen (Capture) und Rechnung f\xfcr Bestellung erstellen","payButton":"Zahlung erfassen (Capture)"},"orderItems":{"title":"Artikel zur R\xfcckerstattung","types":{"id":"id","name":"Titel","quantity":"Menge zur R\xfcckerstattung","totalAmount":"Teilsumme"}},"transactionsToRefund":{"title":"R\xfcckerstattungssummen"},"transactionHistory":{"types":{"id":"id","created_at":"Datum/Uhrzeit","total":"Gesamt","shipping_costs":"Versandkosten","total_excluding_vat":"Gesamt ohne MwSt. (VAT)","total_including_vat":"Gesamt inklusive MwSt. (VAT)","vat":"MwSt. (VAT)","transaction_key":"Transaktionsschl\xfcssel","transaction_method":"Zahlungsmethode","statuscode":"Status"}},"messageNotValid":"Dieses Feld ist nicht g\xfcltig.","messageNotBlank":"Dieses Feld darf nicht leer sein.","button":{"labelTestApi":"Verbindung testen"},"afterpay":{"setup":"Steuerzuordnung f\xfcr Riverty old einrichten ","hightTaxes":"Hohe MwSt. (VAT)","middleTaxes":"Mittlere MwSt. (VAT)","lowTaxes":"Niedrige MwSt. (VAT)","zeroTaxes":"Keine MwSt. (VAT)","noTaxes":"Keine Mehrwertsteuer"},"paymentInTestMode":"Die Zahlung f\xfcr diese Bestellung wurde im Testmodus durchgef\xfchrt","refund":{"not_supported":"R\xfcckerstattung wird nicht unterst\xfctzt","already_refunded":"Diese Bestellung wurde bereits zur\xfcckerstattet","refunded_amount":"Erfolgreich von Buckaroo erstattet"},"test_api":{"connection_ready":"Verbindung bereit","connection_failed":"Verbindung fehlgeschlagen"},"paylink":{"invalid_amount":"Betrag ist nicht g\xfcltig","pay_link":"Ihr Zahlungslink (Paylink):"},"missing_order_id":"Fehlende Bestell-ID","missing_transaction":"Transaktion der Bestellung nicht gefunden","general_request_error":"Leider ist ein Fehler bei der Bearbeitung Ihrer Anfrage aufgetreten. Bitte versuchen Sie es erneut.","in3LogoLabel":"Zahlungslogo:","configure-payment":"Configure payment","configure-link":"Configure","payment-methods":"Payment methods"}}'),h=JSON.parse('{"buckaroo-payment":{"fee":"Buckaroo Fee","order":{"refundDescription":"Refund for order #orderNumber"},"general":{"title":"Buckaroo","description":"Buckaroo Payment"},"settingsForm":{"save":"Save","titleSuccess":"Success","titleError":"Error"},"supportModal":{"menuButton":"Version & Support","title":"Version & Support","support":{"description":"Before contacting Buckaroo technical support, please retrieve your (Merchant) key, Secret key, certificate and certificate thumbprint.","label1":"Buckaroo Payment Plaza:","label2":"Phone:","label3":"E-mail:","label4":"Website:","your_version":"Your PHP version:","version":"Version compatibility","information":"Information"}},"tabs":{"title":"Buckaroo Payment","overview":"Overview"},"paymentDetail":{"yourLink":"Your Paylink","paylinkButton":"Create paylink","paylinkDescription":"Create paylink for order","paylinkTitle":"Paylink","refundTitle":"Refund","transactionsTitle":"Transactions","amountTitle":"Amount","amountTotalTitle":"Grand total","amountRefundTotalTitle":"Refund Grand total","amountCustomRefundTitle":"Refund custom amount","buttonTitle":"Refund","successTitle":"Success","successMessage":"Buckaroo success refunded ","errorTitle":"Error","payTitle":"Capture payment","payDescription":"Capture and create invoice for order","payButton":"Capture payment"},"orderItems":{"title":"Items to Refund","types":{"id":"id","name":"Title","quantity":"Qty to Refund","totalAmount":"Subtotal"}},"transactionsToRefund":{"title":"Refund Totals"},"transactionHistory":{"types":{"id":"id","created_at":"Date/time","total":"Total","shipping_costs":"Shipping costs","total_excluding_vat":"Total excluding VAT","total_including_vat":"Total including VAT","vat":"VAT","transaction_key":"Transaction key","transaction_method":"Payment method","statuscode":"Status"}},"messageNotValid":"This field not valid.","messageNotBlank":"This field must not be empty.","button":{"labelTestApi":"Test connection"},"afterpay":{"setup":"Setup tax association for Riverty old ","hightTaxes":"High VAT taxes","middleTaxes":"Middle VAT taxes","lowTaxes":"Low VAT taxes","zeroTaxes":"Zero VAT","noTaxes":"No VAT tax"},"paymentInTestMode":"The payment for this order was made in test mode","refund":{"not_supported":"Refund is not supported","already_refunded":"This order is already refunded","refunded_amount":"Buckaroo success refunded"},"test_api":{"connection_ready":"Connection ready","connection_failed":"Connection failed"},"paylink":{"invalid_amount":"Amount is not valid","pay_link":"Your Paylink:"},"missing_order_id":"Missing order orderId","missing_transaction":"Order transaction not found","general_request_error":"Unfortunately an error occurred while processing your request. Please try again.","in3LogoLabel":"Payment Logo:","configure-payment":"Configure payment","configure-link":"Configure","payment-methods":"Payment methods"}}');let{Module:y}=Shopware;y.register("buckaroo-payment",{type:"plugin",name:"BuckarooPayment",title:"buckaroo-payment.general.title",description:"buckaroo-payment.general.description",version:"1.0.0",targetVersion:"1.0.0",color:"#000000",icon:"default-action-settings",snippets:{"nl-NL":p,"de-DE":g,"en-GB":h},routeMiddleware(e,t){"sw.order.detail"===t.name&&t.children.push({component:"buckaroo-payment-detail",name:"buckaroo.payment.detail",isChildren:!0,path:"/sw/order/buckaroo/detail/:id"}),e(t)},routes:{config:{component:"buckaroo-payment-config",path:":namespace/payment/:paymentCode",name:"buckaroo.config.payment",meta:{parentPath:"sw.extension.config"},props:{default(e){return{namespace:e.params.namespace}}}}}}),n(76),n(65);let{Component:f}=Shopware;f.register("buckaroo-afterpay-old-tax",{template:'<div>\n    <a style="margin-bottom:10px;" @click="showTaxes = !showTaxes">{{$tc(\'buckaroo-payment.afterpay.setup\')}}</a>\n    <div v-if="showTaxes" style="padding: 10px;background: rgb(246 246 246); margin-bottom:10px;">\n        <div class="tax" v-for="tax in taxes">\n            <sw-select-field\n            :label="tax.name"\n            label-property="name"\n            value-property="id"\n            :options="afterpayTaxes"\n            @change="setTaxAssociation(tax.id, $event)"\n            :value="getSelectValue(tax.id)"\n            ></sw-select-field>\n        </div>\n    </div>\n</div>',inject:["BuckarooPaymentSettingsService"],data(){return{taxes:[],showTaxes:!1,afterpayTaxes:[{name:this.$tc("buckaroo-payment.afterpay.hightTaxes"),id:1},{name:this.$tc("buckaroo-payment.afterpay.middleTaxes"),id:5},{name:this.$tc("buckaroo-payment.afterpay.lowTaxes"),id:2},{name:this.$tc("buckaroo-payment.afterpay.zeroTaxes"),id:3},{name:this.$tc("buckaroo-payment.afterpay.noTaxes"),id:4}],taxAssociation:{}}},model:{prop:"value",event:"change"},computed:{},props:{name:{type:String,required:!0,default:""},value:{type:Object,required:!1,default(){return{}}}},created(){this.BuckarooPaymentSettingsService.getTaxes().then(e=>{this.taxes=e.taxes.map(e=>({id:e.id,name:e.name}))})},methods:{setTaxAssociation(e,t){this.taxAssociation[e]=t,this.$emit("change",{...this.value,...this.taxAssociation})},getSelectValue(e){if(this.value[e])return this.value[e]}}});let{Component:b}=Shopware;b.register("buckaroo-main-config",{template:'<div>\n<buckaroo-config-card\n    :card="mainCard"\n    :methods="elementMethods"\n    :isNotDefaultSalesChannel="isNotDefaultSalesChannel"\n    :currentSalesChannelId="currentSalesChannelId"\n    v-model="value"\n></buckaroo-config-card>\n<buckaroo-payment-list\n    v-if="selectedCard === \'general\'"\n    :configSettings="configSettings"\n    :currentSalesChannelId="currentSalesChannelId"\n    v-model="value">\n</buckaroo-payment-list>\n</div>',props:{configSettings:{required:!0},value:{required:!0},elementMethods:{required:!0},isNotDefaultSalesChannel:{required:!0},currentSalesChannelId:{required:!0}},data(){return{selectedCard:this.$route.params?.paymentCode||"general"}},watch:{$route(e){e.params?.paymentCode&&(this.selectedCard=e.params.paymentCode)}},computed:{mainCard(){return this.configSettings.filter(e=>e.name===this.selectedCard)?.pop()}}});let{Component:k}=Shopware;k.register("buckaroo-config-card",{template:'{% block buckaroo_config_card %}\n    <sw-card position-identifier="xxsw-system-config-content">\n        <template #title>\n            {{ getInlineSnippet(card.title) }}\n        </template>\n\n        <div v-for="element in card.elements">\n            <div v-if="canShow(element)">\n                <slot name="card-element" v-bind="{ element: getElementBind(element), config: value, card }">\n                    \n                    <sw-inherit-wrapper\n                        {% if VUE3 %}\n                        v-model:value="value[element.name]"\n                        {% else %}\n                        v-model="value[element.name]"\n                        {% endif %}\n                        v-bind="getInheritWrapperBind(element)"\n                        :has-parent="isNotDefaultSalesChannel"\n                        :inherited-value="getInheritedValue(element)"\n                        :class="\'sw-system-config--field-\' + kebabCase(getElementBind(element).name)"\n                    >\n                        <template #content="props">\n                            {# <sw-form-field-renderer\n                                v-bind="getElementBind(element, props)"\n                                :key="props.isInheritField + props.isInherited"\n                                :disabled="props.isInherited"\n                                :value="props.currentValue"\n                                :error="getFieldError(element.name)"\n                                @input="props.updateCurrentValue"\n                                @change="props.updateCurrentValue"\n                                @update:value="props.currentValue = $event"\n                            /> #}\n                            <sw-form-field-renderer v-bind="getElementBind(element, props)"\n                                :value="value[element.name]" \n                                :disabled="props.isInherited"\n                                :error="getFieldError(element.name)"\n                                @input="props.updateCurrentValue"\n                                @change="props.updateCurrentValue"\n                                @update:value="value[element.name] = $event" />\n                        </template>\n\n                    </sw-inherit-wrapper>\n                </slot>\n                <buckaroo-test-credentials\n                    v-if="canShowCredentialTester(element)"\n                    :config="value"\n                    :currentSalesChannelId="currentSalesChannelId"\n                />\n            </div>\n        </div>\n    </sw-card>\n{% endblock %}',props:{card:{required:!0},methods:{required:!0},isNotDefaultSalesChannel:{required:!0},value:{required:!0},currentSalesChannelId:{required:!0}},methods:{getElementBind(e,t){return this.methods.getElementBind(e,t)},getInheritWrapperBind(e){return this.methods.getInheritWrapperBind(e)},getFieldError(e){return this.methods.getFieldError(e)},kebabCase(e){return this.methods.kebabCase(e)},getInlineSnippet(e){return this.methods.getInlineSnippet(e)},getInheritedValue(e){return this.methods.getInheritedValue(e)},canShow(e){let t=e.name.replace("BuckarooPayments.config.","");return -1!==["orderStatus","paymentSuccesStatus","automaticallyCloseOpenOrders","sendInvoiceEmail"].indexOf(t)?this.getValueForName("advancedConfiguration"):"idealprocessingRenderMode"===t?this.getValueForName("idealprocessingShowissuers"):"idealRenderMode"===t?this.getValueForName("idealShowissuers"):-1!==["idealFastCheckoutEnabled","idealFastCheckoutVisibility","idealFastCheckoutLogoScheme"].indexOf(t)?this.getValueForName("idealFastCheckout"):"afterpayPaymentstatus"===t?this.getValueForName("afterpayCaptureonshippent"):"afterpayOldtax"!==t||this.getValueForName("afterpayEnabledold")},getValueForName(e){return this.value[`BuckarooPayments.config.${e}`]},canShowCredentialTester(e){return this.getValueForName("advancedConfiguration")?"BuckarooPayments.config.orderStatus"===e.name:"BuckarooPayments.config.advancedConfiguration"===e.name}}}),n(627);let{Component:v,Filter:_,Mixin:w}=Shopware;v.register("buckaroo-payment-list",{template:'<sw-card\n    position-identifier="bk-config-payment-list"\n    :title="$tc(\'buckaroo-payment.payment-methods\')"\n>\n<div class="bk-payment-wrap">\n <template\n    v-for="payment in payments" >\n    <div class="bk-payment">\n        <div class="bk-payment-inner">\n        <router-link  :title="$tc(\'buckaroo-payment.configure-payment\')" :to="{name: \'buckaroo.payment.config\', params: {namespace: \'BuckarooPayments\', paymentCode: payment.code } }">\n            <div class="bk-payment-img">\n                <img :src="assetFilter(`buckaroopayments/administration/static/${payment.logo}`)" alt="Payment logo">\n            </div>\n            <div class="bk-payment-name">\n                {{ getPaymentTitle(payment.code) }}\n            </div>\n        </router-link>\n\n        <buckaroo-toggle-status\n            :currentSalesChannelId="currentSalesChannelId"\n            :method="payment.code"\n            v-model="value"\n        />\n\n        <router-link class="bk-link" :title="$tc(\'buckaroo-payment.configure-payment\')" :to="{name: \'buckaroo.payment.config\', params: {namespace: \'BuckarooPayments\', paymentCode: payment.code } }">\n            {{$tc(\'buckaroo-payment.configure-link\')}}\n        </router-link>\n        </div>\n    </div>\n </template>\n </div>\n</sw-card>',props:{configSettings:{required:!0},value:{required:!0},currentSalesChannelId:{required:!0}},mixins:[w.getByName("sw-inline-snippet")],data(){return{payments:[{code:"Alipay",logo:"alipay.svg"},{code:"applepay",logo:"applepay.svg"},{code:"bancontactmrcash",logo:"bancontact.svg"},{code:"blik",logo:"blik.svg"},{code:"belfius",logo:"belfius.svg"},{code:"Billink",logo:"billink.svg"},{code:"creditcard",logo:"creditcards.svg"},{code:"creditcards",logo:"creditcards.svg"},{code:"eps",logo:"eps.svg"},{code:"giftcards",logo:"giftcards.svg"},{code:"idealqr",logo:"ideal-qr.svg"},{code:"ideal",logo:"ideal.svg"},{code:"capayable",logo:"ideal-in3.svg"},{code:"KBCPaymentButton",logo:"kbc.svg"},{code:"klarnakp",logo:"klarna.svg"},{code:"knaken",logo:"gosettle.svg"},{code:"mbway",logo:"mbway.svg"},{code:"multibanco",logo:"multibanco.svg"},{code:"paybybank",logo:"paybybank.gif"},{code:"payconiq",logo:"payconiq.svg"},{code:"paypal",logo:"paypal.svg"},{code:"payperemail",logo:"payperemail.svg"},{code:"Przelewy24",logo:"przelewy24.svg"},{code:"afterpay",logo:"afterpay.svg"},{code:"sepadirectdebit",logo:"sepa-directdebit.svg"},{code:"transfer",logo:"sepa-credittransfer.svg"},{code:"Trustly",logo:"trustly.svg"},{code:"WeChatPay",logo:"wechatpay.svg"}]}},methods:{getPaymentTitle(e){let t=this.configSettings.find(t=>t.name===e);if(t)return this.getInlineSnippet(t.title);let n=this.payments.find(t=>t.code===e);return n?n.code:"Unknown Payment"},assetFilter(e){return _.getByName("asset")(e)}}});let{Component:C,Mixin:T}=Shopware;C.register("buckaroo-test-credentials",{template:'    <sw-button @click="sendTestApi" :disabled="!enabled" variant="primary" :square="false" :block="true" :isLoading="isLoading">{{ $tc(\'buckaroo-payment.button.labelTestApi\') }}</sw-button>',mixins:[T.getByName("notification"),T.getByName("sw-inline-snippet")],data(){return{isLoading:!1}},inject:["BuckarooPaymentSettingsService"],props:{config:{type:Object,required:!0},currentSalesChannelId:{required:!0}},computed:{enabled:function(){return(this.getConfigValue("websiteKey")||"").length>0&&(this.getConfigValue("secretKey")||"").length>0}},methods:{getConfigValue:function(e){return this.config["BuckarooPayments.config."+e]},sendTestApi(){this.isLoading=!0;let e=this.getConfigValue("websiteKey"),t=this.getConfigValue("secretKey");this.BuckarooPaymentSettingsService.getApiTest(e,t,this.currentSalesChannelId).then(e=>{this.isLoading=!1,"success"==e.status?this.createNotificationSuccess({title:this.$tc("buckaroo-payment.settingsForm.titleSuccess"),message:this.$tc(e.message)}):this.createNotificationError({title:this.$tc("buckaroo-payment.settingsForm.titleError"),message:this.$tc(e.message)})}).catch(()=>{this.isLoading=!1})}}}),n(477);let{Component:S,Mixin:B}=Shopware;S.register("buckaroo-toggle-status",{template:'<div class="bk-toogle-wrap">\n    <button type="button" :disabled="isLoading" :class="`live ${getClass(\'live\')}`" @click="setStatus(\'live\')">Live</button>\n    <button type="button" :disabled="isLoading" :class="`test ${getClass(\'test\')}`" @click="setStatus(\'test\')">Test</button>\n    <button type="button" :disabled="isLoading" :class="`disabled ${getClass(\'disabled\')}`" @click="setStatus(\'disabled\')">Off</button>\n</div>',props:{method:{type:String,required:!0},value:{required:!0},currentSalesChannelId:{required:!0}},mixins:[B.getByName("notification")],inject:["systemConfigApiService"],data(){return{status:this.getStatus(),isLoading:!1}},watch:{value(){this.status=this.getStatus()}},methods:{getStatus(){return this.isActive()?this.getEnvironment():"disabled"},isActive(){return this.getValueForName(`${this.method}Enabled`)},getEnvironment(){let e=this.getValueForName(`${this.method}Environment`);return void 0===e?"test":e},getValueForName(e){return this.value?.[`BuckarooPayments.config.${e}`]},setStatus(e){this.status=e,this.saveStatus()},getClass(e){return this.status===e?"active":""},async saveStatus(){let e=`BuckarooPayments.config.${this.method}Enabled`,t=`BuckarooPayments.config.${this.method}Environment`,n={[e]:!1};this.$set(this.value,e,!1),-1!==["live","test"].indexOf(this.status)&&(n={[e]:!0,[t]:this.status},this.$set(this.value,e,!0),this.$set(this.value,t,this.status)),this.isLoading=!0;try{await this.systemConfigApiService.batchSave({[this.currentSalesChannelId]:n}).finally(()=>{this.isLoading=!1}),this.renderSuccess()}catch(e){this.renderError(e)}},renderSuccess(){this.createNotificationSuccess({message:this.$tc("sw-extension-store.component.sw-extension-config.messageSaveSuccess")})},renderError(e){this.createNotificationError({message:e})}}})}()})();
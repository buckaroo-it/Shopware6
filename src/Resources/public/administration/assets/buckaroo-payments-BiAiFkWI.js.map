{"version":3,"file":"buckaroo-payments-BiAiFkWI.js","sources":["../../../app/administration/src/module/buckaroo-payment/extension/sw-order/sw-order.html.twig","../../../app/administration/src/module/buckaroo-payment/extension/sw-order/index.js","../../../app/administration/src/module/buckaroo-payment/extension/sw-order-detail-base/sw-order-detail-base.html.twig","../../../app/administration/src/module/buckaroo-payment/extension/sw-order-detail-base/index.js","../../../app/administration/src/module/buckaroo-payment/extension/sw-order-user-card/sw-order-user-card.html.twig","../../../app/administration/src/module/buckaroo-payment/extension/sw-order-user-card/index.js","../../../app/administration/src/module/buckaroo-payment/extension/sw-system-config/sw-system-config.html.twig","../../../app/administration/src/module/buckaroo-payment/extension/sw-system-config/index.js","../../../app/administration/src/module/buckaroo-payment/page/buckaroo-payment-detail/buckaroo-payment-detail.html.twig","../../../app/administration/src/module/buckaroo-payment/page/buckaroo-payment-detail/index.js","../../../app/administration/src/module/buckaroo-payment/page/buckaroo-payment-config/index.js","../../../app/administration/src/module/buckaroo-payment/index.js","../../../app/administration/src/api/buckaroo-payment.service.js","../../../app/administration/src/api/buckaroo-payment-settings.service.js","../../../app/administration/src/components/buckaroo-afterpay-old-tax/buckaroo-afterpay-old-tax.html.twig","../../../app/administration/src/components/buckaroo-afterpay-old-tax/index.js","../../../app/administration/src/components/buckaroo-main-config/buckaroo-main-config.html.twig","../../../app/administration/src/components/buckaroo-main-config/index.js","../../../app/administration/src/components/buckaroo-config-card/buckaroo-config-card.html.twig","../../../app/administration/src/components/buckaroo-config-card/index.js","../../../app/administration/src/components/buckaroo-payment-list/buckaroo-payment-list.html.twig","../../../app/administration/src/components/buckaroo-payment-list/index.js","../../../app/administration/src/components/buckaroo-test-credentials/buckaroo-test-credentials.twig","../../../app/administration/src/components/buckaroo-test-credentials/index.js","../../../app/administration/src/components/buckaroo-toggle-status/buckaroo-toggle-status.html.twig","../../../app/administration/src/components/buckaroo-toggle-status/index.js"],"sourcesContent":["{% block sw_order_detail_content_tabs %}\n    <div\n     v-if=\"isPaymentInTestMode && setIsBuckarooPayment\"\n     style=\"max-width: 960px; margin: 0 auto 15px; background: rgb(251, 227, 231); border-radius:4px; color: #de294c; display:flex; align-items:center;\">\n        <div style=\"background:#de294c;padding: 4px 8px;border-radius: 4px 0 0 4px;\"><svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><defs><path d=\"m13.7744 1.4124 9.7058 18.6649c.5096.98.1283 2.1875-.8517 2.6971a2 2 0 0 1-.9227.2256H2.2942c-1.1045 0-2-.8954-2-2a2 2 0 0 1 .2256-.9227l9.7058-18.665c.5096-.98 1.7171-1.3613 2.6971-.8517a2 2 0 0 1 .8517.8518zM2.2942 21h19.4116L12 2.335 2.2942 21zM12 17c.5523 0 1 .4477 1 1s-.4477 1-1 1-1-.4477-1-1 .4477-1 1-1zm1-2c0 .5523-.4477 1-1 1s-1-.4477-1-1v-5c0-.5523.4477-1 1-1s1 .4477 1 1v5z\" id=\"icons-default-warning\"></path></defs><use xlink:href=\"#icons-default-warning\" fill=\"#fff\" fill-rule=\"evenodd\"></use></svg></div>\n        <p style=\"margin-left:10px;\">{{ $tc('buckaroo-payment.paymentInTestMode') }}</p>\n    </div>\n    {% parent %}\n{% endblock %}\n\n\n{% block sw_order_detail_content_tabs_general %}\n    {% parent %}\n\n    <sw-tabs-item v-if=\"setIsBuckarooPayment\" :route=\"{ name: 'buckaroo.payment.detail', params: { id: $route.params.id } }\" :title=\"$tc('buckaroo-payment.tabs.title')\">\n        {{ $tc('buckaroo-payment.tabs.title') }}\n    </sw-tabs-item>\n    \n{% endblock %}\n\n{% block sw_order_detail_actions %}\n    <template v-if=\"isEditable\">\n    </template>\n    {% parent %}\n{% endblock %}","import template from './sw-order.html.twig';\n\nconst { Component, Context } = Shopware;\nconst Criteria = Shopware.Data.Criteria;\n\nComponent.override('sw-order-detail', {\n    template,\n\n    data() {\n        return {\n            isBuckarooPayment: false,\n            isPaymentInTestMode: false\n        };\n    },\n\n    computed: {\n        isEditable() {\n            return !this.isBuckarooPayment || this.$route.name !== 'buckaroo.payment.detail';\n        },\n\n        showTabs() {\n            return true;\n        }\n    },\n\n    watch: {\n        orderId: {\n            deep: true,\n            handler() {\n                if (!this.orderId) {\n                    this.setIsBuckarooPayment(null);\n                    return;\n                }\n\n                const orderRepository = this.repositoryFactory.create('order');\n                const orderCriteria = new Criteria(1, 1);\n                orderCriteria.addAssociation('transactions');\n\n                orderRepository.get(this.orderId, Context.api, orderCriteria).then((order) => {\n\n                    this.setPaymentInTestMode(order);\n\n                    if (order.transactions.length <= 0 ||\n                        !order.transactions.last().paymentMethodId\n                    ) {\n                        this.setIsBuckarooPayment(null);\n                        return;\n                    }\n\n                    const paymentMethodId = order.transactions.last().paymentMethodId;\n\n                    if (paymentMethodId !== undefined && paymentMethodId !== null) {\n                        this.setIsBuckarooPayment(paymentMethodId);\n                    }\n                });\n            },\n            immediate: true\n        }\n    },\n\n    methods: {\n        setPaymentInTestMode(order) {\n            if (order.customFields && order.customFields.buckaroo_payment_in_test_mode) {\n                this.isPaymentInTestMode = order.customFields.buckaroo_payment_in_test_mode === true;\n            }\n        },\n        setIsBuckarooPayment(paymentMethodId) {\n            if (!paymentMethodId) {\n                return;\n            }\n            const paymentMethodRepository = this.repositoryFactory.create('payment_method');\n            paymentMethodRepository.get(paymentMethodId, Context.api).then(\n                (paymentMethod) => {\n                this.isBuckarooPayment = paymentMethod.formattedHandlerIdentifier.indexOf('buckaroo') >= 0;\n                }\n            );\n        }\n    }\n});","{% block sw_order_detail_base_line_items_summary %}\n\n    <sw-card-section divider=\"top\" secondary slim v-if=\"order.customFields !== null\">\n        <sw-container columns=\"1fr 440px\"\n        class=\"sw-order-detail__summary\" v-if=\"order.customFields.buckarooFee !== null && order.customFields.buckarooFee > 0\">\n            <sw-description-list grid=\"265px 1fr\"\n            class=\"sw-order-detail__summary-data\">\n                <dt>{{ $tc('buckaroo-payment.fee') }}</dt>\n                <dd>{{ order.customFields.buckarooFee }}\n                    {% if order.currency.isoCode == \"PLN\" %}\n                        PLN\n                    {% else %}\n                        {{ order.currency.symbol }}\n                    {% endif %}\n                    </dd>\n            </sw-description-list>\n        </sw-container>\n    </sw-card-section>\n\n    {% parent %}\n    \n{% endblock %}","import template from './sw-order-detail-base.html.twig';\n\nconst { Component, Context } = Shopware;\nconst Criteria = Shopware.Data.Criteria;\n\nComponent.override('sw-order-detail-base', {\n    template\n});\n","{% block sw_order_detail_base_secondary_info_payment %}\n    <template v-if=\"currentOrder.transactions.length > 0 && (!currentOrder.transactions.last().paymentMethod.translated.customFields || !currentOrder.transactions.last().paymentMethod.translated.customFields.is_buckaroo)\">\n        {% parent %}\n    </template>\n    <template v-if=\"currentOrder.transactions.length > 0 && currentOrder.transactions.last().paymentMethod.translated.customFields && currentOrder.transactions.last().paymentMethod.translated.customFields.is_buckaroo\">\n        <dt>{{ $tc('sw-order.detailBase.labelPaymentMethod') }}</dt>\n        <dd>\n            <template v-if=\"config['BuckarooPayments.config.' + currentOrder.transactions.last().paymentMethod.translated.customFields.buckaroo_key + 'Label']\">\n                {{ config['BuckarooPayments.config.' + currentOrder.transactions.last().paymentMethod.translated.customFields.buckaroo_key + 'Label'] }}\n            </template>\n        </dd>\n    </template>\n{% endblock %}\n\n","import template from './sw-order-user-card.html.twig';\n\nconst { Component } = Shopware;\n\nComponent.override('sw-order-user-card', {\n    template,\n\n    inject: [ 'systemConfigApiService' ],\n\n    data() {\n        return {\n            config: {}\n        };\n    },\n\n    created() {\n        this.systemConfigApiService.getValues('BuckarooPayments.config', null)\n            .then(values => {\n                this.config = values;\n            })\n            .finally(() => {\n            });\n    }\n\n});\n"," {% block sw_system_config_content_card %}\n    <template v-if=\"domain !== 'BuckarooPayments.config'\">\n        {% parent() %}\n    </template>\n    <template v-else>\n       <buckaroo-main-config\n            :value=\"actualConfigData[currentSalesChannelId]\"\n            :configSettings=\"config\"\n            :isNotDefaultSalesChannel=\"isNotDefaultSalesChannel\"\n            :currentSalesChannelId=\"currentSalesChannelId\"\n            :elementMethods=\"{getElementBind, getFieldError, getInheritWrapperBind, getInheritedValue, hasMapInheritanceSupport, getInlineSnippet, kebabCase}\"\n            @input=\"onConfigDataUpdate\"\n            v-if=\"!isLoading && actualConfigData[currentSalesChannelId] && config && config.length > 0\"\n        ></buckaroo-main-config>\n    </template>\n {% endblock %}"," import template from './sw-system-config.html.twig';\n\nconst { Component } = Shopware;\n\nComponent.override('sw-system-config', {\n    template,\n    \n    createdComponent() {\n        this.$super('createdComponent');\n        this.loadBuckarooConfigData();\n    },\n\n    methods: {\n        loadBuckarooConfigData() {\n            \n            this.systemConfigApiService.getValues('BuckarooPayments.config', this.currentSalesChannelId)\n                .then(response => {\n                    \n                    if (!this.actualConfigData[this.currentSalesChannelId]) {\n                        this.actualConfigData[this.currentSalesChannelId] = {};\n                    }\n\n                    const processedData = {};\n                    \n                    if (response && typeof response === 'object') {\n                        Object.keys(response).forEach(key => {\n                            const value = response[key];\n\n                            if (value && typeof value === 'object' && value.hasOwnProperty('_value')) {\n                                processedData[key] = value._value;\n                            } else {\n                                processedData[key] = value;\n                            }\n\n                            const shortKey = key.replace('BuckarooPayments.config.', '');\n                            if (shortKey !== key) {\n                                processedData[shortKey] = processedData[key];\n                            }\n                        });\n                    }\n\n                    this.actualConfigData[this.currentSalesChannelId] = {};\n                    Object.keys(processedData).forEach(key => {\n                        this.actualConfigData[this.currentSalesChannelId][key] = processedData[key];\n                    });\n\n                    this.$nextTick(() => {\n                        this.$forceUpdate();\n                    });\n                })\n                .catch(error => {\n                    console.error('Error fetching system config:', error);\n                });\n        },\n\n        onConfigDataUpdate(newValue) {\n            if (!this.actualConfigData[this.currentSalesChannelId]) {\n                this.actualConfigData[this.currentSalesChannelId] = {};\n            }\n            Object.keys(newValue).forEach(key => {\n                this.actualConfigData[this.currentSalesChannelId][key] = newValue[key];\n                if (!key.startsWith('BuckarooPayments.config.')) {\n                    const fullFieldName = `BuckarooPayments.config.${key}`;\n                    this.actualConfigData[this.currentSalesChannelId][fullFieldName] = newValue[key];\n                }\n            });\n        },\n\n        saveAll() {\n            if (this.domain !== 'BuckarooPayments.config') {\n                return this.$super('saveAll');\n            }\n            return this.saveBuckaroo();\n        },\n        \n        saveBuckaroo() {\n            this.isLoading = true;\n            return this.systemConfigApiService\n                .batchSave(this.getSelectedValues())\n                .finally(() => {\n                    this.isLoading = false;\n                });\n        },\n        \n        getCurrentConfigCard() {\n            const code = this.$route.params?.paymentCode || 'general';\n            return this.config.filter((card) => card.name === code)?.pop();\n        },\n        \n        getSelectedValues() {\n            const currentConfigValues = this.actualConfigData[this.currentSalesChannelId];\n            const currentPaymentCard = this.getCurrentConfigCard();\n\n            if (currentPaymentCard?.elements) {\n                let actualConfigValues = {};\n                currentPaymentCard?.elements.forEach((element) => {\n                    if (element?.name) {\n                        let value = currentConfigValues[element.name];\n\n                        if (value === undefined) {\n                            const cleanFieldName = element.name.replace('BuckarooPayments.config.', '');\n                            value = currentConfigValues[cleanFieldName];\n                        }\n                        \n                        actualConfigValues[element.name] = value;\n                    }\n                });\n                return { [this.currentSalesChannelId]: actualConfigValues };\n            }\n\n            return this.actualConfigData;\n        }\n    }\n});\n","{% block buckaroo_payment_detail %}\n    <div class=\"buckaroo-payment-detail\">\n        \n        <sw-card positionIdentifier=\"bk-paylink\" :title=\"$tc('buckaroo-payment.paymentDetail.paylinkTitle')\" v-if=\"isPaylinkVisible\">\n\n            {{ $tc('buckaroo-payment.paymentDetail.paylinkDescription') }}\n            \n            <span v-if=\"paylink\"> <br>\n            {{ $tc('buckaroo-payment.paymentDetail.yourLink') }}: <a :href=\"paylink\">{{ paylink }}</a>\n            </span>\n\n            <sw-container columns=\"1fr 440px\" class=\"sw-order-detail__summary\">\n                <sw-description-list grid=\"265px 1fr\" class=\"sw-order-detail__summary-data\"><dt></dt> <dd>\n            \n                        <sw-button @click=\"createPaylink(orderId)\" :disabled=\"!isPaylinkAvailable\">\n                            {{ $tc('buckaroo-payment.paymentDetail.paylinkButton') }}\n                        </sw-button></dd>\n                </sw-description-list>\n            </sw-container>\n\n        </sw-card>\n\n         <sw-card positionIdentifier=\"bk-refund\" :title=\"$tc('buckaroo-payment.paymentDetail.refundTitle')\">\n            \n            {{ $tc('buckaroo-payment.orderItems.title') }}\n            <sw-data-grid :dataSource=\"orderItems\"\n                :columns=\"orderItemsColumns\"\n                :showActions=\"false\"\n                :showSelection=\"false\">\n\n                    <template #column-name=\"{ item }\">\n                        <sw-product-variant-info :showTooltip=\"false\" :variations=\"item.variations\">\n                            {{ item.name }}\n                        </sw-product-variant-info>\n                    </template>\n                    <template #column-quantity=\"{ item }\">\n                        <input class=\"bk-reund-qty\" type=\"number\" min=\"0\" :max=\"item.quantityMax\" v-model=\"item.quantity\" @input=\"recalculateOrderItems\" onkeydown=\"return event.keyCode !== 69\">\n                    </template>\n\n            </sw-data-grid>\n\n            <sw-container columns=\"1fr 440px\" class=\"sw-order-detail__summary\">\n                <sw-description-list grid=\"265px 1fr\" class=\"sw-order-detail__summary-data\">\n                        <dt>{{ $tc('buckaroo-payment.paymentDetail.amountTotalTitle') }}: </dt>\n                        <dd>{{ buckaroo_refund_amount }}  {{ currency }}</dd>\n                </sw-description-list>\n            </sw-container>\n                 \n            <sw-card-section divider=\"top\" secondary slim>\n                <sw-container columns=\"1fr 440px\"\n                              class=\"sw-order-detail__summary\">\n                </sw-container>\n\n                <sw-data-grid :dataSource=\"transactionsToRefund\"\n                    :columns=\"transactionsToRefundColumns\"\n                    :showHeader=\"false\"\n                    :showActions=\"false\"\n                    :showSelection=\"false\">\n\n                        <template #column-transaction_method=\"{ item }\">\n                                <span v-if=\"item.transaction_method == 'KbcPaymentButton'\">\n                                    Kbc\n                                </span>\n                                <span v-else>\n                                    {{ item.transaction_method }}\n                                </span>\n                        </template>\n\n                        <template #column-amount=\"{ item }\">\n                            <input type=\"number\" min=\"0\" :max=\"item.amountMax\" v-model=\"item.amount\"  @input=\"recalculateRefundItems\" onkeydown=\"return event.keyCode !== 69\">\n                        </template>\n\n                </sw-data-grid>\n\n                <sw-container v-if=\"!isAuthorized\" columns=\"1fr 440px\" class=\"sw-order-detail__summary\">\n                    <sw-description-list grid=\"265px 1fr\" class=\"sw-order-detail__summary-data\">\n                            <dt>{{ $tc('buckaroo-payment.paymentDetail.amountCustomRefundTitle') }}: </dt>\n                            <dd>\n                                <input id=\"buckaroo_custom_refund_enabled\" type=\"checkbox\"\n                                       @click=\"toggleCustomRefund()\">\n                                <input id=\"buckaroo_custom_refund_amount\" type=\"number\"\n                                       v-model=\"buckaroo_refund_total_amount\" disabled style=\"width:70px;\"> {{ currency }}\n                            </dd>\n                    </sw-description-list>\n                    <sw-description-list grid=\"265px 1fr\" class=\"sw-order-detail__summary-data\">\n                            <dt>{{ $tc('buckaroo-payment.paymentDetail.amountRefundTotalTitle') }}: </dt>\n                            <dd>{{ buckaroo_refund_total_amount }} {{ currency }}</dd>\n                    </sw-description-list>\n                </sw-container>\n                 \n            </sw-card-section>\n\n            <sw-container columns=\"1fr 440px\" class=\"sw-order-detail__summary\">\n                <sw-description-list grid=\"265px 1fr\" class=\"sw-order-detail__summary-data\"><dt></dt><dd>\n                    <sw-button @click=\"refundOrder(orderId, buckaroo_refund_amount)\" :disabled=\"!isRefundPossible || isAuthorized\">\n                    {{ $tc('buckaroo-payment.paymentDetail.buttonTitle') }}\n                    </sw-button></dd>\n                </sw-description-list>\n            </sw-container>\n\n         </sw-card>\n\n        <sw-card positionIdentifier=\"bk-pay-desc\" :title=\"$tc('buckaroo-payment.paymentDetail.payTitle')\">\n\n            {{ $tc('buckaroo-payment.paymentDetail.payDescription') }}\n\n            <sw-container columns=\"1fr 440px\" class=\"sw-order-detail__summary\">\n                <sw-description-list grid=\"265px 1fr\" class=\"sw-order-detail__summary-data\"><dt></dt><dd>\n                        <sw-button @click=\"captureOrder(orderId)\" :disabled=\"!isCapturePossible\">\n                            {{ $tc('buckaroo-payment.paymentDetail.payButton') }}\n                        </sw-button></dd>\n                </sw-description-list>\n            </sw-container>\n\n        </sw-card>\n\n         <sw-card positionIdentifier=\"bk-pay-transaction\" :title=\"$tc('buckaroo-payment.paymentDetail.transactionsTitle')\">\n            <sw-data-grid :dataSource=\"relatedResources\"\n                :columns=\"relatedResourceColumns\"\n                :showActions=\"false\"\n                :showSelection=\"false\">\n\n                    <template #column-transaction_method=\"{ item }\">\n                            <span v-if=\"item.transaction_method == 'KbcPaymentButton'\">\n                                Kbc\n                            </span>\n                            <span v-else>\n                                {{ item.transaction_method }}\n                            </span>\n                    </template>\n\n            </sw-data-grid>\n         </sw-card>\n\n\n        <sw-loader v-if=\"isLoading\">\n        </sw-loader>\n    </div>\n{% endblock %}","import template from './buckaroo-payment-detail.html.twig';\nimport './buckaroo-payment-detail.scss';\n\nconst { Component, Filter, Context } = Shopware;\nconst Criteria = Shopware.Data.Criteria;\n\nComponent.register('buckaroo-payment-detail', {\n    template,\n\n    inject: [\n        'repositoryFactory',\n        'BuckarooPaymentService',\n        'systemConfigApiService'\n    ],\n\n    data() {\n        return {\n            config: {},\n            buckaroo_refund_amount: '0',\n            buckaroo_refund_total_amount: '0',\n            currency: 'EUR',\n            isRefundPossible: true,\n            isCapturePossible: false,\n            isPaylinkAvailable: false,\n            isPaylinkVisible: false,\n            paylinkMessage: '',\n            paylink: '',\n            isLoading: false,\n            order: false,\n            buckarooTransactions: null,\n            orderItems: [],\n            transactionsToRefund: [],\n            relatedResources: [],\n            isAuthorized: false\n        };\n    },\n\n    computed: {\n        orderItemsColumns() {\n            return [\n            {\n                property: 'name',\n                label: this.$tc('buckaroo-payment.orderItems.types.name'),\n                allowResize: false,\n                primary: true,\n                inlineEdit: true,\n                multiLine: true,\n            },\n            {\n                property: 'quantity',\n                label: this.$tc('buckaroo-payment.orderItems.types.quantity'),\n                rawData: true,\n                align: 'right'\n            },\n            {\n                property: 'totalAmount',\n                label: this.$tc('buckaroo-payment.orderItems.types.totalAmount'),\n                rawData: true,\n                align: 'right'\n            }\n            ];\n        },\n\n        transactionsToRefundColumns() {\n            return [\n                {\n                    property: 'transaction_method',\n                    rawData: true\n            },{\n                property: 'amount',\n                rawData: true\n            }\n            ];\n        },\n\n        relatedResourceColumns() {\n            return [\n                {\n                    property: 'created_at',\n                    label: this.$tc('buckaroo-payment.transactionHistory.types.created_at'),\n                    rawData: true\n            },\n                {\n                    property: 'total',\n                    label: this.$tc('buckaroo-payment.transactionHistory.types.total'),\n                    rawData: true\n            },{\n                property: 'shipping_costs',\n                label: this.$tc('buckaroo-payment.transactionHistory.types.shipping_costs'),\n                rawData: true\n            },{\n                property: 'total_excluding_vat',\n                label: this.$tc('buckaroo-payment.transactionHistory.types.total_excluding_vat'),\n                rawData: true\n            },{\n                property: 'vat',\n                label: this.$tc('buckaroo-payment.transactionHistory.types.vat'),\n                rawData: true\n            },{\n                property: 'transaction_key',\n                label: this.$tc('buckaroo-payment.transactionHistory.types.transaction_key'),\n                rawData: true\n            },{\n                property: 'transaction_method',\n                label: this.$tc('buckaroo-payment.transactionHistory.types.transaction_method'),\n                rawData: true\n            },{\n                property: 'statuscode',\n                label: this.$tc('buckaroo-payment.transactionHistory.types.statuscode'),\n                rawData: true\n            }\n            ];\n        }\n    },\n\n    created() {\n        this.createdComponent();\n    },\n\n    methods: {\n        recalculateOrderItems() {\n            this.buckaroo_refund_amount = 0;\n            for (const key in this.orderItems) {\n                this.orderItems[key]['totalAmount'] = parseFloat(parseFloat(this.orderItems[key]['unitPrice']) * parseFloat(this.orderItems[key]['quantity'] || 0)).toFixed(2);\n                this.buckaroo_refund_amount = parseFloat(parseFloat(this.buckaroo_refund_amount) + parseFloat(this.orderItems[key]['totalAmount'])).toFixed(2);\n            }\n        },\n        recalculateRefundItems() {\n            this.buckaroo_refund_total_amount = 0;\n            for (const key in this.transactionsToRefund) {\n                if (this.transactionsToRefund[key]['amount']) {\n                    this.buckaroo_refund_total_amount = parseFloat(parseFloat(this.buckaroo_refund_total_amount) + parseFloat(this.transactionsToRefund[key]['amount'])).toFixed(2);\n                }\n            }\n        },\n\n        getCustomRefundEnabledEl() {\n            return document.getElementById('buckaroo_custom_refund_enabled');\n        },\n\n        getCustomRefundAmountEl() {\n            return document.getElementById('buckaroo_custom_refund_amount');\n        },\n\n        toggleCustomRefund() {\n            if (this.getCustomRefundEnabledEl() && this.getCustomRefundAmountEl()) {\n                this.getCustomRefundAmountEl().disabled = !this.getCustomRefundEnabledEl().checked;\n            }\n        },\n\n        getCustomRefundAmount() {\n            if (this.getCustomRefundEnabledEl() && this.getCustomRefundAmountEl() && this.getCustomRefundEnabledEl().checked) {\n                return this.getCustomRefundAmountEl().value;\n            }\n            return 0;\n        },\n\n        createdComponent() {\n            let that = this;\n            const orderId = this.$route.params.id;\n\n            this.systemConfigApiService.getValues('BuckarooPayments.config', null)\n            .then(values => {\n                this.config = values;\n            });\n\n            const orderRepository = this.repositoryFactory.create('order');\n            const orderCriteria = new Criteria(1, 1);\n\n            this.orderId = orderId;\n            orderCriteria.addAssociation('transactions.paymentMethod')\n                         .addAssociation('transactions');\n\n            orderCriteria.getAssociation('transactions').addSorting(Criteria.sort('createdAt'));\n\n            orderRepository.get(orderId, Context.api, orderCriteria).then((order) => {\n                that.checkedIsAuthorized(order);\n                that.isCapturePossible = order.transactions &&\n                order.transactions.last().paymentMethod &&\n                order.transactions.last().paymentMethod.customFields &&\n                order.transactions.last().paymentMethod.customFields.buckaroo_key &&\n                ['klarnakp', 'billink'].includes(order.transactions.last().paymentMethod.customFields.buckaroo_key.toLowerCase()) || that.isAfterpayCapturePossible(order);\n\n                that.isPaylinkVisible = that.isPaylinkAvailable = this.getConfigValue('paylinkEnabled') && order.stateMachineState && order.stateMachineState.technicalName && order.stateMachineState.technicalName == 'open' && order.transactions && order.transactions.last().stateMachineState.technicalName == 'open';\n            });\n\n            this.BuckarooPaymentService.getBuckarooTransaction(orderId)\n                .then((response) => {\n                    that.orderItems = [];\n                    that.transactionsToRefund = [];\n                    that.relatedResources = [];\n\n                    this.$emit('loading-change', false);\n                    response.orderItems.forEach((element) => {\n                        that.orderItems.push({\n                            id: element.id,\n                            name: element.name,\n                            quantity: element.quantity,\n                            quantityMax: element.quantity,\n                            unitPrice: element.unitPrice.value,\n                            totalAmount: element.totalAmount.value,\n                            variations: element.variations || [],\n                        });\n                    })\n                    that.recalculateOrderItems();\n\n                    response.transactionsToRefund.forEach((element) => {\n                        that.transactionsToRefund.push({\n                            id: element.id,\n                            transactions: element.transactions,\n                            amount: element.total,\n                            amountMax: element.total,\n                            currency: element.currency,\n                            transaction_method: element.transaction_method,\n                            logo: element.transaction_method ? element.logo : null\n                        });\n                        that.currency = element.currency;\n                    })\n                    that.recalculateRefundItems();\n\n                    response.transactions.forEach((element) => {\n                        that.relatedResources.push({\n                            id: element.id,\n                            transaction_key: element.transaction,\n                            total: element.total,\n                            total_excluding_vat: element.total_excluding_vat,\n                            shipping_costs: element.shipping_costs,\n                            vat: element.vat,\n                            transaction_method: element.transaction_method,\n                            logo: element.transaction_method ? element.logo : null,\n                            created_at: element.created_at,\n                            statuscode: element.statuscode\n                        });\n                    })\n\n                })\n                .catch((errorResponse) => {\n                    console.log('errorResponse', errorResponse);\n                });\n\n        },\n\n        isAfterpayCapturePossible(order) {\n            return order.customFields.buckaroo_is_authorize === true;\n        },\n\n        checkedIsAuthorized(order) {\n            this.isAuthorized = order?.transactions?.last()?.stateMachineState?.technicalName === \"authorized\";\n        },\n\n        refundOrder(transaction, amount) {\n            let that = this;\n            that.isRefundPossible = false;\n            this.BuckarooPaymentService.refundPayment(transaction, this.transactionsToRefund, this.orderItems, this.getCustomRefundAmount())\n                .then((response) => {\n                    for (const key in response) {\n                        if (response[key].status) {\n                            this.$store.dispatch('notification/createNotification', {\n                                variant: 'success',\n                                title: that.$tc('buckaroo-payment.settingsForm.titleSuccess'),\n                                message: that.$tc(response[key].message) + response[key].amount\n                            });\n                        } else {\n                            this.$store.dispatch('notification/createNotification', {\n                                variant: 'error',\n                                title: that.$tc('buckaroo-payment.settingsForm.titleError'),\n                                message: that.$tc(response[key].message)\n                            });\n                        }\n                    }\n                    that.isRefundPossible = true;\n                    this.createdComponent();\n                })\n                .catch((errorResponse) => {\n                    this.$store.dispatch('notification/createNotification', {\n                        variant: 'error',\n                        title: this.$tc('buckaroo-payment.settingsForm.titleError'),\n                        message: errorResponse.response.data.message\n                    });\n                    that.isRefundPossible = true;\n                });\n        },\n\n        createPaylink(transaction) {\n            let that = this;\n            that.isPaylinkAvailable = false;\n            this.BuckarooPaymentService.createPaylink(transaction, this.transactionsToRefund, this.orderItems)\n                .then((response) => {\n                    if (response.status) {\n                        that.paylinkMessage = that.$tc(response.message) + response.paylinkhref;\n                        that.paylink = response.paylink;\n                        this.$store.dispatch('notification/createNotification', {\n                            variant: 'success',\n                            title: that.$tc('buckaroo-payment.settingsForm.titleSuccess'),\n                            message: that.paylinkMessage\n                        });\n                    } else {\n                        this.$store.dispatch('notification/createNotification', {\n                            variant: 'error',\n                            title: that.$tc('buckaroo-payment.settingsForm.titleError'),\n                            message: that.$tc(response.message)\n                        });\n                    }\n                    that.isPaylinkAvailable = true;\n                })\n                .catch((errorResponse) => {\n                    this.$store.dispatch('notification/createNotification', {\n                        variant: 'error',\n                        title: this.$tc('buckaroo-payment.settingsForm.titleError'),\n                        message: errorResponse.response.data.message\n                    });\n                    that.isPaylinkAvailable = true;\n                });\n        },\n\n        getConfigValue(field) {\n            return this.config[`BuckarooPayments.config.${field}`];\n        },\n\n        captureOrder(transaction) {\n            let that = this;\n            that.isCapturePossible = false;\n            this.BuckarooPaymentService.captureOrder(transaction, this.transactionsToRefund, this.orderItems)\n                .then((response) => {\n                    if (response.status) {\n                        this.$store.dispatch('notification/createNotification', {\n                            variant: 'success',\n                            title: that.$tc('buckaroo-payment.settingsForm.titleSuccess'),\n                            message: response.message\n                        });\n                    } else {\n                        this.$store.dispatch('notification/createNotification', {\n                            variant: 'error',\n                            title: that.$tc('buckaroo-payment.settingsForm.titleError'),\n                            message: response.message\n                        });\n                    }\n                    that.isCapturePossible = true;\n                    this.createdComponent();\n                })\n                .catch((errorResponse) => {\n                    this.$store.dispatch('notification/createNotification', {\n                        variant: 'error',\n                        title: this.$tc('buckaroo-payment.settingsForm.titleError'),\n                        message: that.$tc(errorResponse.response.data.message)\n                    });\n                    that.isCapturePossible = true;\n                });\n        }\n    }\n});\n","\nconst { Component } = Shopware;\n\nComponent.extend('buckaroo-payment-config', 'sw-extension-config', {\n});","const { Module } = Shopware;\n\nimport './extension/sw-order';\nimport './extension/sw-order-detail-base';\nimport './extension/sw-order-user-card';\nimport './extension/sw-system-config';\nimport './page/buckaroo-payment-detail';\n\nimport './page/buckaroo-payment-config';\n\nimport nlNL from './snippet/nl-NL.json';\nimport deDE from './snippet/de-DE.json';\nimport enGB from './snippet/en-GB.json';\n\nModule.register('buckaroo-payment', {\n    type: 'plugin',\n    name: 'BuckarooPayment',\n    title: 'buckaroo-payment.general.title',\n    description: 'buckaroo-payment.general.description',\n    version: '1.0.0',\n    targetVersion: '1.0.0',\n    color: '#000000',\n    icon: 'default-action-settings',\n\n    snippets: {\n        'nl-NL': nlNL,\n        'de-DE': deDE,\n        'en-GB': enGB\n    },\n\n    routeMiddleware(next, currentRoute) {\n        if (currentRoute.name === 'sw.order.detail') {\n            currentRoute.children.push({\n                component: 'buckaroo-payment-detail',\n                name: 'buckaroo.payment.detail',\n                isChildren: true,\n                path: '/sw/order/buckaroo/detail/:id'\n            });\n        }\n        next(currentRoute);\n    },\n\n    routes: {\n        config: {\n            component: 'buckaroo-payment-config',\n            path: ':namespace/payment/:paymentCode',\n            name: 'buckaroo.config.payment',\n            meta: {\n                parentPath:'sw.extension.config'\n            },\n            props: {\n                default(route) {\n                    return { namespace: route.params.namespace };\n                },\n            },\n        }\n    }\n});\n","const { ApiService } = Shopware.Classes;\n\nclass BuckarooPaymentService extends ApiService {\n    constructor(httpClient, loginService, apiEndpoint = 'buckaroo')\n    {\n        super(httpClient, loginService, apiEndpoint);\n    }\n\n    getBasicHeaders() {\n        if (this.loginService && typeof this.loginService.getToken === 'function') {\n            return super.getBasicHeaders();\n        }\n\n        return {\n            'Content-Type': 'application/json',\n            'Accept': 'application/json'\n        };\n    }\n\n    getBuckarooTransaction(transaction)\n    {\n        const apiRoute = `_action/${this.getApiBasePath()}/getBuckarooTransaction`;\n\n        return this.httpClient.post(\n            apiRoute,\n            {\n                transaction: transaction\n            },\n            {\n                headers: this.getBasicHeaders()\n            }\n        ).then((response) => {\n            return ApiService.handleResponse(response);\n        });\n    }\n\n    refundPayment(transaction, transactionsToRefund, orderItems, customRefundAmount)\n    {\n        const apiRoute = `_action/${this.getApiBasePath()}/refund`;\n\n        return this.httpClient.post(\n            apiRoute,\n            {\n                transaction: transaction,\n                transactionsToRefund: transactionsToRefund,\n                orderItems: orderItems,\n                customRefundAmount: customRefundAmount\n            },\n            {\n                headers: this.getBasicHeaders()\n            }\n        ).then((response) => {\n            return ApiService.handleResponse(response);\n        });\n    }\n\n    captureOrder(transaction)\n    {\n        const apiRoute = `_action/${this.getApiBasePath()}/capture`;\n\n        return this.httpClient.post(\n            apiRoute,\n            {\n                transaction: transaction\n            },\n            {\n                headers: this.getBasicHeaders()\n            }\n        ).then((response) => {\n            return ApiService.handleResponse(response);\n        });\n    }\n\n    createPaylink(transaction)\n    {\n        const apiRoute = `_action/${this.getApiBasePath()}/paylink`;\n\n        return this.httpClient.post(\n            apiRoute,\n            {\n                transaction: transaction\n            },\n            {\n                headers: this.getBasicHeaders()\n            }\n        ).then((response) => {\n            return ApiService.handleResponse(response);\n        });\n    }\n\n}\n\nShopware.Service().register('BuckarooPaymentService', () => {\n    const initContainer = Shopware.Application.getContainer('init');\n    return new BuckarooPaymentService(initContainer.httpClient, initContainer.loginService || null);\n});\n\n","const { ApiService } = Shopware.Classes;\n\nclass BuckarooPaymentSettingsService extends ApiService {\n    constructor(httpClient, loginService, apiEndpoint = 'buckaroo')\n    {\n        super(httpClient, loginService, apiEndpoint);\n    }\n\n    getBasicHeaders() {\n        if (this.loginService && typeof this.loginService.getToken === 'function') {\n            return super.getBasicHeaders();\n        }\n        return {\n            'Content-Type': 'application/json',\n            'Accept': 'application/json'\n        };\n    }\n\n    getSupportVersion()\n    {\n        const apiRoute = `_action/${this.getApiBasePath()}/version`;\n\n        return this.httpClient.post(\n            apiRoute,\n            {\n            },\n            {\n                headers: this.getBasicHeaders()\n            }\n        ).then((response) => {\n            return ApiService.handleResponse(response);\n        });\n    }\n\n    getTaxes()\n    {\n        const apiRoute = `_action/${this.getApiBasePath()}/taxes`;\n\n        return this.httpClient.post(\n            apiRoute,\n            {\n            },\n            {\n                headers: this.getBasicHeaders()\n            }\n        ).then((response) => {\n            return ApiService.handleResponse(response);\n        });\n    }\n\n    getIn3Icons()\n    {\n        const apiRoute = `_action/${this.getApiBasePath()}/in3/logos`;\n\n        return this.httpClient.post(\n            apiRoute,\n            {\n            },\n            {\n                headers: this.getBasicHeaders()\n            }\n        ).then((response) => {\n            return ApiService.handleResponse(response);\n        });\n    }\n\n    getApiTest(websiteKeyId, secretKeyId, currentSalesChannelId)\n    {\n        const apiRoute = `_action/${this.getApiBasePath()}/getBuckarooApiTest`;\n\n        return this.httpClient.post(\n            apiRoute,\n            {\n                websiteKeyId: websiteKeyId,\n                secretKeyId: secretKeyId,\n                saleChannelId: currentSalesChannelId\n            },\n            {\n                headers: this.getBasicHeaders()\n            }\n        ).then((response) => {\n            return ApiService.handleResponse(response);\n        });\n    }\n}\n\nShopware.Service().register('BuckarooPaymentSettingsService', () => {\n    const initContainer = Shopware.Application.getContainer('init');\n    // Ensure we use the global loginService which always exists in admin\n    const loginService = Shopware.Service('loginService');\n    return new BuckarooPaymentSettingsService(initContainer.httpClient, loginService);\n});\n\n","<div>\n    <a style=\"margin-bottom:10px;\" @click=\"showTaxes = !showTaxes\">{{$tc('buckaroo-payment.afterpay.setup')}}</a>\n    <div v-if=\"showTaxes\" style=\"padding: 10px;background: rgb(246 246 246); margin-bottom:10px;\">\n        <div class=\"tax\" v-for=\"tax in taxes\">\n            <sw-select-field\n            :label=\"tax.name\"\n            label-property=\"name\"\n            value-property=\"id\"\n            :options=\"afterpayTaxes\"\n            @change=\"(value) => setTaxAssociation(tax.id, value)\"\n            @input=\"(value) => setTaxAssociation(tax.id, value)\"\n            @update:value=\"(value) => setTaxAssociation(tax.id, value)\"\n            :value=\"getSelectValue(tax.id)\"\n            ></sw-select-field>\n        </div>\n    </div>\n</div>","const { Component } = Shopware;\n\nimport template from './buckaroo-afterpay-old-tax.html.twig';\n\nComponent.register('buckaroo-afterpay-old-tax', {\n    template,\n\n    inject: ['BuckarooPaymentSettingsService'],\n\n    data() {\n        return {\n            taxes: [],\n            showTaxes: false,\n            afterpayTaxes: [\n                { name: this.$tc('buckaroo-payment.afterpay.hightTaxes'), id: 1 },\n                { name: this.$tc('buckaroo-payment.afterpay.middleTaxes'), id: 5 },\n                { name: this.$tc('buckaroo-payment.afterpay.lowTaxes'), id: 2 },\n                { name: this.$tc('buckaroo-payment.afterpay.zeroTaxes'), id: 3 },\n                { name: this.$tc('buckaroo-payment.afterpay.noTaxes'), id: 4 },\n            ],\n            taxAssociation: {}\n        };\n    },\n\n    model: {\n        prop: 'value',\n        event: 'change',\n    },\n\n    computed: {\n\n    },\n    props: {\n        name: {\n            type: String,\n            required: true,\n            default: ''\n                },\n                value: {\n                    type: Object,\n                    required: false,\n                    default() {\n                        return {}\n                    }\n                }\n                },\n\n\n                created() {\n                    this.BuckarooPaymentSettingsService.getTaxes()\n                        .then((result) => {\n                            this.taxes = result.taxes.map((tax) => {\n                                return {\n                                    id: tax.id,\n                                    name: tax.name\n                                };\n                            })\n                        });\n\n                },\n                methods: {\n                    setTaxAssociation(taxId, eventOrValue) {\n                        \n                        try {\n                            let actualValue = eventOrValue;\n                            \n                            if (eventOrValue && typeof eventOrValue === 'object') {\n                                if (eventOrValue.target) {\n                                    actualValue = eventOrValue.target.value;\n                                } else if (eventOrValue.hasOwnProperty('value')) {\n                                    actualValue = eventOrValue.value;\n                                } else if (eventOrValue.hasOwnProperty('id')) {\n                                    actualValue = eventOrValue.id;\n                                }\n                            }\n                            this.taxAssociation[taxId] = actualValue;\n                            this.$emit('change', {...this.value, ...this.taxAssociation});\n                            \n                        } catch (error) {\n                            console.error('Error in setTaxAssociation:', error);\n                        }\n                    },\n                    getSelectValue(taxId) {\n                        if (this.value[taxId]) {\n                            return this.value[taxId];\n                        }\n                        return;\n                    }\n                }\n                });\n","<div>\n    <buckaroo-config-card\n            :card=\"mainCard\"\n            :methods=\"elementMethods\"\n            :isNotDefaultSalesChannel=\"isNotDefaultSalesChannel\"\n            :value=\"value\"\n            :currentSalesChannelId=\"currentSalesChannelId\"\n            @input=\"onInput\"\n            v-if=\"mainCard && value\">\n    </buckaroo-config-card>\n\n    <buckaroo-payment-list\n        v-if=\"selectedCard === 'general'\"\n        :configSettings=\"configSettings\"\n        :currentSalesChannelId=\"currentSalesChannelId\"\n        :value=\"value\"\n        @input=\"onInput\">\n    </buckaroo-payment-list>\n</div>","const { Component } = Shopware;\n\nimport template from \"./buckaroo-main-config.html.twig\";\n\nComponent.register(\"buckaroo-main-config\", {\n    template,\n    props: {\n        configSettings: {\n            type: Array,\n            required: false,\n            default: () => []\n        },\n        value: {\n            type: Object,\n            required: false,\n            default: () => ({})\n        },\n        elementMethods: {\n            type: Object,\n            required: false,\n            default: () => ({})\n        },\n        isNotDefaultSalesChannel: {\n            type: Boolean,\n            required: false,\n            default: false\n        },\n        currentSalesChannelId: {\n            type: String,\n            required: false,\n            default: null\n        }\n    },\n    emits: ['input'],\n\n    model: {\n        prop: 'value',\n        event: 'input'\n    },\n\n\n    data() {\n        return {\n            selectedCard: this.$route.params?.paymentCode || 'general'\n        }\n    },\n\n    watch: {\n        value: {\n            handler(newVal, oldVal) {\n                this.$nextTick(() => {\n                    this.$forceUpdate();\n                });\n            },\n            deep: true,\n            immediate: true\n        },\n        $route(to) {\n            if (to.params?.paymentCode) {\n                this.selectedCard = to.params.paymentCode;\n            }\n        }\n    },\n\n    computed: {\n        mainCard() {\n            const card = this.configSettings.filter((card) => card.name === this.selectedCard)?.pop();\n            return card;\n        }\n    },\n\n    methods: {\n        onInput(value) {\n            this.$emit('input', value);\n        }\n    }\n\n})","{% block buckaroo_config_card %}\n    <sw-card position-identifier=\"xxsw-system-config-content\" v-if=\"card\">\n        <template #title>\n            {{ getInlineSnippet(card.title) || 'Configuration' }}\n        </template>\n\n        <div v-for=\"element in (card.elements || [])\" :key=\"element.name\">\n            <div v-if=\"canShow(element)\">\n                <slot name=\"card-element\" v-bind=\"{ element: getElementBind(element), config: value, card }\">\n                    <sw-inherit-wrapper\n                            :value=\"getValueForName(element.name.replace('BuckarooPayments.config.', ''))\"\n                            v-bind=\"getInheritWrapperBind(element)\"\n                            :has-parent=\"isNotDefaultSalesChannel\"\n                            :inherited-value=\"getInheritedValue(element)\"\n                            :class=\"'sw-system-config--field-' + kebabCase(getElementBind(element).name)\"\n                            @input=\"onFieldInput(element.name, $event)\"\n                    >\n                        <template #content=\"props\">\n                            <sw-form-field-renderer\n                                    v-bind=\"getElementBind(element, props)\"\n                                    :key=\"props.isInheritField + props.isInherited\"\n                                    :disabled=\"props.isInherited\"\n                                    :value=\"props.currentValue\"\n                                    :error=\"getFieldError(element.name)\"\n                                    @input=\"(value) => { props.updateCurrentValue(value); onFieldInput(element.name, value); }\"\n                                    @change=\"(value) => { props.updateCurrentValue(value); onFieldInput(element.name, value); }\"\n                                    @update:value=\"(value) => { props.updateCurrentValue(value); onFieldInput(element.name, value); }\"\n                            />\n                        </template>\n                    </sw-inherit-wrapper>\n                </slot>\n            </div>\n        </div>\n\n        <buckaroo-test-credentials\n                v-if=\"canShowCredentialTester\"\n                :config=\"value\"\n                :currentSalesChannelId=\"currentSalesChannelId\"\n        />\n    </sw-card>\n{% endblock %}\n","import template from './buckaroo-config-card.html.twig';\n\nconst { Component } = Shopware;\n\nComponent.register('buckaroo-config-card', {\n    template,\n\n    mounted() {\n        this.$nextTick(() => {\n            this.$forceUpdate();\n        });\n    },\n    watch: {\n        value: {\n            handler() {\n                this.$nextTick(() => {\n                    this.$forceUpdate();\n                });\n            },\n            deep: true,\n            immediate: true\n        },\n        \n        currentSalesChannelId: {\n            handler(newChannelId, oldChannelId) {\n                if (newChannelId !== oldChannelId) {\n                    \n                    this.$nextTick(() => {\n                        this.$forceUpdate();\n                    });\n                }\n            },\n            immediate: false\n        }\n    },\n    computed: {\n        canShowCredentialTester() {\n            const key = this.getValueForName('websiteKey');\n            const secretKey = this.getValueForName('secretKey');\n            const isGeneralConfig = this.card?.name === 'general';\n            \n            if (!isGeneralConfig) {\n                return false;\n            }\n\n            const hasWebsiteKey = key !== undefined && key !== null && key !== '';\n            const hasSecretKey = secretKey !== undefined && secretKey !== null && secretKey !== '';\n            const canShow = hasWebsiteKey || hasSecretKey;\n            return canShow;\n        },\n        \n        hasValidConfigData() {\n            return this.value && typeof this.value === 'object' && Object.keys(this.value).length > 0;\n        },\n        \n       reactiveValue() {\n            return this.value;\n        }\n    },\n\n    emits: ['input'],\n\n    model: {\n        prop: 'value',\n        event: 'input'\n    },\n\n    props: {\n        card: {\n            type: Object,\n            required: false,\n            default: () => ({ elements: [] })\n        },\n        methods: {\n            type: Object,\n            required: true,\n        },\n        isNotDefaultSalesChannel: {\n            type: Boolean,\n            required: true,\n        },\n        currentSalesChannelId: {\n            type: String,\n            required: true,\n        },\n        value: {\n            type: Object,\n            required: false,\n            default: () => ({})\n        },\n    },\n\n    methods: {\n        getElementBind(element, props = {}) {\n            if (!this.methods || !this.methods.getElementBind) {\n                return {\n                    name: element.name,\n                    type: element.type || 'text',\n                    config: element.config || {},\n                    value: this.getValueForName(element.name.replace('BuckarooPayments.config.', ''))\n                };\n            }\n            \n            const baseBinding = this.methods.getElementBind(element, props);\n            \n            const fieldName = element.name.replace('BuckarooPayments.config.', '');\n            const currentValue = this.getValueForName(fieldName);\n            \n            baseBinding.value = currentValue;\n\n            \n            return baseBinding;\n        },\n\n        getInheritWrapperBind(element) {\n            if (!this.methods || !this.methods.getInheritWrapperBind) {\n                const fieldName = element.name.replace('BuckarooPayments.config.', '');\n                return {\n                    name: element.name,\n                    currentValue: this.getValueForName(fieldName)\n                };\n            }\n            \n            const baseBinding = this.methods.getInheritWrapperBind(element);\n            const fieldName = element.name.replace('BuckarooPayments.config.', '');\n            const currentValue = this.getValueForName(fieldName);\n\n            baseBinding.currentValue = currentValue;\n\n            \n            return baseBinding;\n        },\n\n        getFieldError(name) {\n            if (!this.methods || !this.methods.getFieldError) {\n                return null;\n            }\n            return this.methods.getFieldError(name);\n        },\n\n        kebabCase(string) {\n            if (!this.methods || !this.methods.kebabCase) {\n                return string ? string.toLowerCase().replace(/[A-Z]/g, '-$&').replace(/^-/, '') : '';\n            }\n            return this.methods.kebabCase(string);\n        },\n\n        getInlineSnippet(title) {\n            try {\n                if (typeof title === 'object' && title !== null) {\n                    const locale = this.$i18n?.locale || 'en-GB';\n                    \n                    if (title[locale]) {\n                        return title[locale];\n                    }\n                    \n                    if (title['en-GB']) {\n                        return title['en-GB'];\n                    }\n                    const firstKey = Object.keys(title)[0];\n                    if (firstKey && title[firstKey]) {\n                        return title[firstKey];\n                    }\n                    \n                    return JSON.stringify(title);\n                }\n                \n                if (typeof title === 'string') {\n                    if (this.$t && typeof this.$t === 'function') {\n                        return this.$t(title);\n                    }\n                    return title;\n                }\n                return String(title);\n                \n            } catch (error) {\n                console.warn('Translation error for:', title, error);\n                return typeof title === 'object' ? JSON.stringify(title) : String(title);\n            }\n        },\n\n        getInheritedValue(element) {\n            if (!this.methods || !this.methods.getInheritedValue) {\n                return null;\n            }\n            return this.methods.getInheritedValue(element);\n        },\n\n        getValueForName(name) {\n            const currentValue = this.reactiveValue;\n            \n            if (!currentValue || typeof currentValue !== 'object') {\n                return null;\n            }\n\n            let val = undefined;\n\n            const keyVariations = [\n                `BuckarooPayments.config.${name}`, // Full prefixed key\n                name.toLowerCase(),\n                name.charAt(0).toLowerCase() + name.slice(1),\n                name.charAt(0).toUpperCase() + name.slice(1)\n            ];\n\n            for (const key of keyVariations) {\n                if (currentValue[key] !== undefined) {\n                    val = currentValue[key];\n                    break;\n                }\n            }\n\n            if (val === undefined && currentValue['BuckarooPayments.config'] && typeof currentValue['BuckarooPayments.config'] === 'object') {\n                for (const key of keyVariations) {\n                    if (currentValue['BuckarooPayments.config'][key] !== undefined) {\n                        val = currentValue['BuckarooPayments.config'][key];\n                        break;\n                    }\n                }\n            }\n\n            if (val && typeof val === 'object' && val.hasOwnProperty('_value')) {\n                val = val._value;\n            }\n            return val;\n        },\n\n        canShow(element) {\n            if (!element || !element.name) {\n                return false;\n            }\n            \n            const name = element.name.replace('BuckarooPayments.config.', '');\n\n            const advancedToggleFields = [\n                'orderStatus',\n                'paymentSuccesStatus',\n                'automaticallyCloseOpenOrders',\n                'sendInvoiceEmail'\n            ];\n            if (advancedToggleFields.includes(name)) {\n                const advancedConfig = this.getValueForName('advancedConfiguration');\n                return Boolean(advancedConfig);\n            }\n\n            if (name === 'idealprocessingRenderMode') {\n                return Boolean(this.getValueForName('idealprocessingShowissuers'));\n            }\n\n            if (name === 'idealRenderMode') {\n                return Boolean(this.getValueForName('idealShowissuers'));\n            }\n\n            const idealFastCheckoutFields = [\n                'idealFastCheckoutEnabled',\n                'idealFastCheckoutVisibility',\n                'idealFastCheckoutLogoScheme'\n            ];\n            if (idealFastCheckoutFields.includes(name)) {\n                return Boolean(this.getValueForName('idealFastCheckout'));\n            }\n\n            if (name === 'afterpayPaymentstatus') {\n                return Boolean(this.getValueForName('afterpayCaptureonshippent'));\n            }\n\n            if (name === 'afterpayOldtax') {\n                return Boolean(this.getValueForName('afterpayEnabledold'));\n            }\n\n            return true;\n        },\n\n        onInput(value) {\n            this.$emit('input', value);\n        },\n        onFieldInput(fieldName, eventOrValue) {\n\n            try {\n                let actualValue = eventOrValue;\n                \n                if (eventOrValue && typeof eventOrValue === 'object') {\n                    if (eventOrValue.target) {\n                        const target = eventOrValue.target;\n\n                        if (target.type === 'checkbox' || target.type === 'radio') {\n                            actualValue = target.checked;\n                        } else if (target.tagName === 'SELECT' || target.type === 'select-one' || target.type === 'select-multiple') {\n                            if (target.multiple) {\n                                actualValue = Array.from(target.selectedOptions).map(option => option.value);\n                            } else {\n                                actualValue = target.value;\n                            }\n                        } else {\n                            actualValue = target.value;\n                        }\n                    } else if (eventOrValue.hasOwnProperty('value')) {\n                        actualValue = eventOrValue.value;\n                    } else if (eventOrValue.hasOwnProperty('id') && eventOrValue.hasOwnProperty('name')) {\n                        actualValue = eventOrValue.id;\n                    } else if (Array.isArray(eventOrValue)) {\n                        const totalCharacters = eventOrValue.filter(item => typeof item === 'string' && item.length === 1).length;\n                        const hasCommas = eventOrValue.some(item => item === ',');\n                        const hasLongStrings = eventOrValue.some(item => typeof item === 'string' && item.length > 1);\n\n                        const isCharacterArray = totalCharacters > 10 && hasCommas;\n\n                        \n                        if (isCharacterArray) {\n                            const correctValues = eventOrValue.filter(item => typeof item === 'string' && item.length > 1);\n                            const characterPart = eventOrValue.filter(item => typeof item === 'string' && item.length === 1);\n                            const rejoined = characterPart.join('');\n                            \n                            let splitValues = [];\n                            if (rejoined.includes(',')) {\n                                splitValues = rejoined.split(',').map(item => item.trim()).filter(item => item.length > 0);\n                            } else if (rejoined.length > 0) {\n                                splitValues = [rejoined];\n                            }\n\n                            actualValue = [...splitValues, ...correctValues].filter(item => item && item.length > 0);\n                        } else {\n                            actualValue = eventOrValue\n                                .filter(item => {\n                                    if (item === null || item === undefined || item === '') {\n                                        return false;\n                                    }\n\n                                    if (typeof item === 'string' && item.length === 1) {\n                                        return false;\n                                    }\n\n                                    if (typeof item === 'string' && (item.startsWith('+') || /^\\d+$/.test(item))) {\n\n                                        return false;\n                                    }\n                                    \n                                    return true;\n                                })\n                                .map(item => {\n                                    if (typeof item === 'object' && item !== null) {\n                                        let extractedValue = item.id || item.value || item.code || item.key || item;\n                                        return extractedValue;\n                                    }\n                                    return item;\n                                });\n                        }\n\n                    } else {\n                        const possibleKeys = ['id', 'value', 'key', 'code'];\n                        for (const key of possibleKeys) {\n                            if (eventOrValue[key] !== undefined) {\n                                actualValue = eventOrValue[key];\n                                break;\n                            }\n                        }\n                    }\n                } else if (typeof eventOrValue === 'boolean') {\n                    actualValue = eventOrValue;\n                } else if (typeof eventOrValue === 'string' || typeof eventOrValue === 'number') {\n                    actualValue = eventOrValue;\n                }\n\n                if (actualValue === \"on\") {\n                    actualValue = true;\n                } else if (actualValue === \"off\") {\n                    actualValue = false;\n                }\n                const cleanFieldName = fieldName.replace('BuckarooPayments.config.', '');\n                const updatedValue = { ...this.value };\n\n                updatedValue[cleanFieldName] = actualValue;\n                updatedValue[fieldName] = actualValue;\n\n                this.$emit('input', updatedValue);\n                \n            } catch (error) {\n                console.error('Error in onFieldInput:', error);\n                console.error('Error details:', error.stack);\n            }\n        }\n    }\n});\n","<sw-card\n    position-identifier=\"bk-config-payment-list\"\n    :title=\"$tc('buckaroo-payment.payment-methods')\"\n>\n<div class=\"bk-payment-wrap\">\n <template\n    v-for=\"payment in payments\" >\n    <div class=\"bk-payment\">\n        <div class=\"bk-payment-inner\">\n        <router-link  :title=\"$tc('buckaroo-payment.configure-payment')\" :to=\"{name: 'buckaroo.payment.config', params: {namespace: 'BuckarooPayments', paymentCode: payment.code } }\">\n            <div class=\"bk-payment-img\">\n                <img :src=\"assetFilter(`buckaroopayments/static/${payment.logo}`)\" alt=\"Payment logo\">\n            </div>\n            <div class=\"bk-payment-name\">\n                {{ getPaymentTitle(payment.code) }}\n            </div>\n        </router-link>\n\n        <buckaroo-toggle-status\n            :currentSalesChannelId=\"currentSalesChannelId\"\n            :method=\"payment.code\"\n            :value=\"value\"\n            @input=\"$emit('input', $event)\"\n        />\n\n        <router-link class=\"bk-link\" :title=\"$tc('buckaroo-payment.configure-payment')\" :to=\"{name: 'buckaroo.payment.config', params: {namespace: 'BuckarooPayments', paymentCode: payment.code } }\">\n            {{$tc('buckaroo-payment.configure-link')}}\n        </router-link>\n        </div>\n    </div>\n </template>\n </div>\n</sw-card>","const { Component, Filter } = Shopware;\nimport template from \"./buckaroo-payment-list.html.twig\";\nimport \"./style.scss\";\n\nComponent.register(\"buckaroo-payment-list\", {\n    template,\n    props: {\n        configSettings: {\n            type: Array,\n            required: false,\n            default: () => []\n        },\n        value: {\n            type: Object,\n            required: false,\n            default: () => ({})\n        },\n        currentSalesChannelId: {\n            type: String,\n            required: true\n        }\n    },\n\n    emits: ['input'],\n\n    data() {\n        return {\n            payments: [\n                {\n                    code: \"Alipay\",\n                    logo: \"alipay.svg\"\n                },\n                {\n                    code: \"applepay\",\n                    logo: \"applepay.svg\"\n                },\n                {\n                    code: \"bancontactmrcash\",\n                    logo: \"bancontact.svg\"\n                },\n                {\n                    code: \"blik\",\n                    logo: \"blik.svg\"\n                },\n                {\n                    code: \"belfius\",\n                    logo: \"belfius.svg\"\n                },\n                {\n                    code: \"Billink\",\n                    logo: \"billink.svg\"\n                },\n                {\n                    code: \"creditcard\",\n                    logo: \"creditcards.svg\"\n                },\n                {\n                    code: \"creditcards\",\n                    logo: \"creditcards.svg\"\n                },\n                {\n                    code: \"eps\",\n                    logo: \"eps.svg\"\n                },\n                {\n                    code: \"giftcards\",\n                    logo: \"giftcards.svg\"\n                },\n                {\n                    code: \"idealqr\",\n                    logo: \"ideal-qr.svg\"\n                },\n                {\n                    code: \"ideal\",\n                    logo: \"ideal.svg\"\n                },\n                {\n                    code: \"capayable\",\n                    logo: \"in3.svg\"\n                },\n                {\n                    code: \"KBCPaymentButton\",\n                    logo: \"kbc.svg\"\n                },\n                {\n                    code: \"klarnakp\",\n                    logo: \"klarna.svg\"\n                },\n                {\n                    code: \"knaken\",\n                    logo: \"gosettle.svg\"\n                },\n                {\n                    code: \"mbway\",\n                    logo: \"mbway.svg\"\n                },\n                {\n                    code: \"multibanco\",\n                    logo: \"multibanco.svg\"\n                },\n                {\n                    code: \"paybybank\",\n                    logo: \"paybybank.svg\"\n                },\n                {\n                    code: \"payconiq\",\n                    logo: \"payconiq.svg\"\n                },\n                {\n                    code: \"paypal\",\n                    logo: \"paypal.svg\"\n                },\n                {\n                    code: \"payperemail\",\n                    logo: \"payperemail.svg\"\n                },\n                {\n                    code: \"Przelewy24\",\n                    logo: \"przelewy24.svg\"\n                },\n                {\n                    code: \"afterpay\",\n                    logo: \"afterpay.svg\"\n                },\n                {\n                    code: \"sepadirectdebit\",\n                    logo: \"sepa-directdebit.svg\"\n                },\n                {\n                    code: \"transfer\",\n                    logo: \"sepa-credittransfer.svg\"\n                },\n                {\n                    code: \"Trustly\",\n                    logo: \"trustly.svg\"\n                },\n                {\n                    code: \"WeChatPay\",\n                    logo: \"wechatpay.svg\"\n                }\n            ]\n        };\n    },\n    methods: {\n        getPaymentTitle(code) {\n            if (this.configSettings && Array.isArray(this.configSettings)) {\n                const card = this.configSettings.find((card) => card.name === code);\n                if (card && card.title) {\n                    try {\n                        if (typeof card.title === 'object' && card.title !== null) {\n                            const locale = this.$i18n?.locale || 'en-GB';\n\n                            if (card.title[locale]) {\n                                return card.title[locale];\n                            }\n                            if (card.title['en-GB']) {\n                                return card.title['en-GB'];\n                            }\n                            \n                            const firstKey = Object.keys(card.title)[0];\n                            if (firstKey && card.title[firstKey]) {\n                                return card.title[firstKey];\n                            }\n                            \n                            return JSON.stringify(card.title);\n                        }\n                        \n                        if (typeof card.title === 'string') {\n                            if (this.$t && typeof this.$t === 'function') {\n                                return this.$t(card.title);\n                            }\n                            return card.title;\n                        }\n                        \n                        return String(card.title);\n                        \n                    } catch (error) {\n                        console.warn('Translation error for:', card.title, error);\n                        return typeof card.title === 'object' ? JSON.stringify(card.title) : String(card.title);\n                    }\n                }\n            }\n\n            const payment = this.payments.find(payment => payment.code === code);\n            return payment ? payment.code : 'Unknown Payment';\n        },\n        assetFilter(path) {\n            return Filter.getByName('asset')(path);\n        }\n    }\n});","    <sw-button @click=\"sendTestApi\" :disabled=\"!enabled\" variant=\"primary\" :square=\"false\" :block=\"true\" :isLoading=\"isLoading\">{{ $tc('buckaroo-payment.button.labelTestApi') }}</sw-button>","const { Component } = Shopware;\nimport template from \"./buckaroo-test-credentials.twig\";\n\nComponent.register(\"buckaroo-test-credentials\", {\n    template,\n    mixins: [\n        Shopware.Mixin.getByName('notification')\n    ],\n    data() {\n        return {\n            isLoading: false,\n        }\n    },\n    inject: [ 'BuckarooPaymentSettingsService' ],\n\n    props: {\n        config: {\n            type: Object,\n            required: true\n        },\n        currentSalesChannelId: {\n            required: true\n        }\n    },\n    computed: {\n        enabled: function() {\n            return (this.getConfigValue('websiteKey') || '').length > 0 &&\n            (this.getConfigValue('secretKey') || '').length > 0\n        }\n    },\n    methods: {\n        getConfigValue: function(name) {\n            return this.config[\"BuckarooPayments.config.\"+name];\n        },\n        sendTestApi() {\n            this.isLoading = true;\n            let websiteKeyId = this.getConfigValue('websiteKey'),\n                secretKeyId = this.getConfigValue('secretKey');\n            this.BuckarooPaymentSettingsService.getApiTest(websiteKeyId, secretKeyId, this.currentSalesChannelId)\n                .then((result) => {\n                    this.isLoading = false;\n\n                    if (result.status == 'success') {\n                        this.createNotificationSuccess({\n                            title: this.$tc('buckaroo-payment.settingsForm.titleSuccess'),\n                            message: this.$tc(result.message)\n                        });\n                    } else {\n                        this.createNotificationError({\n                            title: this.$tc('buckaroo-payment.settingsForm.titleError'),\n                            message: this.$tc(result.message)\n                        });\n                    }\n\n                })\n                .catch(() => {\n                    this.isLoading = false;\n                });\n        },\n    }\n})","<div class=\"bk-toogle-wrap\">\n    <button\n            type=\"button\"\n            :disabled=\"isLoading\"\n            :class=\"`live ${getClass('live')}`\"\n            @click=\"setStatus('live')\"\n    >\n        Live\n    </button>\n\n    <button\n            v-if=\"method !== 'idealqr'\"\n            type=\"button\"\n            :disabled=\"isLoading\"\n            :class=\"`test ${getClass('test')}`\"\n            @click=\"setStatus('test')\"\n    >\n        Test\n    </button>\n\n    <button\n            type=\"button\"\n            :disabled=\"isLoading\"\n            :class=\"`disabled ${getClass('disabled')}`\"\n            @click=\"setStatus('disabled')\"\n    >\n        Off\n    </button>\n</div>\n","const { Component } = Shopware;\nimport template from \"./buckaroo-toggle-status.html.twig\";\nimport './style.scss'\n\nComponent.register(\"buckaroo-toggle-status\", {\n    template,\n    props: {\n        method: {\n            type: String,\n            required: true\n        },\n        value: {\n            required: true\n        },\n        currentSalesChannelId: {\n            required: true,\n        }\n    },\n\n    emits: ['input'],\n\n    inject: ['systemConfigApiService'],\n    data() {\n        return {\n            status: 'disabled',\n            isLoading: false,\n        }\n    },\n\n    mounted() {\n        this.status = this.getStatus();\n    },\n\n    watch: {\n        value: {\n            handler(newVal) {\n                this.status = this.getStatus();\n            },\n            deep: true,\n            immediate: true\n        }\n    },\n    methods: {\n        getStatus() {\n            const isActive = this.isActive();\n            const environment = this.getEnvironment();\n            return isActive ? environment : 'disabled';\n        },\n        isActive() {\n            const enabled = this.getValueForName(`${this.method}Enabled`);\n            if (typeof enabled === 'string') {\n                return enabled.toLowerCase() === 'true';\n            }\n            return Boolean(enabled);\n        },\n        getEnvironment() {\n            const env = this.getValueForName(`${this.method}Environment`);\n            \n            if (env === undefined || env === null || env === '') {\n                return 'test';\n            }\n            const validEnvs = ['test', 'live'];\n            return validEnvs.includes(env) ? env : 'test';\n        },\n        getValueForName(name) {\n            const key = `BuckarooPayments.config.${name}`;\n            if (!this.value || typeof this.value !== 'object') {\n                return null;\n            }\n\n            let val = undefined;\n\n            if (this.value[key] !== undefined) {\n                val = this.value[key];\n            }\n            else if (this.value[name] !== undefined) {\n                val = this.value[name];\n            }\n            else if (this.value['BuckarooPayments.config'] && typeof this.value['BuckarooPayments.config'] === 'object') {\n                if (this.value['BuckarooPayments.config'][name] !== undefined) {\n                    val = this.value['BuckarooPayments.config'][name];\n                }\n            }\n            else {\n                const variations = [\n                    name,\n                    name.toLowerCase(),\n                    name.charAt(0).toLowerCase() + name.slice(1),\n                    name.charAt(0).toUpperCase() + name.slice(1)\n                ];\n                \n                for (const variation of variations) {\n                    const variationKey = `BuckarooPayments.config.${variation}`;\n                    if (this.value[variationKey] !== undefined) {\n                        val = this.value[variationKey];\n                        break;\n                    }\n                    if (this.value[variation] !== undefined) {\n                        val = this.value[variation];\n                        break;\n                    }\n                }\n            }\n\n            if (val && typeof val === 'object' && val.hasOwnProperty('_value')) {\n                val = val._value;\n            }\n            \n            return val;\n        },\n        setStatus(status) {\n            this.status = status;\n            this.saveStatus();\n        },\n        getClass(buttonStatus) {\n            return this.status === buttonStatus ? 'active' : '';\n        },\n        async saveStatus() {\n            const enabledKey = `BuckarooPayments.config.${this.method}Enabled`;\n            const environmentKey = `BuckarooPayments.config.${this.method}Environment`;\n\n            let data = {[enabledKey]: false};\n            const updatedValue = { ...this.value };\n            updatedValue[enabledKey] = false;\n\n            if (['live', 'test'].indexOf(this.status) !== -1) {\n                data = {\n                    [enabledKey]: true,\n                    [environmentKey]: this.status\n                }\n                updatedValue[enabledKey] = true;\n                updatedValue[environmentKey] = this.status;\n            }\n\n            this.$emit('input', updatedValue);\n\n            this.isLoading = true;\n            try {\n                await this.systemConfigApiService\n                .batchSave({[this.currentSalesChannelId]: data})\n                .finally(() => {\n                    this.isLoading = false;\n                });\n                this.renderSuccess();\n            } catch (error) {\n                this.renderError(error);\n            }\n           \n        },\n        renderSuccess() {\n            this.$store.dispatch('notification/createNotification', {\n                variant: 'success',\n                message: this.$tc('sw-extension-store.component.sw-extension-config.messageSaveSuccess'),\n            });\n        },\n\n        renderError(err) {\n            this.$store.dispatch('notification/createNotification', {\n                variant: 'error',\n                message: err,\n            });\n        }\n    }\n})"],"names":["template$a","Component","Context","Criteria","template","orderRepository","orderCriteria","order","paymentMethodId","paymentMethod","template$9","template$8","values","template$7","response","processedData","key","value","shortKey","error","newValue","fullFieldName","_a","_b","code","card","currentConfigValues","currentPaymentCard","actualConfigValues","element","cleanFieldName","template$6","Filter","that","orderId","errorResponse","_c","transaction","amount","field","Module","nlNL","deDE","enGB","next","currentRoute","route","ApiService","BuckarooPaymentService","httpClient","loginService","apiEndpoint","apiRoute","transactionsToRefund","orderItems","customRefundAmount","initContainer","BuckarooPaymentSettingsService","websiteKeyId","secretKeyId","currentSalesChannelId","template$5","result","tax","taxId","eventOrValue","actualValue","template$4","newVal","oldVal","to","template$3","newChannelId","oldChannelId","secretKey","hasWebsiteKey","hasSecretKey","props","baseBinding","fieldName","currentValue","name","string","title","locale","firstKey","val","keyVariations","target","option","totalCharacters","item","hasCommas","hasLongStrings","correctValues","rejoined","splitValues","possibleKeys","updatedValue","template$2","payment","path","template$1","isActive","environment","enabled","env","variations","variation","variationKey","status","buttonStatus","enabledKey","environmentKey","data","err"],"mappings":"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O,CACH,MAAO,CACH,SAAU,CACN,CACI,KAAM,SACN,KAAM,YACT,EACD,CACI,KAAM,WACN,KAAM,cACT,EACD,CACI,KAAM,mBACN,KAAM,gBACT,EACD,CACI,KAAM,OACN,KAAM,UACT,EACD,CACI,KAAM,UACN,KAAM,aACT,EACD,CACI,KAAM,UACN,KAAM,aACT,EACD,CACI,KAAM,aACN,KAAM,iBACT,EACD,CACI,KAAM,cACN,KAAM,iBACT,EACD,CACI,KAAM,MACN,KAAM,SACT,EACD,CACI,KAAM,YACN,KAAM,eACT,EACD,CACI,KAAM,UACN,KAAM,cACT,EACD,CACI,KAAM,QACN,KAAM,WACT,EACD,CACI,KAAM,YACN,KAAM,SACT,EACD,CACI,KAAM,mBACN,KAAM,SACT,EACD,CACI,KAAM,WACN,KAAM,YACT,EACD,CACI,KAAM,SACN,KAAM,cACT,EACD,CACI,KAAM,QACN,KAAM,WACT,EACD,CACI,KAAM,aACN,KAAM,gBACT,EACD,CACI,KAAM,YACN,KAAM,eACT,EACD,CACI,KAAM,WACN,KAAM,cACT,EACD,CACI,KAAM,SACN,KAAM,YACT,EACD,CACI,KAAM,cACN,KAAM,iBACT,EACD,CACI,KAAM,aACN,KAAM,gBACT,EACD,CACI,KAAM,WACN,KAAM,cACT,EACD,CACI,KAAM,kBACN,KAAM,sBACT,EACD,CACI,KAAM,WACN,KAAM,yBACT,EACD,CACI,KAAM,UACN,KAAM,aACT,EACD,CACI,KAAM,YACN,KAAM,eAC1B,CACA,CACS,CACJ,EACD,QAAS,CACL,gBAAgBoB,EAAM,CrBhJ9B,IAAAF,EqBiJY,GAAI,KAAK,gBAAkB,MAAM,QAAQ,KAAK,cAAc,EAAG,CAC3D,MAAMG,EAAO,KAAK,eAAe,KAAMA,GAASA,EAAK,OAASD,CAAI,EAClE,GAAIC,GAAQA,EAAK,MACb,GAAI,CACA,GAAI,OAAOA,EAAK,OAAU,UAAYA,EAAK,QAAU,KAAM,CACvD,MAAM2D,IAAS9D,EAAA,KAAK,QAAL,YAAAA,EAAY,SAAU,QAErC,GAAIG,EAAK,MAAM2D,CAAM,EACj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"}
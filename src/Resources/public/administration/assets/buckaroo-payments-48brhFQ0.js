const f=`{% block sw_order_detail_content_tabs %} <div v-if="isPaymentInTestMode && setIsBuckarooPayment" style="max-width: 960px; margin: 0 auto 15px; background: rgb(251, 227, 231); border-radius:4px; color: #de294c; display:flex; align-items:center;"> <div style="background:#de294c;padding: 4px 8px;border-radius: 4px 0 0 4px;"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="24" height="24" viewBox="0 0 24 24"><defs><path d="m13.7744 1.4124 9.7058 18.6649c.5096.98.1283 2.1875-.8517 2.6971a2 2 0 0 1-.9227.2256H2.2942c-1.1045 0-2-.8954-2-2a2 2 0 0 1 .2256-.9227l9.7058-18.665c.5096-.98 1.7171-1.3613 2.6971-.8517a2 2 0 0 1 .8517.8518zM2.2942 21h19.4116L12 2.335 2.2942 21zM12 17c.5523 0 1 .4477 1 1s-.4477 1-1 1-1-.4477-1-1 .4477-1 1-1zm1-2c0 .5523-.4477 1-1 1s-1-.4477-1-1v-5c0-.5523.4477-1 1-1s1 .4477 1 1v5z" id="icons-default-warning"></path></defs><use xlink:href="#icons-default-warning" fill="#fff" fill-rule="evenodd"></use></svg></div> <p style="margin-left:10px;">{{ $tc('buckaroo-payment.paymentInTestMode') }}</p> </div> {% parent %} {% endblock %} {% block sw_order_detail_content_tabs_general %} {% parent %} <sw-tabs-item v-if="setIsBuckarooPayment" :route="{ name: 'buckaroo.payment.detail', params: { id: $route.params.id } }" :title="$tc('buckaroo-payment.tabs.title')"> {{ $tc('buckaroo-payment.tabs.title') }} </sw-tabs-item> {% endblock %} {% block sw_order_detail_actions %} <template v-if="isEditable"> </template> {% parent %} {% endblock %}`,{Component:y,Context:m}=Shopware,k=Shopware.Data.Criteria;y.override("sw-order-detail",{template:f,data(){return{isBuckarooPayment:!1,isPaymentInTestMode:!1}},computed:{isEditable(){return!this.isBuckarooPayment||this.$route.name!=="buckaroo.payment.detail"},showTabs(){return!0}},watch:{orderId:{deep:!0,handler(){if(!this.orderId){this.setIsBuckarooPayment(null);return}const e=this.repositoryFactory.create("order"),t=new k(1,1);t.addAssociation("transactions"),e.get(this.orderId,m.api,t).then(a=>{if(this.setPaymentInTestMode(a),a.transactions.length<=0||!a.transactions.last().paymentMethodId){this.setIsBuckarooPayment(null);return}const n=a.transactions.last().paymentMethodId;n!=null&&this.setIsBuckarooPayment(n)})},immediate:!0}},methods:{setPaymentInTestMode(e){e.customFields&&e.customFields.buckaroo_payment_in_test_mode&&(this.isPaymentInTestMode=e.customFields.buckaroo_payment_in_test_mode===!0)},setIsBuckarooPayment(e){if(!e)return;this.repositoryFactory.create("payment_method").get(e,m.api).then(a=>{this.isBuckarooPayment=a.formattedHandlerIdentifier.indexOf("buckaroo")>=0})}}});const b=`{% block sw_order_detail_base_line_items_summary %} <sw-card-section divider="top" secondary slim v-if="order.customFields !== null"> <sw-container columns="1fr 440px" class="sw-order-detail__summary" v-if="order.customFields.buckarooFee !== null && order.customFields.buckarooFee > 0"> <sw-description-list grid="265px 1fr" class="sw-order-detail__summary-data"> <dt>{{ $tc('buckaroo-payment.fee') }}</dt> <dd>{{ order.customFields.buckarooFee }} {% if order.currency.isoCode == "PLN" %} PLN {% else %} {{ order.currency.symbol }} {% endif %} </dd> </sw-description-list> </sw-container> </sw-card-section> {% parent %} {% endblock %}`,{Component:v,Context:J}=Shopware;Shopware.Data.Criteria;v.override("sw-order-detail-base",{template:b});const w=`{% block sw_order_detail_base_secondary_info_payment %} <template v-if="currentOrder.transactions.length > 0 && (!currentOrder.transactions.last().paymentMethod.translated.customFields || !currentOrder.transactions.last().paymentMethod.translated.customFields.is_buckaroo)"> {% parent %} </template> <template v-if="currentOrder.transactions.length > 0 && currentOrder.transactions.last().paymentMethod.translated.customFields && currentOrder.transactions.last().paymentMethod.translated.customFields.is_buckaroo"> <dt>{{ $tc('sw-order.detailBase.labelPaymentMethod') }}</dt> <dd> <template v-if="config['BuckarooPayments.config.' + currentOrder.transactions.last().paymentMethod.translated.customFields.buckaroo_key + 'Label']"> {{ config['BuckarooPayments.config.' + currentOrder.transactions.last().paymentMethod.translated.customFields.buckaroo_key + 'Label'] }} </template> </dd> </template> {% endblock %}`,{Component:C}=Shopware;C.override("sw-order-user-card",{template:w,inject:["systemConfigApiService"],data(){return{config:{}}},created(){this.systemConfigApiService.getValues("BuckarooPayments.config",null).then(e=>{this.config=e}).finally(()=>{})}});const _=`{% block sw_system_config_content_card %} <template v-if="domain !== 'BuckarooPayments.config'"> {% parent() %} </template> <template v-else> <buckaroo-main-config :value="actualConfigData[currentSalesChannelId]" :configSettings="config" :isNotDefaultSalesChannel="isNotDefaultSalesChannel" :currentSalesChannelId="currentSalesChannelId" :elementMethods="{getElementBind, getFieldError, getInheritWrapperBind, getInheritedValue, hasMapInheritanceSupport, getInlineSnippet, kebabCase}" @input="onConfigDataUpdate" v-if="!isLoading && actualConfigData[currentSalesChannelId] && config && config.length > 0" ></buckaroo-main-config> </template> {% endblock %}`,{Component:S}=Shopware;S.override("sw-system-config",{template:_,createdComponent(){this.$super("createdComponent"),this.loadBuckarooConfigData()},methods:{loadBuckarooConfigData(){this.systemConfigApiService.getValues("BuckarooPayments.config",this.currentSalesChannelId).then(e=>{console.log("Raw response from API:",e),this.actualConfigData[this.currentSalesChannelId]||(this.actualConfigData[this.currentSalesChannelId]={});const t={};e&&typeof e=="object"&&Object.keys(e).forEach(a=>{const n=e[a];n&&typeof n=="object"&&n.hasOwnProperty("_value")?t[a]=n._value:t[a]=n;const o=a.replace("BuckarooPayments.config.","");o!==a&&(t[o]=t[a])}),this.actualConfigData[this.currentSalesChannelId]={},Object.keys(t).forEach(a=>{this.actualConfigData[this.currentSalesChannelId][a]=t[a]}),this.$nextTick(()=>{this.$forceUpdate()})}).catch(e=>{console.error("Error fetching system config:",e)})},onConfigDataUpdate(e){this.actualConfigData[this.currentSalesChannelId]||(this.actualConfigData[this.currentSalesChannelId]={}),Object.keys(e).forEach(t=>{if(this.actualConfigData[this.currentSalesChannelId][t]=e[t],!t.startsWith("BuckarooPayments.config.")){const a=`BuckarooPayments.config.${t}`;this.actualConfigData[this.currentSalesChannelId][a]=e[t]}})},saveAll(){return this.domain!=="BuckarooPayments.config"?this.$super("saveAll"):this.saveBuckaroo()},saveBuckaroo(){return this.isLoading=!0,this.systemConfigApiService.batchSave(this.getSelectedValues()).finally(()=>{this.isLoading=!1})},getCurrentConfigCard(){var t,a;const e=((t=this.$route.params)==null?void 0:t.paymentCode)||"general";return(a=this.config.filter(n=>n.name===e))==null?void 0:a.pop()},getSelectedValues(){const e=this.actualConfigData[this.currentSalesChannelId],t=this.getCurrentConfigCard();if(t!=null&&t.elements){let a={};return t==null||t.elements.forEach(n=>{if(n!=null&&n.name){let o=e[n.name];if(o===void 0){const i=n.name.replace("BuckarooPayments.config.","");o=e[i]}a[n.name]=o}}),{[this.currentSalesChannelId]:a}}return this.actualConfigData}}});const T=`{% block buckaroo_payment_detail %} <div class="buckaroo-payment-detail"> <sw-card positionIdentifier="bk-paylink" :title="$tc('buckaroo-payment.paymentDetail.paylinkTitle')" v-if="isPaylinkVisible"> {{ $tc('buckaroo-payment.paymentDetail.paylinkDescription') }} <span v-if="paylink"> <br> {{ $tc('buckaroo-payment.paymentDetail.yourLink') }}: <a :href="paylink">{{ paylink }}</a> </span> <sw-container columns="1fr 440px" class="sw-order-detail__summary"> <sw-description-list grid="265px 1fr" class="sw-order-detail__summary-data"><dt></dt> <dd> <sw-button @click="createPaylink(orderId)" :disabled="!isPaylinkAvailable"> {{ $tc('buckaroo-payment.paymentDetail.paylinkButton') }} </sw-button></dd> </sw-description-list> </sw-container> </sw-card> <sw-card positionIdentifier="bk-refund" :title="$tc('buckaroo-payment.paymentDetail.refundTitle')"> {{ $tc('buckaroo-payment.orderItems.title') }} <sw-data-grid :dataSource="orderItems" :columns="orderItemsColumns" :showActions="false" :showSelection="false"> <template #column-name="{ item }"> <sw-product-variant-info :showTooltip="false" :variations="item.variations"> {{ item.name }} </sw-product-variant-info> </template> <template #column-quantity="{ item }"> <input class="bk-reund-qty" type="number" min="0" :max="item.quantityMax" v-model="item.quantity" @input="recalculateOrderItems" onkeydown="return event.keyCode !== 69"> </template> </sw-data-grid> <sw-container columns="1fr 440px" class="sw-order-detail__summary"> <sw-description-list grid="265px 1fr" class="sw-order-detail__summary-data"> <dt>{{ $tc('buckaroo-payment.paymentDetail.amountTotalTitle') }}: </dt> <dd>{{ buckaroo_refund_amount }} {{ currency }}</dd> </sw-description-list> </sw-container> <sw-card-section divider="top" secondary slim> <sw-container columns="1fr 440px" class="sw-order-detail__summary"> </sw-container> <sw-data-grid :dataSource="transactionsToRefund" :columns="transactionsToRefundColumns" :showHeader="false" :showActions="false" :showSelection="false"> <template #column-transaction_method="{ item }"> <span v-if="item.transaction_method == 'KbcPaymentButton'"> Kbc </span> <span v-else> {{ item.transaction_method }} </span> </template> <template #column-amount="{ item }"> <input type="number" min="0" :max="item.amountMax" v-model="item.amount" @input="recalculateRefundItems" onkeydown="return event.keyCode !== 69"> </template> </sw-data-grid> <sw-container v-if="!isAuthorized" columns="1fr 440px" class="sw-order-detail__summary"> <sw-description-list grid="265px 1fr" class="sw-order-detail__summary-data"> <dt>{{ $tc('buckaroo-payment.paymentDetail.amountCustomRefundTitle') }}: </dt> <dd> <input id="buckaroo_custom_refund_enabled" type="checkbox" @click="toggleCustomRefund()"> <input id="buckaroo_custom_refund_amount" type="number" v-model="buckaroo_refund_total_amount" disabled style="width:70px;"> {{ currency }} </dd> </sw-description-list> <sw-description-list grid="265px 1fr" class="sw-order-detail__summary-data"> <dt>{{ $tc('buckaroo-payment.paymentDetail.amountRefundTotalTitle') }}: </dt> <dd>{{ buckaroo_refund_total_amount }} {{ currency }}</dd> </sw-description-list> </sw-container> </sw-card-section> <sw-container columns="1fr 440px" class="sw-order-detail__summary"> <sw-description-list grid="265px 1fr" class="sw-order-detail__summary-data"><dt></dt><dd> <sw-button @click="refundOrder(orderId, buckaroo_refund_amount)" :disabled="!isRefundPossible || isAuthorized"> {{ $tc('buckaroo-payment.paymentDetail.buttonTitle') }} </sw-button></dd> </sw-description-list> </sw-container> </sw-card> <sw-card positionIdentifier="bk-pay-desc" :title="$tc('buckaroo-payment.paymentDetail.payTitle')"> {{ $tc('buckaroo-payment.paymentDetail.payDescription') }} <sw-container columns="1fr 440px" class="sw-order-detail__summary"> <sw-description-list grid="265px 1fr" class="sw-order-detail__summary-data"><dt></dt><dd> <sw-button @click="captureOrder(orderId)" :disabled="!isCapturePossible"> {{ $tc('buckaroo-payment.paymentDetail.payButton') }} </sw-button></dd> </sw-description-list> </sw-container> </sw-card> <sw-card positionIdentifier="bk-pay-transaction" :title="$tc('buckaroo-payment.paymentDetail.transactionsTitle')"> <sw-data-grid :dataSource="relatedResources" :columns="relatedResourceColumns" :showActions="false" :showSelection="false"> <template #column-transaction_method="{ item }"> <span v-if="item.transaction_method == 'KbcPaymentButton'"> Kbc </span> <span v-else> {{ item.transaction_method }} </span> </template> </sw-data-grid> </sw-card> <sw-loader v-if="isLoading"> </sw-loader> </div> {% endblock %}`,{Component:B,Filter:Y,Context:P}=Shopware,h=Shopware.Data.Criteria;B.register("buckaroo-payment-detail",{template:T,inject:["repositoryFactory","BuckarooPaymentService","systemConfigApiService"],data(){return{config:{},buckaroo_refund_amount:"0",buckaroo_refund_total_amount:"0",currency:"EUR",isRefundPossible:!0,isCapturePossible:!1,isPaylinkAvailable:!1,isPaylinkVisible:!1,paylinkMessage:"",paylink:"",isLoading:!1,order:!1,buckarooTransactions:null,orderItems:[],transactionsToRefund:[],relatedResources:[],isAuthorized:!1}},computed:{orderItemsColumns(){return[{property:"name",label:this.$tc("buckaroo-payment.orderItems.types.name"),allowResize:!1,primary:!0,inlineEdit:!0,multiLine:!0},{property:"quantity",label:this.$tc("buckaroo-payment.orderItems.types.quantity"),rawData:!0,align:"right"},{property:"totalAmount",label:this.$tc("buckaroo-payment.orderItems.types.totalAmount"),rawData:!0,align:"right"}]},transactionsToRefundColumns(){return[{property:"transaction_method",rawData:!0},{property:"amount",rawData:!0}]},relatedResourceColumns(){return[{property:"created_at",label:this.$tc("buckaroo-payment.transactionHistory.types.created_at"),rawData:!0},{property:"total",label:this.$tc("buckaroo-payment.transactionHistory.types.total"),rawData:!0},{property:"shipping_costs",label:this.$tc("buckaroo-payment.transactionHistory.types.shipping_costs"),rawData:!0},{property:"total_excluding_vat",label:this.$tc("buckaroo-payment.transactionHistory.types.total_excluding_vat"),rawData:!0},{property:"vat",label:this.$tc("buckaroo-payment.transactionHistory.types.vat"),rawData:!0},{property:"transaction_key",label:this.$tc("buckaroo-payment.transactionHistory.types.transaction_key"),rawData:!0},{property:"transaction_method",label:this.$tc("buckaroo-payment.transactionHistory.types.transaction_method"),rawData:!0},{property:"statuscode",label:this.$tc("buckaroo-payment.transactionHistory.types.statuscode"),rawData:!0}]}},created(){this.createdComponent()},methods:{recalculateOrderItems(){this.buckaroo_refund_amount=0;for(const e in this.orderItems)this.orderItems[e].totalAmount=parseFloat(parseFloat(this.orderItems[e].unitPrice)*parseFloat(this.orderItems[e].quantity||0)).toFixed(2),this.buckaroo_refund_amount=parseFloat(parseFloat(this.buckaroo_refund_amount)+parseFloat(this.orderItems[e].totalAmount)).toFixed(2)},recalculateRefundItems(){this.buckaroo_refund_total_amount=0;for(const e in this.transactionsToRefund)this.transactionsToRefund[e].amount&&(this.buckaroo_refund_total_amount=parseFloat(parseFloat(this.buckaroo_refund_total_amount)+parseFloat(this.transactionsToRefund[e].amount)).toFixed(2))},getCustomRefundEnabledEl(){return document.getElementById("buckaroo_custom_refund_enabled")},getCustomRefundAmountEl(){return document.getElementById("buckaroo_custom_refund_amount")},toggleCustomRefund(){this.getCustomRefundEnabledEl()&&this.getCustomRefundAmountEl()&&(this.getCustomRefundAmountEl().disabled=!this.getCustomRefundEnabledEl().checked)},getCustomRefundAmount(){return this.getCustomRefundEnabledEl()&&this.getCustomRefundAmountEl()&&this.getCustomRefundEnabledEl().checked?this.getCustomRefundAmountEl().value:0},createdComponent(){let e=this;const t=this.$route.params.id;this.systemConfigApiService.getValues("BuckarooPayments.config",null).then(o=>{this.config=o});const a=this.repositoryFactory.create("order"),n=new h(1,1);this.orderId=t,n.addAssociation("transactions.paymentMethod").addAssociation("transactions"),n.getAssociation("transactions").addSorting(h.sort("createdAt")),a.get(t,P.api,n).then(o=>{e.checkedIsAuthorized(o),e.isCapturePossible=o.transactions&&o.transactions.last().paymentMethod&&o.transactions.last().paymentMethod.customFields&&o.transactions.last().paymentMethod.customFields.buckaroo_key&&["klarnakp","billink"].includes(o.transactions.last().paymentMethod.customFields.buckaroo_key.toLowerCase())||e.isAfterpayCapturePossible(o),e.isPaylinkVisible=e.isPaylinkAvailable=this.getConfigValue("paylinkEnabled")&&o.stateMachineState&&o.stateMachineState.technicalName&&o.stateMachineState.technicalName=="open"&&o.transactions&&o.transactions.last().stateMachineState.technicalName=="open"}),this.BuckarooPaymentService.getBuckarooTransaction(t).then(o=>{e.orderItems=[],e.transactionsToRefund=[],e.relatedResources=[],this.$emit("loading-change",!1),o.orderItems.forEach(i=>{e.orderItems.push({id:i.id,name:i.name,quantity:i.quantity,quantityMax:i.quantity,unitPrice:i.unitPrice.value,totalAmount:i.totalAmount.value,variations:i.variations||[]})}),e.recalculateOrderItems(),o.transactionsToRefund.forEach(i=>{e.transactionsToRefund.push({id:i.id,transactions:i.transactions,amount:i.total,amountMax:i.total,currency:i.currency,transaction_method:i.transaction_method,logo:i.transaction_method?i.logo:null}),e.currency=i.currency}),e.recalculateRefundItems(),o.transactions.forEach(i=>{e.relatedResources.push({id:i.id,transaction_key:i.transaction,total:i.total,total_excluding_vat:i.total_excluding_vat,shipping_costs:i.shipping_costs,vat:i.vat,transaction_method:i.transaction_method,logo:i.transaction_method?i.logo:null,created_at:i.created_at,statuscode:i.statuscode})})}).catch(o=>{console.log("errorResponse",o)})},isAfterpayCapturePossible(e){return e.customFields.buckaroo_is_authorize===!0},checkedIsAuthorized(e){var t,a,n;this.isAuthorized=((n=(a=(t=e==null?void 0:e.transactions)==null?void 0:t.last())==null?void 0:a.stateMachineState)==null?void 0:n.technicalName)==="authorized"},refundOrder(e,t){let a=this;a.isRefundPossible=!1,this.BuckarooPaymentService.refundPayment(e,this.transactionsToRefund,this.orderItems,this.getCustomRefundAmount()).then(n=>{for(const o in n)n[o].status?this.$store.dispatch("notification/createNotification",{variant:"success",title:a.$tc("buckaroo-payment.settingsForm.titleSuccess"),message:a.$tc(n[o].message)+n[o].amount}):this.$store.dispatch("notification/createNotification",{variant:"error",title:a.$tc("buckaroo-payment.settingsForm.titleError"),message:a.$tc(n[o].message)});a.isRefundPossible=!0,this.createdComponent()}).catch(n=>{this.$store.dispatch("notification/createNotification",{variant:"error",title:this.$tc("buckaroo-payment.settingsForm.titleError"),message:n.response.data.message}),a.isRefundPossible=!0})},createPaylink(e){let t=this;t.isPaylinkAvailable=!1,this.BuckarooPaymentService.createPaylink(e,this.transactionsToRefund,this.orderItems).then(a=>{a.status?(t.paylinkMessage=t.$tc(a.message)+a.paylinkhref,t.paylink=a.paylink,this.$store.dispatch("notification/createNotification",{variant:"success",title:t.$tc("buckaroo-payment.settingsForm.titleSuccess"),message:t.paylinkMessage})):this.$store.dispatch("notification/createNotification",{variant:"error",title:t.$tc("buckaroo-payment.settingsForm.titleError"),message:t.$tc(a.message)}),t.isPaylinkAvailable=!0}).catch(a=>{this.$store.dispatch("notification/createNotification",{variant:"error",title:this.$tc("buckaroo-payment.settingsForm.titleError"),message:a.response.data.message}),t.isPaylinkAvailable=!0})},getConfigValue(e){return this.config[`BuckarooPayments.config.${e}`]},captureOrder(e){let t=this;t.isCapturePossible=!1,this.BuckarooPaymentService.captureOrder(e,this.transactionsToRefund,this.orderItems).then(a=>{a.status?this.$store.dispatch("notification/createNotification",{variant:"success",title:t.$tc("buckaroo-payment.settingsForm.titleSuccess"),message:a.message}):this.$store.dispatch("notification/createNotification",{variant:"error",title:t.$tc("buckaroo-payment.settingsForm.titleError"),message:a.message}),t.isCapturePossible=!0,this.createdComponent()}).catch(a=>{this.$store.dispatch("notification/createNotification",{variant:"error",title:this.$tc("buckaroo-payment.settingsForm.titleError"),message:t.$tc(a.response.data.message)}),t.isCapturePossible=!0})}}});const{Component:$}=Shopware;$.extend("buckaroo-payment-config","sw-extension-config",{});const I={"buckaroo-payment":{fee:"Buckaroo Betaaltoeslag",order:{refundDescription:"Refund voor bestelling #orderNumber"},general:{title:"Buckaroo",description:"Buckaroo Payment"},settingsForm:{save:"Opslaan",titleSuccess:"Succes",titleError:"Foutmelding"},supportModal:{menuButton:"Version & Support",title:"Versie & Support",support:{description:"Zorg ervoor dat u uw website key bij de hand heeft voordat u contact opneemt met Buckaroo technical support",label1:"Buckaroo Plaza:",label2:"Telefoonnummer:",label3:"E-mail:",label4:"Website:",your_version:"Uw PHP versie:",version:"Versie compatibiliteit",information:"Informatie"}},tabs:{title:"Buckaroo Payment",overview:"Overzicht"},paymentDetail:{yourLink:"Uw Paylink",paylinkButton:"Creëer Paylink",paylinkDescription:"Creëer Paylink voor order",paylinkTitle:"Paylink",refundTitle:"Terugbetaling",transactionsTitle:"Transacties",amountTitle:"Hoeveelheid",amountTotalTitle:"Algemeen totaal (grand total)",amountRefundTotalTitle:"Terugbetaling Algemeen totaal (grand total)",amountCustomRefundTitle:"Aangepast bedrag terugbetalen",buttonTitle:"Terugbetaling",successTitle:"Success",successMessage:"Buckaroo terugbetaling succesvol",errorTitle:"Foutmelding",payTitle:"Betaling vastleggen (Capture)",payDescription:"Factuur voor bestelling vastleggen (Capture) en aanmaken",payButton:"Betaling vastleggen (Capture)"},orderItems:{title:"Artikelen om terug te betalen",types:{id:"id",name:"Titel",quantity:"Aantal om terug te betalen",totalAmount:"Subtotaal"}},transactionsToRefund:{title:"Terugbetaling Totaal"},transactionHistory:{types:{id:"id",created_at:"Datum/tijd",total:"Totaal",shipping_costs:"Verzendkosten",total_excluding_vat:"Totaal exclusief BTW",total_including_vat:"Totaal inclusief BTW",vat:"BTW",transaction_key:"Transactie key",transaction_method:"Betaalmethode",statuscode:"Status"}},messageNotValid:"Dit veld is niet geldig.",messageNotBlank:"Dit veld mag niet leeg zijn.",button:{labelTestApi:"Test gegevens"},afterpay:{setup:"Belastingkoppeling instellen voor Riverty old ",hightTaxes:"Hoge BTW-heffingen",middleTaxes:"Middelmatige BTW-belastingen",lowTaxes:"Lage BTW-heffingen",zeroTaxes:"Nul VAT",noTaxes:"Geen BTW"},paymentInTestMode:"De betaling voor deze bestelling is in testmodus uitgevoerd",refund:{not_supported:"Terugbetaling wordt niet ondersteund",already_refunded:"Deze bestelling is al terugbetaald",refunded_amount:"Buckaroo terugbetaling succesvol"},test_api:{connection_ready:"Verbinding gereed",connection_failed:"Verbinding mislukt"},paylink:{invalid_amount:"Het bedrag is niet geldig",pay_link:"Uw Paylink:"},missing_order_id:"Ontbrekende bestelling orderId",missing_transaction:"Order transactie niet gevonden",general_request_error:"Helaas is er een fout opgetreden tijdens het verwerken van uw aanvraag. Probeer het opnieuw.",in3LogoLabel:"Betaalmethode Logo:","configure-payment":"Configure payment","configure-link":"Configure","payment-methods":"Payment methods"}},x={"buckaroo-payment":{fee:"Buckaroo Gebühr",order:{refundDescription:"Rückerstattung für Bestellung #orderNumber"},general:{title:"Buckaroo",description:"Buckaroo Zahlung"},settingsForm:{save:"Speichern",titleSuccess:"Erfolg",titleError:"Fehler"},supportModal:{menuButton:"Version & Unterstützung",title:"Version & Unterstützung",support:{description:"Bevor Sie den technischen Support von Buckaroo kontaktieren, bitte holen Sie Ihren (Händler-)Schlüssel und Geheimschlüssel ab.",label1:"Buckaroo Plaza:",label2:"Telefon:",label3:"E-Mail:",label4:"Webseite:",your_version:"Ihre PHP-Version:",version:"Versionskompatibilität",information:"Informationen"}},tabs:{title:"Buckaroo Payment",overview:"Übersicht"},paymentDetail:{yourLink:"Ihr Paylink",paylinkButton:"Paylink erstellen",paylinkDescription:"Paylink erstellen für Bestellung",paylinkTitle:"Paylink",refundTitle:"Rückerstattung",transactionsTitle:"Transaktionen",amountTitle:"Betrag",amountTotalTitle:"Gesamtsumme",amountRefundTotalTitle:"Gesamtsumme der Rückerstattung",amountCustomRefundTitle:"Rückerstattung individueller Betrag",buttonTitle:"Rückerstattung",successTitle:"Erfolg",successMessage:"Buckaroo-Erfolg, zurückerstattet",errorTitle:"Fehler",payTitle:"Zahlung erfassen (Capture)",payDescription:"Erfassen (Capture) und Rechnung für Bestellung erstellen",payButton:"Zahlung erfassen (Capture)"},orderItems:{title:"Artikel zur Rückerstattung",types:{id:"id",name:"Titel",quantity:"Menge zur Rückerstattung",totalAmount:"Teilsumme"}},transactionsToRefund:{title:"Rückerstattungssummen"},transactionHistory:{types:{id:"id",created_at:"Datum/Uhrzeit",total:"Gesamt",shipping_costs:"Versandkosten",total_excluding_vat:"Gesamt ohne MwSt. (VAT)",total_including_vat:"Gesamt inklusive MwSt. (VAT)",vat:"MwSt. (VAT)",transaction_key:"Transaktionsschlüssel",transaction_method:"Zahlungsmethode",statuscode:"Status"}},messageNotValid:"Dieses Feld ist nicht gültig.",messageNotBlank:"Dieses Feld darf nicht leer sein.",button:{labelTestApi:"Verbindung testen"},afterpay:{setup:"Steuerzuordnung für Riverty old einrichten ",hightTaxes:"Hohe MwSt. (VAT)",middleTaxes:"Mittlere MwSt. (VAT)",lowTaxes:"Niedrige MwSt. (VAT)",zeroTaxes:"Keine MwSt. (VAT)",noTaxes:"Keine Mehrwertsteuer"},paymentInTestMode:"Die Zahlung für diese Bestellung wurde im Testmodus durchgeführt",refund:{not_supported:"Rückerstattung wird nicht unterstützt",already_refunded:"Diese Bestellung wurde bereits zurückerstattet",refunded_amount:"Erfolgreich von Buckaroo erstattet"},test_api:{connection_ready:"Verbindung bereit",connection_failed:"Verbindung fehlgeschlagen"},paylink:{invalid_amount:"Betrag ist nicht gültig",pay_link:"Ihr Zahlungslink (Paylink):"},missing_order_id:"Fehlende Bestell-ID",missing_transaction:"Transaktion der Bestellung nicht gefunden",general_request_error:"Leider ist ein Fehler bei der Bearbeitung Ihrer Anfrage aufgetreten. Bitte versuchen Sie es erneut.",in3LogoLabel:"Zahlungslogo:","configure-payment":"Configure payment","configure-link":"Configure","payment-methods":"Payment methods"}},A={"buckaroo-payment":{fee:"Buckaroo Fee",order:{refundDescription:"Refund for order #orderNumber"},general:{title:"Buckaroo",description:"Buckaroo Payment"},settingsForm:{save:"Save",titleSuccess:"Success",titleError:"Error"},supportModal:{menuButton:"Version & Support",title:"Version & Support",support:{description:"Before contacting Buckaroo technical support, please retrieve your (Merchant) key, Secret key, certificate and certificate thumbprint.",label1:"Buckaroo Payment Plaza:",label2:"Phone:",label3:"E-mail:",label4:"Website:",your_version:"Your PHP version:",version:"Version compatibility",information:"Information"}},tabs:{title:"Buckaroo Payment",overview:"Overview"},paymentDetail:{yourLink:"Your Paylink",paylinkButton:"Create paylink",paylinkDescription:"Create paylink for order",paylinkTitle:"Paylink",refundTitle:"Refund",transactionsTitle:"Transactions",amountTitle:"Amount",amountTotalTitle:"Grand total",amountRefundTotalTitle:"Refund Grand total",amountCustomRefundTitle:"Refund custom amount",buttonTitle:"Refund",successTitle:"Success",successMessage:"Buckaroo success refunded ",errorTitle:"Error",payTitle:"Capture payment",payDescription:"Capture and create invoice for order",payButton:"Capture payment"},orderItems:{title:"Items to Refund",types:{id:"id",name:"Title",quantity:"Qty to Refund",totalAmount:"Subtotal"}},transactionsToRefund:{title:"Refund Totals"},transactionHistory:{types:{id:"id",created_at:"Date/time",total:"Total",shipping_costs:"Shipping costs",total_excluding_vat:"Total excluding VAT",total_including_vat:"Total including VAT",vat:"VAT",transaction_key:"Transaction key",transaction_method:"Payment method",statuscode:"Status"}},messageNotValid:"This field not valid.",messageNotBlank:"This field must not be empty.",button:{labelTestApi:"Test connection"},afterpay:{setup:"Setup tax association for Riverty old ",hightTaxes:"High VAT taxes",middleTaxes:"Middle VAT taxes",lowTaxes:"Low VAT taxes",zeroTaxes:"Zero VAT",noTaxes:"No VAT tax"},paymentInTestMode:"The payment for this order was made in test mode",refund:{not_supported:"Refund is not supported",already_refunded:"This order is already refunded",refunded_amount:"Buckaroo success refunded"},test_api:{connection_ready:"Connection ready",connection_failed:"Connection failed"},paylink:{invalid_amount:"Amount is not valid",pay_link:"Your Paylink:"},missing_order_id:"Missing order orderId",missing_transaction:"Order transaction not found",general_request_error:"Unfortunately an error occurred while processing your request. Please try again.",in3LogoLabel:"Payment Logo:","configure-payment":"Configure payment","configure-link":"Configure","payment-methods":"Payment methods"}},{Module:F}=Shopware;F.register("buckaroo-payment",{type:"plugin",name:"BuckarooPayment",title:"buckaroo-payment.general.title",description:"buckaroo-payment.general.description",version:"1.0.0",targetVersion:"1.0.0",color:"#000000",icon:"default-action-settings",snippets:{"nl-NL":I,"de-DE":x,"en-GB":A},routeMiddleware(e,t){t.name==="sw.order.detail"&&t.children.push({component:"buckaroo-payment-detail",name:"buckaroo.payment.detail",isChildren:!0,path:"/sw/order/buckaroo/detail/:id"}),e(t)},routes:{config:{component:"buckaroo-payment-config",path:":namespace/payment/:paymentCode",name:"buckaroo.config.payment",meta:{parentPath:"sw.extension.config"},props:{default(e){return{namespace:e.params.namespace}}}}}});const{ApiService:c}=Shopware.Classes;class R extends c{constructor(t,a,n="buckaroo"){super(t,a,n)}getBasicHeaders(){return this.loginService&&typeof this.loginService.getToken=="function"?super.getBasicHeaders():{"Content-Type":"application/json",Accept:"application/json"}}getBuckarooTransaction(t){const a=`_action/${this.getApiBasePath()}/getBuckarooTransaction`;return this.httpClient.post(a,{transaction:t},{headers:this.getBasicHeaders()}).then(n=>c.handleResponse(n))}refundPayment(t,a,n,o){const i=`_action/${this.getApiBasePath()}/refund`;return this.httpClient.post(i,{transaction:t,transactionsToRefund:a,orderItems:n,customRefundAmount:o},{headers:this.getBasicHeaders()}).then(l=>c.handleResponse(l))}captureOrder(t){const a=`_action/${this.getApiBasePath()}/capture`;return this.httpClient.post(a,{transaction:t},{headers:this.getBasicHeaders()}).then(n=>c.handleResponse(n))}createPaylink(t){const a=`_action/${this.getApiBasePath()}/paylink`;return this.httpClient.post(a,{transaction:t},{headers:this.getBasicHeaders()}).then(n=>c.handleResponse(n))}}Shopware.Service().register("BuckarooPaymentService",()=>{const e=Shopware.Application.getContainer("init");return new R(e.httpClient,e.loginService||null)});const{ApiService:u}=Shopware.Classes;class E extends u{constructor(t,a,n="buckaroo"){super(t,a,n)}getBasicHeaders(){return this.loginService&&typeof this.loginService.getToken=="function"?super.getBasicHeaders():{"Content-Type":"application/json",Accept:"application/json"}}getSupportVersion(){const t=`_action/${this.getApiBasePath()}/version`;return this.httpClient.post(t,{},{headers:this.getBasicHeaders()}).then(a=>u.handleResponse(a))}getTaxes(){const t=`_action/${this.getApiBasePath()}/taxes`;return this.httpClient.post(t,{},{headers:this.getBasicHeaders()}).then(a=>u.handleResponse(a))}getIn3Icons(){const t=`_action/${this.getApiBasePath()}/in3/logos`;return this.httpClient.post(t,{},{headers:this.getBasicHeaders()}).then(a=>u.handleResponse(a))}getApiTest(t,a,n){const o=`_action/${this.getApiBasePath()}/getBuckarooApiTest`;return this.makeAuthenticatedRequest(o,{websiteKeyId:t,secretKeyId:a,saleChannelId:n})}makeAuthenticatedRequest(t,a,n=0){return this.httpClient.post(t,a,{headers:this.getBasicHeaders()}).then(o=>u.handleResponse(o)).catch(o=>{if(o.response&&o.response.status===401&&n===0&&this.loginService&&typeof this.loginService.refreshToken=="function")return this.loginService.refreshToken().then(()=>this.makeAuthenticatedRequest(t,a,n+1)).catch(()=>{throw o});throw o})}}Shopware.Service().register("BuckarooPaymentSettingsService",()=>{const e=Shopware.Application.getContainer("init");return new E(e.httpClient,e.loginService||null)});const D=`<div> <a style="margin-bottom:10px;" @click="showTaxes = !showTaxes">{{$tc('buckaroo-payment.afterpay.setup')}}</a> <div v-if="showTaxes" style="padding: 10px;background: rgb(246 246 246); margin-bottom:10px;"> <div class="tax" v-for="tax in taxes"> <sw-select-field :label="tax.name" label-property="name" value-property="id" :options="afterpayTaxes" @change="(value) => setTaxAssociation(tax.id, value)" @input="(value) => setTaxAssociation(tax.id, value)" @update:value="(value) => setTaxAssociation(tax.id, value)" :value="getSelectValue(tax.id)" ></sw-select-field> </div> </div> </div>`,{Component:V}=Shopware;V.register("buckaroo-afterpay-old-tax",{template:D,inject:["BuckarooPaymentSettingsService"],data(){return{taxes:[],showTaxes:!1,afterpayTaxes:[{name:this.$tc("buckaroo-payment.afterpay.hightTaxes"),id:1},{name:this.$tc("buckaroo-payment.afterpay.middleTaxes"),id:5},{name:this.$tc("buckaroo-payment.afterpay.lowTaxes"),id:2},{name:this.$tc("buckaroo-payment.afterpay.zeroTaxes"),id:3},{name:this.$tc("buckaroo-payment.afterpay.noTaxes"),id:4}],taxAssociation:{}}},model:{prop:"value",event:"change"},computed:{},props:{name:{type:String,required:!0,default:""},value:{type:Object,required:!1,default(){return{}}}},created(){this.BuckarooPaymentSettingsService.getTaxes().then(e=>{this.taxes=e.taxes.map(t=>({id:t.id,name:t.name}))})},methods:{setTaxAssociation(e,t){try{let a=t;t&&typeof t=="object"&&(t.target?a=t.target.value:t.hasOwnProperty("value")?a=t.value:t.hasOwnProperty("id")&&(a=t.id)),this.taxAssociation[e]=a,this.$emit("change",{...this.value,...this.taxAssociation})}catch(a){console.error("Error in setTaxAssociation:",a)}},getSelectValue(e){if(this.value[e])return this.value[e]}}});const M=`<div> <buckaroo-config-card :card="mainCard" :methods="elementMethods" :isNotDefaultSalesChannel="isNotDefaultSalesChannel" :value="value" :currentSalesChannelId="currentSalesChannelId" @input="onInput" v-if="mainCard && value"> </buckaroo-config-card> <buckaroo-payment-list v-if="selectedCard === 'general'" :configSettings="configSettings" :currentSalesChannelId="currentSalesChannelId" :value="value" @input="onInput"> </buckaroo-payment-list> </div>`,{Component:N}=Shopware;N.register("buckaroo-main-config",{template:M,props:{configSettings:{type:Array,required:!1,default:()=>[]},value:{type:Object,required:!1,default:()=>({})},elementMethods:{type:Object,required:!1,default:()=>({})},isNotDefaultSalesChannel:{type:Boolean,required:!1,default:!1},currentSalesChannelId:{type:String,required:!1,default:null}},emits:["input"],model:{prop:"value",event:"input"},data(){var e;return{selectedCard:((e=this.$route.params)==null?void 0:e.paymentCode)||"general"}},watch:{value:{handler(e,t){this.$nextTick(()=>{this.$forceUpdate()})},deep:!0,immediate:!0},$route(e){var t;(t=e.params)!=null&&t.paymentCode&&(this.selectedCard=e.params.paymentCode)}},computed:{mainCard(){var t;return(t=this.configSettings.filter(a=>a.name===this.selectedCard))==null?void 0:t.pop()}},methods:{onInput(e){this.$emit("input",e)}}});const L=`{% block buckaroo_config_card %} <sw-card position-identifier="xxsw-system-config-content" v-if="card"> <template #title> {{ getInlineSnippet(card.title) || 'Configuration' }} </template> <div v-for="element in (card.elements || [])" :key="element.name"> <div v-if="canShow(element)"> <slot name="card-element" v-bind="{ element: getElementBind(element), config: value, card }"> <sw-inherit-wrapper :value="getValueForName(element.name.replace('BuckarooPayments.config.', ''))" v-bind="getInheritWrapperBind(element)" :has-parent="isNotDefaultSalesChannel" :inherited-value="getInheritedValue(element)" :class="'sw-system-config--field-' + kebabCase(getElementBind(element).name)" @input="onFieldInput(element.name, $event)" > <template #content="props"> <sw-form-field-renderer v-bind="getElementBind(element, props)" :key="props.isInheritField + props.isInherited" :disabled="props.isInherited" :value="props.currentValue" :error="getFieldError(element.name)" @input="(value) => { props.updateCurrentValue(value); onFieldInput(element.name, value); }" @change="(value) => { props.updateCurrentValue(value); onFieldInput(element.name, value); }" @update:value="(value) => { props.updateCurrentValue(value); onFieldInput(element.name, value); }" /> </template> </sw-inherit-wrapper> </slot> </div> </div> <buckaroo-test-credentials v-if="canShowCredentialTester" :config="value" :currentSalesChannelId="currentSalesChannelId" /> </sw-card> {% endblock %}`,{Component:q}=Shopware;q.register("buckaroo-config-card",{template:L,mounted(){this.$nextTick(()=>{this.$forceUpdate()})},watch:{value:{handler(){this.$nextTick(()=>{this.$forceUpdate()})},deep:!0,immediate:!0},currentSalesChannelId:{handler(e,t){e!==t&&this.$nextTick(()=>{this.$forceUpdate()})},immediate:!1}},computed:{canShowCredentialTester(){var l;const e=this.getValueForName("websiteKey"),t=this.getValueForName("secretKey");if(!(((l=this.card)==null?void 0:l.name)==="general"))return!1;const n=e!=null&&e!=="",o=t!=null&&t!=="";return n||o},hasValidConfigData(){return this.value&&typeof this.value=="object"&&Object.keys(this.value).length>0},reactiveValue(){return this.value}},emits:["input"],model:{prop:"value",event:"input"},props:{card:{type:Object,required:!1,default:()=>({elements:[]})},methods:{type:Object,required:!0},isNotDefaultSalesChannel:{type:Boolean,required:!0},currentSalesChannelId:{type:String,required:!0},value:{type:Object,required:!1,default:()=>({})}},methods:{getElementBind(e,t={}){if(!this.methods||!this.methods.getElementBind)return{name:e.name,type:e.type||"text",config:e.config||{},value:this.getValueForName(e.name.replace("BuckarooPayments.config.",""))};const a=this.methods.getElementBind(e,t),n=e.name.replace("BuckarooPayments.config.",""),o=this.getValueForName(n);return a.value=o,a},getInheritWrapperBind(e){if(!this.methods||!this.methods.getInheritWrapperBind){const o=e.name.replace("BuckarooPayments.config.","");return{name:e.name,currentValue:this.getValueForName(o)}}const t=this.methods.getInheritWrapperBind(e),a=e.name.replace("BuckarooPayments.config.",""),n=this.getValueForName(a);return t.currentValue=n,t},getFieldError(e){return!this.methods||!this.methods.getFieldError?null:this.methods.getFieldError(e)},kebabCase(e){return!this.methods||!this.methods.kebabCase?e?e.toLowerCase().replace(/[A-Z]/g,"-$&").replace(/^-/,""):"":this.methods.kebabCase(e)},getInlineSnippet(e){var t;try{if(typeof e=="object"&&e!==null){const a=((t=this.$i18n)==null?void 0:t.locale)||"en-GB";if(e[a])return e[a];if(e["en-GB"])return e["en-GB"];const n=Object.keys(e)[0];return n&&e[n]?e[n]:JSON.stringify(e)}return typeof e=="string"?this.$t&&typeof this.$t=="function"?this.$t(e):e:String(e)}catch(a){return console.warn("Translation error for:",e,a),typeof e=="object"?JSON.stringify(e):String(e)}},getInheritedValue(e){return!this.methods||!this.methods.getInheritedValue?null:this.methods.getInheritedValue(e)},getValueForName(e){const t=this.reactiveValue;if(!t||typeof t!="object")return null;let a;const n=[`BuckarooPayments.config.${e}`,e.toLowerCase(),e.charAt(0).toLowerCase()+e.slice(1),e.charAt(0).toUpperCase()+e.slice(1)];for(const o of n)if(t[o]!==void 0){a=t[o];break}if(a===void 0&&t["BuckarooPayments.config"]&&typeof t["BuckarooPayments.config"]=="object"){for(const o of n)if(t["BuckarooPayments.config"][o]!==void 0){a=t["BuckarooPayments.config"][o];break}}return a&&typeof a=="object"&&a.hasOwnProperty("_value")&&(a=a._value),a},canShow(e){if(!e||!e.name)return!1;const t=e.name.replace("BuckarooPayments.config.","");return["orderStatus","paymentSuccesStatus","automaticallyCloseOpenOrders","sendInvoiceEmail"].includes(t)?!!this.getValueForName("advancedConfiguration"):t==="idealprocessingRenderMode"?!!this.getValueForName("idealprocessingShowissuers"):t==="idealRenderMode"?!!this.getValueForName("idealShowissuers"):["idealFastCheckoutEnabled","idealFastCheckoutVisibility","idealFastCheckoutLogoScheme"].includes(t)?!!this.getValueForName("idealFastCheckout"):t==="afterpayPaymentstatus"?!!this.getValueForName("afterpayCaptureonshippent"):t==="afterpayOldtax"?!!this.getValueForName("afterpayEnabledold"):!0},onInput(e){this.$emit("input",e)},onFieldInput(e,t){try{let a=t;if(t&&typeof t=="object")if(t.target){const i=t.target;i.type==="checkbox"||i.type==="radio"?a=i.checked:(i.tagName==="SELECT"||i.type==="select-one"||i.type==="select-multiple")&&i.multiple?a=Array.from(i.selectedOptions).map(l=>l.value):a=i.value}else if(t.hasOwnProperty("value"))a=t.value;else if(t.hasOwnProperty("id")&&t.hasOwnProperty("name"))a=t.id;else if(Array.isArray(t)){const i=t.filter(s=>typeof s=="string"&&s.length===1).length,l=t.some(s=>s===","),U=t.some(s=>typeof s=="string"&&s.length>1);if(i>10&&l){const s=t.filter(r=>typeof r=="string"&&r.length>1),d=t.filter(r=>typeof r=="string"&&r.length===1).join("");let p=[];d.includes(",")?p=d.split(",").map(r=>r.trim()).filter(r=>r.length>0):d.length>0&&(p=[d]),a=[...p,...s].filter(r=>r&&r.length>0)}else a=t.filter(s=>!(s==null||s===""||typeof s=="string"&&s.length===1||typeof s=="string"&&(s.startsWith("+")||/^\d+$/.test(s)))).map(s=>typeof s=="object"&&s!==null&&(s.id||s.value||s.code||s.key)||s)}else{const i=["id","value","key","code"];for(const l of i)if(t[l]!==void 0){a=t[l];break}}else(typeof t=="boolean"||typeof t=="string"||typeof t=="number")&&(a=t);a==="on"?a=!0:(a==="off"||a==="")&&(a=!1);const n=e.replace("BuckarooPayments.config.",""),o={...this.value};o[n]=a,o[e]=a,this.$emit("input",o)}catch(a){console.error("Error in onFieldInput:",a),console.error("Error details:",a.stack)}}}});const j=`<sw-card position-identifier="bk-config-payment-list" :title="$tc('buckaroo-payment.payment-methods')" > <div class="bk-payment-wrap"> <template v-for="payment in payments" > <div class="bk-payment"> <div class="bk-payment-inner"> <router-link :title="$tc('buckaroo-payment.configure-payment')" :to="{name: 'buckaroo.payment.config', params: {namespace: 'BuckarooPayments', paymentCode: payment.code } }"> <div class="bk-payment-img"> <img :src="assetFilter(\`buckaroopayments/static/\${payment.logo}\`)" alt="Payment logo"> </div> <div class="bk-payment-name"> {{ getPaymentTitle(payment.code) }} </div> </router-link> <buckaroo-toggle-status :currentSalesChannelId="currentSalesChannelId" :method="payment.code" :value="value" @input="$emit('input', $event)" /> <router-link class="bk-link" :title="$tc('buckaroo-payment.configure-payment')" :to="{name: 'buckaroo.payment.config', params: {namespace: 'BuckarooPayments', paymentCode: payment.code } }"> {{$tc('buckaroo-payment.configure-link')}} </router-link> </div> </div> </template> </div> </sw-card>`,{Component:z,Filter:H}=Shopware;z.register("buckaroo-payment-list",{template:j,props:{configSettings:{type:Array,required:!1,default:()=>[]},value:{type:Object,required:!1,default:()=>({})},currentSalesChannelId:{type:String,required:!0}},emits:["input"],data(){return{payments:[{code:"Alipay",logo:"alipay.svg"},{code:"applepay",logo:"applepay.svg"},{code:"bancontactmrcash",logo:"bancontact.svg"},{code:"blik",logo:"blik.svg"},{code:"belfius",logo:"belfius.svg"},{code:"Billink",logo:"billink.svg"},{code:"creditcard",logo:"creditcards.svg"},{code:"creditcards",logo:"creditcards.svg"},{code:"eps",logo:"eps.svg"},{code:"giftcards",logo:"giftcards.svg"},{code:"idealqr",logo:"ideal-qr.svg"},{code:"ideal",logo:"ideal.svg"},{code:"capayable",logo:"ideal-in3.svg"},{code:"KBCPaymentButton",logo:"kbc.svg"},{code:"klarnakp",logo:"klarna.svg"},{code:"knaken",logo:"gosettle.svg"},{code:"mbway",logo:"mbway.svg"},{code:"multibanco",logo:"multibanco.svg"},{code:"paybybank",logo:"paybybank.svg"},{code:"payconiq",logo:"payconiq.svg"},{code:"paypal",logo:"paypal.svg"},{code:"payperemail",logo:"payperemail.svg"},{code:"Przelewy24",logo:"przelewy24.svg"},{code:"afterpay",logo:"afterpay.svg"},{code:"sepadirectdebit",logo:"sepa-directdebit.svg"},{code:"transfer",logo:"sepa-credittransfer.svg"},{code:"Trustly",logo:"trustly.svg"},{code:"WeChatPay",logo:"wechatpay.svg"}]}},methods:{getPaymentTitle(e){var a;if(this.configSettings&&Array.isArray(this.configSettings)){const n=this.configSettings.find(o=>o.name===e);if(n&&n.title)try{if(typeof n.title=="object"&&n.title!==null){const o=((a=this.$i18n)==null?void 0:a.locale)||"en-GB";if(n.title[o])return n.title[o];if(n.title["en-GB"])return n.title["en-GB"];const i=Object.keys(n.title)[0];return i&&n.title[i]?n.title[i]:JSON.stringify(n.title)}return typeof n.title=="string"?this.$t&&typeof this.$t=="function"?this.$t(n.title):n.title:String(n.title)}catch(o){return console.warn("Translation error for:",n.title,o),typeof n.title=="object"?JSON.stringify(n.title):String(n.title)}}const t=this.payments.find(n=>n.code===e);return t?t.code:"Unknown Payment"},assetFilter(e){return H.getByName("asset")(e)}}});const K=`<sw-button @click="sendTestApi" :disabled="!enabled" variant="primary" :square="false" :block="true" :isLoading="isLoading">{{ $tc('buckaroo-payment.button.labelTestApi') }}</sw-button>`,{Component:O}=Shopware;O.register("buckaroo-test-credentials",{template:K,data(){return{isLoading:!1}},inject:["BuckarooPaymentSettingsService"],props:{config:{type:Object,required:!0},currentSalesChannelId:{required:!0}},computed:{enabled:function(){return(this.getConfigValue("websiteKey")||"").length>0&&(this.getConfigValue("secretKey")||"").length>0}},methods:{getConfigValue:function(e){return this.config["BuckarooPayments.config."+e]},sendTestApi(){this.isLoading=!0;let e=this.getConfigValue("websiteKey"),t=this.getConfigValue("secretKey");this.BuckarooPaymentSettingsService.getApiTest(e,t,this.currentSalesChannelId).then(a=>{this.isLoading=!1,a.status=="success"?this.$store.dispatch("notification/createNotification",{variant:"success",title:this.$tc("buckaroo-payment.settingsForm.titleSuccess"),message:this.$tc(a.message)}):this.$store.dispatch("notification/createNotification",{variant:"error",title:this.$tc("buckaroo-payment.settingsForm.titleError"),message:this.$tc(a.message)})}).catch(()=>{this.isLoading=!1})}}});const G=`<div class="bk-toogle-wrap"> <button type="button" :disabled="isLoading" :class="\`live \${getClass('live')}\`" @click="setStatus('live')" > Live </button> <button v-if="method !== 'idealqr'" type="button" :disabled="isLoading" :class="\`test \${getClass('test')}\`" @click="setStatus('test')" > Test </button> <button type="button" :disabled="isLoading" :class="\`disabled \${getClass('disabled')}\`" @click="setStatus('disabled')" > Off </button> </div>`,{Component:W}=Shopware;W.register("buckaroo-toggle-status",{template:G,props:{method:{type:String,required:!0},value:{required:!0},currentSalesChannelId:{required:!0}},emits:["input"],inject:["systemConfigApiService"],data(){return{status:"disabled",isLoading:!1}},mounted(){this.status=this.getStatus()},watch:{value:{handler(e){this.status=this.getStatus()},deep:!0,immediate:!0}},methods:{getStatus(){const e=this.isActive(),t=this.getEnvironment();return e?t:"disabled"},isActive(){const e=this.getValueForName(`${this.method}Enabled`);return typeof e=="string"?e.toLowerCase()==="true":!!e},getEnvironment(){const e=this.getValueForName(`${this.method}Environment`);return e==null||e===""?"test":["test","live"].includes(e)?e:"test"},getValueForName(e){const t=`BuckarooPayments.config.${e}`;if(!this.value||typeof this.value!="object")return null;let a;if(this.value[t]!==void 0)a=this.value[t];else if(this.value[e]!==void 0)a=this.value[e];else if(this.value["BuckarooPayments.config"]&&typeof this.value["BuckarooPayments.config"]=="object")this.value["BuckarooPayments.config"][e]!==void 0&&(a=this.value["BuckarooPayments.config"][e]);else{const n=[e,e.toLowerCase(),e.charAt(0).toLowerCase()+e.slice(1),e.charAt(0).toUpperCase()+e.slice(1)];for(const o of n){const i=`BuckarooPayments.config.${o}`;if(this.value[i]!==void 0){a=this.value[i];break}if(this.value[o]!==void 0){a=this.value[o];break}}}return a&&typeof a=="object"&&a.hasOwnProperty("_value")&&(a=a._value),a},setStatus(e){this.status=e,this.saveStatus()},getClass(e){return this.status===e?"active":""},async saveStatus(){const e=`BuckarooPayments.config.${this.method}Enabled`,t=`BuckarooPayments.config.${this.method}Environment`;let a={[e]:!1};const n={...this.value};n[e]=!1,["live","test"].indexOf(this.status)!==-1&&(a={[e]:!0,[t]:this.status},n[e]=!0,n[t]=this.status),this.$emit("input",n),this.isLoading=!0;try{await this.systemConfigApiService.batchSave({[this.currentSalesChannelId]:a}).finally(()=>{this.isLoading=!1}),this.renderSuccess()}catch(o){this.renderError(o)}},renderSuccess(){this.$store.dispatch("notification/createNotification",{variant:"success",message:this.$tc("sw-extension-store.component.sw-extension-config.messageSaveSuccess")})},renderError(e){this.$store.dispatch("notification/createNotification",{variant:"error",message:e})}}});
//# sourceMappingURL=buckaroo-payments-48brhFQ0.js.map

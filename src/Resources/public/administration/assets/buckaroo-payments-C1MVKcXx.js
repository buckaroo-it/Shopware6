const g=`{% block sw_order_detail_content_tabs %} <div v-if="isPaymentInTestMode && setIsBuckarooPayment" style="max-width: 960px; margin: 0 auto 15px; background: rgb(251, 227, 231); border-radius:4px; color: #de294c; display:flex; align-items:center;"> <div style="background:#de294c;padding: 4px 8px;border-radius: 4px 0 0 4px;"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="24" height="24" viewBox="0 0 24 24"><defs><path d="m13.7744 1.4124 9.7058 18.6649c.5096.98.1283 2.1875-.8517 2.6971a2 2 0 0 1-.9227.2256H2.2942c-1.1045 0-2-.8954-2-2a2 2 0 0 1 .2256-.9227l9.7058-18.665c.5096-.98 1.7171-1.3613 2.6971-.8517a2 2 0 0 1 .8517.8518zM2.2942 21h19.4116L12 2.335 2.2942 21zM12 17c.5523 0 1 .4477 1 1s-.4477 1-1 1-1-.4477-1-1 .4477-1 1-1zm1-2c0 .5523-.4477 1-1 1s-1-.4477-1-1v-5c0-.5523.4477-1 1-1s1 .4477 1 1v5z" id="icons-default-warning"></path></defs><use xlink:href="#icons-default-warning" fill="#fff" fill-rule="evenodd"></use></svg></div> <p style="margin-left:10px;">{{ $tc('buckaroo-payment.paymentInTestMode') }}</p> </div> {% parent %} {% endblock %} {% block sw_order_detail_content_tabs_general %} {% parent %} <sw-tabs-item v-if="setIsBuckarooPayment" :route="{ name: 'buckaroo.payment.detail', params: { id: $route.params.id } }" :title="$tc('buckaroo-payment.tabs.title')"> {{ $tc('buckaroo-payment.tabs.title') }} </sw-tabs-item> {% endblock %} {% block sw_order_detail_actions %} <template v-if="isEditable"> </template> {% parent %} {% endblock %}`,{Component:h,Context:l}=Shopware,y=Shopware.Data.Criteria;h.override("sw-order-detail",{template:g,data(){return{isBuckarooPayment:!1,isPaymentInTestMode:!1}},computed:{isEditable(){return!this.isBuckarooPayment||this.$route.name!=="buckaroo.payment.detail"},showTabs(){return!0}},watch:{orderId:{deep:!0,handler(){if(!this.orderId){this.setIsBuckarooPayment(null);return}const e=this.repositoryFactory.create("order"),t=new y(1,1);t.addAssociation("transactions"),e.get(this.orderId,l.api,t).then(a=>{if(this.setPaymentInTestMode(a),a.transactions.length<=0||!a.transactions.last().paymentMethodId){this.setIsBuckarooPayment(null);return}const n=a.transactions.last().paymentMethodId;n!=null&&this.setIsBuckarooPayment(n)})},immediate:!0}},methods:{setPaymentInTestMode(e){e.customFields&&e.customFields.buckaroo_payment_in_test_mode&&(this.isPaymentInTestMode=e.customFields.buckaroo_payment_in_test_mode===!0)},setIsBuckarooPayment(e){if(!e)return;this.repositoryFactory.create("payment_method").get(e,l.api).then(a=>{this.isBuckarooPayment=a.formattedHandlerIdentifier.indexOf("buckaroo")>=0})}}});const f=`{% block sw_order_detail_base_line_items_summary %} <sw-card-section divider="top" secondary slim v-if="order.customFields !== null"> <sw-container columns="1fr 440px" class="sw-order-detail__summary" v-if="order.customFields.buckarooFee !== null && order.customFields.buckarooFee > 0"> <sw-description-list grid="265px 1fr" class="sw-order-detail__summary-data"> <dt>{{ $tc('buckaroo-payment.fee') }}</dt> <dd>{{ order.customFields.buckarooFee }} {% if order.currency.isoCode == "PLN" %} PLN {% else %} {{ order.currency.symbol }} {% endif %} </dd> </sw-description-list> </sw-container> </sw-card-section> {% parent %} {% endblock %}`,{Component:k,Context:Z}=Shopware;Shopware.Data.Criteria;k.override("sw-order-detail-base",{template:f});const b=`{% block sw_order_detail_base_secondary_info_payment %} <template v-if="currentOrder.transactions.length > 0 && (!currentOrder.transactions.last().paymentMethod.translated.customFields || !currentOrder.transactions.last().paymentMethod.translated.customFields.is_buckaroo)"> {% parent %} </template> <template v-if="currentOrder.transactions.length > 0 && currentOrder.transactions.last().paymentMethod.translated.customFields && currentOrder.transactions.last().paymentMethod.translated.customFields.is_buckaroo"> <dt>{{ $tc('sw-order.detailBase.labelPaymentMethod') }}</dt> <dd> <template v-if="config['BuckarooPayments.config.' + currentOrder.transactions.last().paymentMethod.translated.customFields.buckaroo_key + 'Label']"> {{ config['BuckarooPayments.config.' + currentOrder.transactions.last().paymentMethod.translated.customFields.buckaroo_key + 'Label'] }} </template> </dd> </template> {% endblock %}`,{Component:v}=Shopware;v.override("sw-order-user-card",{template:b,inject:["systemConfigApiService"],data(){return{config:{}}},created(){this.systemConfigApiService.getValues("BuckarooPayments.config",null).then(e=>{this.config=e}).finally(()=>{})}});const _=`{% block sw_system_config_content_card %} <template v-if="domain !== 'BuckarooPayments.config'"> {% parent() %} </template> <template v-else> <buckaroo-main-config v-model="actualConfigData[currentSalesChannelId]" :configSettings="config" :isNotDefaultSalesChannel="isNotDefaultSalesChannel" :currentSalesChannelId="currentSalesChannelId" :elementMethods="{getElementBind, getFieldError, getInheritWrapperBind, getInheritedValue, hasMapInheritanceSupport, getInlineSnippet, kebabCase}" v-if="!isLoading" ></buckaroo-main-config> </template> {% endblock %}`,{Component:w}=Shopware;w.override("sw-system-config",{template:_,data(){return{actualConfigData:{},isLoading:!0}},created(){this.domain==="BuckarooPayments.config"&&this.loadBuckarooConfig()},methods:{loadBuckarooConfig(){this.isLoading=!0,this.systemConfigApiService.getValues("BuckarooPayments.config",this.currentSalesChannelId).then(e=>{this.actualConfigData[this.currentSalesChannelId]=e}).finally(()=>{this.isLoading=!1})},saveAll(){return this.domain!=="BuckarooPayments.config"?this.$super("saveAll"):this.saveBuckaroo()},saveBuckaroo(){return this.isLoading=!0,this.systemConfigApiService.batchSave(this.getSelectedValues()).finally(()=>{this.isLoading=!1})},getCurrentConfigCard(){var t,a;const e=((t=this.$route.params)==null?void 0:t.paymentCode)||"general";return(a=this.config.filter(n=>n.name===e))==null?void 0:a.pop()},getSelectedValues(){const e=this.actualConfigData[this.currentSalesChannelId],t=this.getCurrentConfigCard();if(t!=null&&t.elements){let a={};return t==null||t.elements.forEach(n=>{n!=null&&n.name&&(a[n.name]=e[n.name])}),{[this.currentSalesChannelId]:a}}return this.actualConfigData}}});const C=`{% block buckaroo_payment_detail %} <div class="buckaroo-payment-detail"> <sw-card positionIdentifier="bk-paylink" :title="$tc('buckaroo-payment.paymentDetail.paylinkTitle')" v-if="isPaylinkVisible"> {{ $tc('buckaroo-payment.paymentDetail.paylinkDescription') }} <span v-if="paylink"> <br> {{ $tc('buckaroo-payment.paymentDetail.yourLink') }}: <a :href="paylink">{{ paylink }}</a> </span> <sw-container columns="1fr 440px" class="sw-order-detail__summary"> <sw-description-list grid="265px 1fr" class="sw-order-detail__summary-data"><dt></dt> <dd> <sw-button @click="createPaylink(orderId)" :disabled="!isPaylinkAvailable"> {{ $tc('buckaroo-payment.paymentDetail.paylinkButton') }} </sw-button></dd> </sw-description-list> </sw-container> </sw-card> <sw-card positionIdentifier="bk-refund" :title="$tc('buckaroo-payment.paymentDetail.refundTitle')"> {{ $tc('buckaroo-payment.orderItems.title') }} <sw-data-grid :dataSource="orderItems" :columns="orderItemsColumns" :showActions="false" :showSelection="false"> <template #column-name="{ item }"> <sw-product-variant-info :showTooltip="false" :variations="item.variations"> {{ item.name }} </sw-product-variant-info> </template> <template #column-quantity="{ item }"> <input class="bk-reund-qty" type="number" min="0" :max="item.quantityMax" v-model="item.quantity" @input="recalculateOrderItems" onkeydown="return event.keyCode !== 69"> </template> </sw-data-grid> <sw-container columns="1fr 440px" class="sw-order-detail__summary"> <sw-description-list grid="265px 1fr" class="sw-order-detail__summary-data"> <dt>{{ $tc('buckaroo-payment.paymentDetail.amountTotalTitle') }}: </dt> <dd>{{ buckaroo_refund_amount }} {{ currency }}</dd> </sw-description-list> </sw-container> <sw-card-section divider="top" secondary slim> <sw-container columns="1fr 440px" class="sw-order-detail__summary"> </sw-container> <sw-data-grid :dataSource="transactionsToRefund" :columns="transactionsToRefundColumns" :showHeader="false" :showActions="false" :showSelection="false"> <template #column-transaction_method="{ item }"> <span v-if="item.transaction_method == 'KbcPaymentButton'"> Kbc </span> <span v-else> {{ item.transaction_method }} </span> </template> <template #column-amount="{ item }"> <input type="number" min="0" :max="item.amountMax" v-model="item.amount" @input="recalculateRefundItems" onkeydown="return event.keyCode !== 69"> </template> </sw-data-grid> <sw-container v-if="!isAuthorized" columns="1fr 440px" class="sw-order-detail__summary"> <sw-description-list grid="265px 1fr" class="sw-order-detail__summary-data"> <dt>{{ $tc('buckaroo-payment.paymentDetail.amountCustomRefundTitle') }}: </dt> <dd> <input id="buckaroo_custom_refund_enabled" type="checkbox" @click="toggleCustomRefund()"> <input id="buckaroo_custom_refund_amount" type="number" v-model="buckaroo_refund_total_amount" disabled style="width:70px;"> {{ currency }} </dd> </sw-description-list> <sw-description-list grid="265px 1fr" class="sw-order-detail__summary-data"> <dt>{{ $tc('buckaroo-payment.paymentDetail.amountRefundTotalTitle') }}: </dt> <dd>{{ buckaroo_refund_total_amount }} {{ currency }}</dd> </sw-description-list> </sw-container> </sw-card-section> <sw-container columns="1fr 440px" class="sw-order-detail__summary"> <sw-description-list grid="265px 1fr" class="sw-order-detail__summary-data"><dt></dt><dd> <sw-button @click="refundOrder(orderId, buckaroo_refund_amount)" :disabled="!isRefundPossible || isAuthorized"> {{ $tc('buckaroo-payment.paymentDetail.buttonTitle') }} </sw-button></dd> </sw-description-list> </sw-container> </sw-card> <sw-card positionIdentifier="bk-pay-desc" :title="$tc('buckaroo-payment.paymentDetail.payTitle')"> {{ $tc('buckaroo-payment.paymentDetail.payDescription') }} <sw-container columns="1fr 440px" class="sw-order-detail__summary"> <sw-description-list grid="265px 1fr" class="sw-order-detail__summary-data"><dt></dt><dd> <sw-button @click="captureOrder(orderId)" :disabled="!isCapturePossible"> {{ $tc('buckaroo-payment.paymentDetail.payButton') }} </sw-button></dd> </sw-description-list> </sw-container> </sw-card> <sw-card positionIdentifier="bk-pay-transaction" :title="$tc('buckaroo-payment.paymentDetail.transactionsTitle')"> <sw-data-grid :dataSource="relatedResources" :columns="relatedResourceColumns" :showActions="false" :showSelection="false"> <template #column-transaction_method="{ item }"> <span v-if="item.transaction_method == 'KbcPaymentButton'"> Kbc </span> <span v-else> {{ item.transaction_method }} </span> </template> </sw-data-grid> </sw-card> <sw-loader v-if="isLoading"> </sw-loader> </div> {% endblock %}`,{Component:S,Mixin:T,Filter:Y,Context:B}=Shopware,c=Shopware.Data.Criteria;S.register("buckaroo-payment-detail",{template:C,inject:["repositoryFactory","BuckarooPaymentService","systemConfigApiService"],mixins:[T.getByName("notification")],data(){return{config:{},buckaroo_refund_amount:"0",buckaroo_refund_total_amount:"0",currency:"EUR",isRefundPossible:!0,isCapturePossible:!1,isPaylinkAvailable:!1,isPaylinkVisible:!1,paylinkMessage:"",paylink:"",isLoading:!1,order:!1,buckarooTransactions:null,orderItems:[],transactionsToRefund:[],relatedResources:[],isAuthorized:!1}},computed:{orderItemsColumns(){return[{property:"name",label:this.$tc("buckaroo-payment.orderItems.types.name"),allowResize:!1,primary:!0,inlineEdit:!0,multiLine:!0},{property:"quantity",label:this.$tc("buckaroo-payment.orderItems.types.quantity"),rawData:!0,align:"right"},{property:"totalAmount",label:this.$tc("buckaroo-payment.orderItems.types.totalAmount"),rawData:!0,align:"right"}]},transactionsToRefundColumns(){return[{property:"transaction_method",rawData:!0},{property:"amount",rawData:!0}]},relatedResourceColumns(){return[{property:"created_at",label:this.$tc("buckaroo-payment.transactionHistory.types.created_at"),rawData:!0},{property:"total",label:this.$tc("buckaroo-payment.transactionHistory.types.total"),rawData:!0},{property:"shipping_costs",label:this.$tc("buckaroo-payment.transactionHistory.types.shipping_costs"),rawData:!0},{property:"total_excluding_vat",label:this.$tc("buckaroo-payment.transactionHistory.types.total_excluding_vat"),rawData:!0},{property:"vat",label:this.$tc("buckaroo-payment.transactionHistory.types.vat"),rawData:!0},{property:"transaction_key",label:this.$tc("buckaroo-payment.transactionHistory.types.transaction_key"),rawData:!0},{property:"transaction_method",label:this.$tc("buckaroo-payment.transactionHistory.types.transaction_method"),rawData:!0},{property:"statuscode",label:this.$tc("buckaroo-payment.transactionHistory.types.statuscode"),rawData:!0}]}},created(){this.createdComponent()},methods:{recalculateOrderItems(){this.buckaroo_refund_amount=0;for(const e in this.orderItems)this.orderItems[e].totalAmount=parseFloat(parseFloat(this.orderItems[e].unitPrice)*parseFloat(this.orderItems[e].quantity||0)).toFixed(2),this.buckaroo_refund_amount=parseFloat(parseFloat(this.buckaroo_refund_amount)+parseFloat(this.orderItems[e].totalAmount)).toFixed(2)},recalculateRefundItems(){this.buckaroo_refund_total_amount=0;for(const e in this.transactionsToRefund)this.transactionsToRefund[e].amount&&(this.buckaroo_refund_total_amount=parseFloat(parseFloat(this.buckaroo_refund_total_amount)+parseFloat(this.transactionsToRefund[e].amount)).toFixed(2))},getCustomRefundEnabledEl(){return document.getElementById("buckaroo_custom_refund_enabled")},getCustomRefundAmountEl(){return document.getElementById("buckaroo_custom_refund_amount")},toggleCustomRefund(){this.getCustomRefundEnabledEl()&&this.getCustomRefundAmountEl()&&(this.getCustomRefundAmountEl().disabled=!this.getCustomRefundEnabledEl().checked)},getCustomRefundAmount(){return this.getCustomRefundEnabledEl()&&this.getCustomRefundAmountEl()&&this.getCustomRefundEnabledEl().checked?this.getCustomRefundAmountEl().value:0},createdComponent(){let e=this;const t=this.$route.params.id;this.systemConfigApiService.getValues("BuckarooPayments.config",null).then(s=>{this.config=s});const a=this.repositoryFactory.create("order"),n=new c(1,1);this.orderId=t,n.addAssociation("transactions.paymentMethod").addAssociation("transactions"),n.getAssociation("transactions").addSorting(c.sort("createdAt")),a.get(t,B.api,n).then(s=>{e.checkedIsAuthorized(s),e.isCapturePossible=s.transactions&&s.transactions.last().paymentMethod&&s.transactions.last().paymentMethod.customFields&&s.transactions.last().paymentMethod.customFields.buckaroo_key&&["klarnakp","billink"].includes(s.transactions.last().paymentMethod.customFields.buckaroo_key.toLowerCase())||e.isAfterpayCapturePossible(s),e.isPaylinkVisible=e.isPaylinkAvailable=this.getConfigValue("paylinkEnabled")&&s.stateMachineState&&s.stateMachineState.technicalName&&s.stateMachineState.technicalName=="open"&&s.transactions&&s.transactions.last().stateMachineState.technicalName=="open"}),this.BuckarooPaymentService.getBuckarooTransaction(t).then(s=>{e.orderItems=[],e.transactionsToRefund=[],e.relatedResources=[],this.$emit("loading-change",!1),s.orderItems.forEach(o=>{e.orderItems.push({id:o.id,name:o.name,quantity:o.quantity,quantityMax:o.quantity,unitPrice:o.unitPrice.value,totalAmount:o.totalAmount.value,variations:o.variations||[]})}),e.recalculateOrderItems(),s.transactionsToRefund.forEach(o=>{e.transactionsToRefund.push({id:o.id,transactions:o.transactions,amount:o.total,amountMax:o.total,currency:o.currency,transaction_method:o.transaction_method,logo:o.transaction_method?o.logo:null}),e.currency=o.currency}),e.recalculateRefundItems(),s.transactions.forEach(o=>{e.relatedResources.push({id:o.id,transaction_key:o.transaction,total:o.total,total_excluding_vat:o.total_excluding_vat,shipping_costs:o.shipping_costs,vat:o.vat,transaction_method:o.transaction_method,logo:o.transaction_method?o.logo:null,created_at:o.created_at,statuscode:o.statuscode})})}).catch(s=>{console.log("errorResponse",s)})},isAfterpayCapturePossible(e){return e.customFields.buckaroo_is_authorize===!0},checkedIsAuthorized(e){var t,a,n;this.isAuthorized=((n=(a=(t=e==null?void 0:e.transactions)==null?void 0:t.last())==null?void 0:a.stateMachineState)==null?void 0:n.technicalName)==="authorized"},refundOrder(e,t){let a=this;a.isRefundPossible=!1,this.BuckarooPaymentService.refundPayment(e,this.transactionsToRefund,this.orderItems,this.getCustomRefundAmount()).then(n=>{for(const s in n)n[s].status?this.createNotificationSuccess({title:a.$tc("buckaroo-payment.settingsForm.titleSuccess"),message:a.$tc(n[s].message)+n[s].amount}):this.createNotificationError({title:a.$tc("buckaroo-payment.settingsForm.titleError"),message:a.$tc(n[s].message)});a.isRefundPossible=!0,this.createdComponent()}).catch(n=>{this.createNotificationError({title:this.$tc("buckaroo-payment.settingsForm.titleError"),message:n.response.data.message}),a.isRefundPossible=!0})},createPaylink(e){let t=this;t.isPaylinkAvailable=!1,this.BuckarooPaymentService.createPaylink(e,this.transactionsToRefund,this.orderItems).then(a=>{a.status?(t.paylinkMessage=t.$tc(a.message)+a.paylinkhref,t.paylink=a.paylink,this.createNotificationSuccess({title:t.$tc("buckaroo-payment.settingsForm.titleSuccess"),message:t.paylinkMessage})):this.createNotificationError({title:t.$tc("buckaroo-payment.settingsForm.titleError"),message:t.$tc(a.message)}),t.isPaylinkAvailable=!0}).catch(a=>{this.createNotificationError({title:this.$tc("buckaroo-payment.settingsForm.titleError"),message:a.response.data.message}),t.isPaylinkAvailable=!0})},getConfigValue(e){return this.config[`BuckarooPayments.config.${e}`]},captureOrder(e){let t=this;t.isCapturePossible=!1,this.BuckarooPaymentService.captureOrder(e,this.transactionsToRefund,this.orderItems).then(a=>{a.status?this.createNotificationSuccess({title:t.$tc("buckaroo-payment.settingsForm.titleSuccess"),message:a.message}):this.createNotificationError({title:t.$tc("buckaroo-payment.settingsForm.titleError"),message:a.message}),t.isCapturePossible=!0,this.createdComponent()}).catch(a=>{this.createNotificationError({title:this.$tc("buckaroo-payment.settingsForm.titleError"),message:t.$tc(a.response.data.message)}),t.isCapturePossible=!0})}}});const{Component:P}=Shopware;P.extend("buckaroo-payment-config","sw-extension-config",{});const x={"buckaroo-payment":{fee:"Buckaroo Betaaltoeslag",order:{refundDescription:"Refund voor bestelling #orderNumber"},general:{title:"Buckaroo",description:"Buckaroo Payment"},settingsForm:{save:"Opslaan",titleSuccess:"Succes",titleError:"Foutmelding"},supportModal:{menuButton:"Version & Support",title:"Versie & Support",support:{description:"Zorg ervoor dat u uw website key bij de hand heeft voordat u contact opneemt met Buckaroo technical support",label1:"Buckaroo Plaza:",label2:"Telefoonnummer:",label3:"E-mail:",label4:"Website:",your_version:"Uw PHP versie:",version:"Versie compatibiliteit",information:"Informatie"}},tabs:{title:"Buckaroo Payment",overview:"Overzicht"},paymentDetail:{yourLink:"Uw Paylink",paylinkButton:"Creëer Paylink",paylinkDescription:"Creëer Paylink voor order",paylinkTitle:"Paylink",refundTitle:"Terugbetaling",transactionsTitle:"Transacties",amountTitle:"Hoeveelheid",amountTotalTitle:"Algemeen totaal (grand total)",amountRefundTotalTitle:"Terugbetaling Algemeen totaal (grand total)",amountCustomRefundTitle:"Aangepast bedrag terugbetalen",buttonTitle:"Terugbetaling",successTitle:"Success",successMessage:"Buckaroo terugbetaling succesvol",errorTitle:"Foutmelding",payTitle:"Betaling vastleggen (Capture)",payDescription:"Factuur voor bestelling vastleggen (Capture) en aanmaken",payButton:"Betaling vastleggen (Capture)"},orderItems:{title:"Artikelen om terug te betalen",types:{id:"id",name:"Titel",quantity:"Aantal om terug te betalen",totalAmount:"Subtotaal"}},transactionsToRefund:{title:"Terugbetaling Totaal"},transactionHistory:{types:{id:"id",created_at:"Datum/tijd",total:"Totaal",shipping_costs:"Verzendkosten",total_excluding_vat:"Totaal exclusief BTW",total_including_vat:"Totaal inclusief BTW",vat:"BTW",transaction_key:"Transactie key",transaction_method:"Betaalmethode",statuscode:"Status"}},messageNotValid:"Dit veld is niet geldig.",messageNotBlank:"Dit veld mag niet leeg zijn.",button:{labelTestApi:"Test gegevens"},afterpay:{setup:"Belastingkoppeling instellen voor Riverty old ",hightTaxes:"Hoge BTW-heffingen",middleTaxes:"Middelmatige BTW-belastingen",lowTaxes:"Lage BTW-heffingen",zeroTaxes:"Nul VAT",noTaxes:"Geen BTW"},paymentInTestMode:"De betaling voor deze bestelling is in testmodus uitgevoerd",refund:{not_supported:"Terugbetaling wordt niet ondersteund",already_refunded:"Deze bestelling is al terugbetaald",refunded_amount:"Buckaroo terugbetaling succesvol"},test_api:{connection_ready:"Verbinding gereed",connection_failed:"Verbinding mislukt"},paylink:{invalid_amount:"Het bedrag is niet geldig",pay_link:"Uw Paylink:"},missing_order_id:"Ontbrekende bestelling orderId",missing_transaction:"Order transactie niet gevonden",general_request_error:"Helaas is er een fout opgetreden tijdens het verwerken van uw aanvraag. Probeer het opnieuw.",in3LogoLabel:"Betaalmethode Logo:","configure-payment":"Configure payment","configure-link":"Configure","payment-methods":"Payment methods"}},$={"buckaroo-payment":{fee:"Buckaroo Gebühr",order:{refundDescription:"Rückerstattung für Bestellung #orderNumber"},general:{title:"Buckaroo",description:"Buckaroo Zahlung"},settingsForm:{save:"Speichern",titleSuccess:"Erfolg",titleError:"Fehler"},supportModal:{menuButton:"Version & Unterstützung",title:"Version & Unterstützung",support:{description:"Bevor Sie den technischen Support von Buckaroo kontaktieren, bitte holen Sie Ihren (Händler-)Schlüssel und Geheimschlüssel ab.",label1:"Buckaroo Plaza:",label2:"Telefon:",label3:"E-Mail:",label4:"Webseite:",your_version:"Ihre PHP-Version:",version:"Versionskompatibilität",information:"Informationen"}},tabs:{title:"Buckaroo Payment",overview:"Übersicht"},paymentDetail:{yourLink:"Ihr Paylink",paylinkButton:"Paylink erstellen",paylinkDescription:"Paylink erstellen für Bestellung",paylinkTitle:"Paylink",refundTitle:"Rückerstattung",transactionsTitle:"Transaktionen",amountTitle:"Betrag",amountTotalTitle:"Gesamtsumme",amountRefundTotalTitle:"Gesamtsumme der Rückerstattung",amountCustomRefundTitle:"Rückerstattung individueller Betrag",buttonTitle:"Rückerstattung",successTitle:"Erfolg",successMessage:"Buckaroo-Erfolg, zurückerstattet",errorTitle:"Fehler",payTitle:"Zahlung erfassen (Capture)",payDescription:"Erfassen (Capture) und Rechnung für Bestellung erstellen",payButton:"Zahlung erfassen (Capture)"},orderItems:{title:"Artikel zur Rückerstattung",types:{id:"id",name:"Titel",quantity:"Menge zur Rückerstattung",totalAmount:"Teilsumme"}},transactionsToRefund:{title:"Rückerstattungssummen"},transactionHistory:{types:{id:"id",created_at:"Datum/Uhrzeit",total:"Gesamt",shipping_costs:"Versandkosten",total_excluding_vat:"Gesamt ohne MwSt. (VAT)",total_including_vat:"Gesamt inklusive MwSt. (VAT)",vat:"MwSt. (VAT)",transaction_key:"Transaktionsschlüssel",transaction_method:"Zahlungsmethode",statuscode:"Status"}},messageNotValid:"Dieses Feld ist nicht gültig.",messageNotBlank:"Dieses Feld darf nicht leer sein.",button:{labelTestApi:"Verbindung testen"},afterpay:{setup:"Steuerzuordnung für Riverty old einrichten ",hightTaxes:"Hohe MwSt. (VAT)",middleTaxes:"Mittlere MwSt. (VAT)",lowTaxes:"Niedrige MwSt. (VAT)",zeroTaxes:"Keine MwSt. (VAT)",noTaxes:"Keine Mehrwertsteuer"},paymentInTestMode:"Die Zahlung für diese Bestellung wurde im Testmodus durchgeführt",refund:{not_supported:"Rückerstattung wird nicht unterstützt",already_refunded:"Diese Bestellung wurde bereits zurückerstattet",refunded_amount:"Erfolgreich von Buckaroo erstattet"},test_api:{connection_ready:"Verbindung bereit",connection_failed:"Verbindung fehlgeschlagen"},paylink:{invalid_amount:"Betrag ist nicht gültig",pay_link:"Ihr Zahlungslink (Paylink):"},missing_order_id:"Fehlende Bestell-ID",missing_transaction:"Transaktion der Bestellung nicht gefunden",general_request_error:"Leider ist ein Fehler bei der Bearbeitung Ihrer Anfrage aufgetreten. Bitte versuchen Sie es erneut.",in3LogoLabel:"Zahlungslogo:","configure-payment":"Configure payment","configure-link":"Configure","payment-methods":"Payment methods"}},I={"buckaroo-payment":{fee:"Buckaroo Fee",order:{refundDescription:"Refund for order #orderNumber"},general:{title:"Buckaroo",description:"Buckaroo Payment"},settingsForm:{save:"Save",titleSuccess:"Success",titleError:"Error"},supportModal:{menuButton:"Version & Support",title:"Version & Support",support:{description:"Before contacting Buckaroo technical support, please retrieve your (Merchant) key, Secret key, certificate and certificate thumbprint.",label1:"Buckaroo Payment Plaza:",label2:"Phone:",label3:"E-mail:",label4:"Website:",your_version:"Your PHP version:",version:"Version compatibility",information:"Information"}},tabs:{title:"Buckaroo Payment",overview:"Overview"},paymentDetail:{yourLink:"Your Paylink",paylinkButton:"Create paylink",paylinkDescription:"Create paylink for order",paylinkTitle:"Paylink",refundTitle:"Refund",transactionsTitle:"Transactions",amountTitle:"Amount",amountTotalTitle:"Grand total",amountRefundTotalTitle:"Refund Grand total",amountCustomRefundTitle:"Refund custom amount",buttonTitle:"Refund",successTitle:"Success",successMessage:"Buckaroo success refunded ",errorTitle:"Error",payTitle:"Capture payment",payDescription:"Capture and create invoice for order",payButton:"Capture payment"},orderItems:{title:"Items to Refund",types:{id:"id",name:"Title",quantity:"Qty to Refund",totalAmount:"Subtotal"}},transactionsToRefund:{title:"Refund Totals"},transactionHistory:{types:{id:"id",created_at:"Date/time",total:"Total",shipping_costs:"Shipping costs",total_excluding_vat:"Total excluding VAT",total_including_vat:"Total including VAT",vat:"VAT",transaction_key:"Transaction key",transaction_method:"Payment method",statuscode:"Status"}},messageNotValid:"This field not valid.",messageNotBlank:"This field must not be empty.",button:{labelTestApi:"Test connection"},afterpay:{setup:"Setup tax association for Riverty old ",hightTaxes:"High VAT taxes",middleTaxes:"Middle VAT taxes",lowTaxes:"Low VAT taxes",zeroTaxes:"Zero VAT",noTaxes:"No VAT tax"},paymentInTestMode:"The payment for this order was made in test mode",refund:{not_supported:"Refund is not supported",already_refunded:"This order is already refunded",refunded_amount:"Buckaroo success refunded"},test_api:{connection_ready:"Connection ready",connection_failed:"Connection failed"},paylink:{invalid_amount:"Amount is not valid",pay_link:"Your Paylink:"},missing_order_id:"Missing order orderId",missing_transaction:"Order transaction not found",general_request_error:"Unfortunately an error occurred while processing your request. Please try again.",in3LogoLabel:"Payment Logo:","configure-payment":"Configure payment","configure-link":"Configure","payment-methods":"Payment methods"}},{Module:A}=Shopware;A.register("buckaroo-payment",{type:"plugin",name:"BuckarooPayment",title:"buckaroo-payment.general.title",description:"buckaroo-payment.general.description",version:"1.0.0",targetVersion:"1.0.0",color:"#000000",icon:"default-action-settings",snippets:{"nl-NL":x,"de-DE":$,"en-GB":I},routeMiddleware(e,t){t.name==="sw.order.detail"&&t.children.push({component:"buckaroo-payment-detail",name:"buckaroo.payment.detail",isChildren:!0,path:"/sw/order/buckaroo/detail/:id"}),e(t)},routes:{config:{component:"buckaroo-payment-config",path:":namespace/payment/:paymentCode",name:"buckaroo.config.payment",meta:{parentPath:"sw.extension.config"},props:{default(e){return{namespace:e.params.namespace}}}}}});const{Application:u}=Shopware,i=Shopware.Classes.ApiService;class R extends i{constructor(t,a,n="buckaroo"){super(t,a,n)}getBuckarooTransaction(t){const a=`_action/${this.getApiBasePath()}/getBuckarooTransaction`;return this.httpClient.post(a,{transaction:t},{headers:this.getBasicHeaders()}).then(n=>i.handleResponse(n))}refundPayment(t,a,n,s){const o=`_action/${this.getApiBasePath()}/refund`;return this.httpClient.post(o,{transaction:t,transactionsToRefund:a,orderItems:n,customRefundAmount:s},{headers:this.getBasicHeaders()}).then(p=>i.handleResponse(p))}captureOrder(t){const a=`_action/${this.getApiBasePath()}/capture`;return this.httpClient.post(a,{transaction:t},{headers:this.getBasicHeaders()}).then(n=>i.handleResponse(n))}createPaylink(t){const a=`_action/${this.getApiBasePath()}/paylink`;return this.httpClient.post(a,{transaction:t},{headers:this.getBasicHeaders()}).then(n=>i.handleResponse(n))}}u.addServiceProvider("BuckarooPaymentService",e=>{const t=u.getContainer("init");return new R(t.httpClient,e.loginService)});const{Application:d}=Shopware,r=Shopware.Classes.ApiService;class F extends r{constructor(t,a,n="buckaroo"){super(t,a,n)}getSupportVersion(){const t=`_action/${this.getApiBasePath()}/version`;return this.httpClient.post(t,{},{headers:this.getBasicHeaders()}).then(a=>r.handleResponse(a))}getTaxes(){const t=`_action/${this.getApiBasePath()}/taxes`;return this.httpClient.post(t,{},{headers:this.getBasicHeaders()}).then(a=>r.handleResponse(a))}getIn3Icons(){const t=`_action/${this.getApiBasePath()}/in3/logos`;return this.httpClient.post(t,{},{headers:this.getBasicHeaders()}).then(a=>r.handleResponse(a))}getApiTest(t,a,n){const s=`_action/${this.getApiBasePath()}/getBuckarooApiTest`;return this.httpClient.post(s,{websiteKeyId:t,secretKeyId:a,saleChannelId:n},{headers:this.getBasicHeaders()}).then(o=>r.handleResponse(o))}}d.addServiceProvider("BuckarooPaymentSettingsService",e=>{const t=d.getContainer("init");return new F(t.httpClient,e.loginService)});const E=`<div> <a style="margin-bottom:10px;" @click="showTaxes = !showTaxes">{{$tc('buckaroo-payment.afterpay.setup')}}</a> <div v-if="showTaxes" style="padding: 10px;background: rgb(246 246 246); margin-bottom:10px;"> <div class="tax" v-for="tax in taxes"> <sw-select-field :label="tax.name" label-property="name" value-property="id" :options="afterpayTaxes" @change="setTaxAssociation(tax.id, $event)" :value="getSelectValue(tax.id)" ></sw-select-field> </div> </div> </div>`,{Component:M}=Shopware;M.register("buckaroo-afterpay-old-tax",{template:E,inject:["BuckarooPaymentSettingsService"],data(){return{taxes:[],showTaxes:!1,afterpayTaxes:[{name:this.$tc("buckaroo-payment.afterpay.hightTaxes"),id:1},{name:this.$tc("buckaroo-payment.afterpay.middleTaxes"),id:5},{name:this.$tc("buckaroo-payment.afterpay.lowTaxes"),id:2},{name:this.$tc("buckaroo-payment.afterpay.zeroTaxes"),id:3},{name:this.$tc("buckaroo-payment.afterpay.noTaxes"),id:4}],taxAssociation:{}}},model:{prop:"value",event:"change"},computed:{},props:{name:{type:String,required:!0,default:""},value:{type:Object,required:!1,default(){return{}}}},created(){this.BuckarooPaymentSettingsService.getTaxes().then(e=>{this.taxes=e.taxes.map(t=>({id:t.id,name:t.name}))})},methods:{setTaxAssociation(e,t){this.taxAssociation[e]=t,this.$emit("change",{...this.value,...this.taxAssociation})},getSelectValue(e){if(this.value[e])return this.value[e]}}});const V=`<div> <buckaroo-config-card :card="mainCard" :methods="elementMethods" :isNotDefaultSalesChannel="isNotDefaultSalesChannel" :currentSalesChannelId="currentSalesChannelId" v-model="value" ></buckaroo-config-card> {#<buckaroo-payment-list#} {# v-if="selectedCard === 'general'"#} {# :configSettings="configSettings"#} {# :currentSalesChannelId="currentSalesChannelId"#} {# v-model="value">#} {#</buckaroo-payment-list>#} </div>`,{Component:D}=Shopware;D.register("buckaroo-main-config",{template:V,props:{configSettings:{required:!0},value:{required:!0},elementMethods:{required:!0},isNotDefaultSalesChannel:{required:!0},currentSalesChannelId:{required:!0}},data(){var e;return{selectedCard:((e=this.$route.params)==null?void 0:e.paymentCode)||"general"}},watch:{$route(e){var t;(t=e.params)!=null&&t.paymentCode&&(this.selectedCard=e.params.paymentCode)}},computed:{mainCard(){var e;return console.log("configSettings:",this.configSettings),Array.isArray(this.configSettings)?(e=this.configSettings.filter(t=>t.name===this.selectedCard))==null?void 0:e.pop():null}}});const N=`<mt-card position-identifier="xxsw-system-config-content"> <template #title> {{ getInlineSnippet(card.title) }} </template> <div class="bk-card-fields"> <template v-for="element in card.elements" :key="element.name"> <div v-if="canShow(element)"> <mt-inherit-wrapper v-model="value[element.name]" v-bind="getInheritWrapperBind(element)" :has-parent="isNotDefaultSalesChannel" :inherited-value="getInheritedValue(element)" :class="getElementBind(element) ? 'mt-system-config--field-' + kebabCase(getElementBind(element).name) : ''" > <template #content="props"> <mt-form-field-renderer v-bind="getElementBind(element, props)" :value="value[element.name]" :disabled="props.isInherited" :error="getFieldError(element.name)" @input="props.updateCurrentValue" @change="props.updateCurrentValue" @update:value="value[element.name] = $event" /> </template> </mt-inherit-wrapper> <buckaroo-test-credentials v-if="canShowCredentialTester(element)" :config="value" :currentSalesChannelId="currentSalesChannelId" /> </div> </template> </div> </mt-card>`,{Component:L}=Shopware;L.register("buckaroo-config-card",{template:N,props:{card:{required:!0},methods:{required:!0},isNotDefaultSalesChannel:{required:!0},value:{required:!0},currentSalesChannelId:{required:!0}},methods:{getElementBind(e,t){return this.methods.getElementBind(e,t)},getInheritWrapperBind(e){return this.methods.getInheritWrapperBind(e)},getFieldError(e){return this.methods.getFieldError(e)},kebabCase(e){return this.methods.kebabCase(e)},getInlineSnippet(e){return this.methods.getInlineSnippet(e)},getInheritedValue(e){return this.methods.getInheritedValue(e)},getValueForName(e){return this.value[`BuckarooPayments.config.${e}`]},canShow(e){const t=e.name.replace("BuckarooPayments.config.",""),a={advancedConfiguration:["orderStatus","paymentSuccesStatus","automaticallyCloseOpenOrders","sendInvoiceEmail"],idealprocessingShowissuers:["idealprocessingRenderMode"],idealShowissuers:["idealRenderMode"],idealFastCheckout:["idealFastCheckoutEnabled","idealFastCheckoutVisibility","idealFastCheckoutLogoScheme"],afterpayCaptureonshippent:["afterpayPaymentstatus"],afterpayEnabledold:["afterpayOldtax"]};for(const[n,s]of Object.entries(a))if(s.includes(t))return this.getValueForName(n);return!0},canShowCredentialTester(e){const t=e.name;return t==="BuckarooPayments.config.advancedConfiguration"||t==="BuckarooPayments.config.orderStatus"&&this.getValueForName("advancedConfiguration")}}});const q=`<mt-card position-identifier="bk-config-payment-list" :title="$tc('buckaroo-payment.payment-methods')" > <div class="bk-payment-wrap"> <template v-for="payment in payments" > <div class="bk-payment"> <div class="bk-payment-inner"> <router-link :title="$tc('buckaroo-payment.configure-payment')" :to="{name: 'buckaroo.payment.config', params: {namespace: 'BuckarooPayments', paymentCode: payment.code } }"> <div class="bk-payment-img"> <img :src="assetFilter(\`buckaroopayments/static/\${payment.logo}\`)" alt="Payment logo"> </div> <div class="bk-payment-name"> {{ getPaymentTitle(payment.code) }} </div> </router-link> <buckaroo-toggle-status :currentSalesChannelId="currentSalesChannelId" :method="payment.code" v-model="value" /> <router-link class="bk-link" :title="$tc('buckaroo-payment.configure-payment')" :to="{name: 'buckaroo.payment.config', params: {namespace: 'BuckarooPayments', paymentCode: payment.code } }"> {{$tc('buckaroo-payment.configure-link')}} </router-link> </div> </div> </template> </div> </mt-card>`,{Component:z,Filter:H,Mixin:O}=Shopware;z.register("buckaroo-payment-list",{template:q,props:{configSettings:{required:!0},value:{required:!0},currentSalesChannelId:{required:!0}},mixins:[O.getByName("sw-inline-snippet")],data(){return{payments:[{code:"Alipay",logo:"alipay.svg"},{code:"applepay",logo:"applepay.svg"},{code:"bancontactmrcash",logo:"bancontact.svg"},{code:"blik",logo:"blik.svg"},{code:"belfius",logo:"belfius.svg"},{code:"Billink",logo:"billink.svg"},{code:"creditcard",logo:"creditcards.svg"},{code:"creditcards",logo:"creditcards.svg"},{code:"eps",logo:"eps.svg"},{code:"giftcards",logo:"giftcards.svg"},{code:"idealqr",logo:"ideal-qr.svg"},{code:"ideal",logo:"ideal.svg"},{code:"capayable",logo:"ideal-in3.svg"},{code:"KBCPaymentButton",logo:"kbc.svg"},{code:"klarnakp",logo:"klarna.svg"},{code:"knaken",logo:"gosettle.svg"},{code:"mbway",logo:"mbway.svg"},{code:"multibanco",logo:"multibanco.svg"},{code:"paybybank",logo:"paybybank.svg"},{code:"payconiq",logo:"payconiq.svg"},{code:"paypal",logo:"paypal.svg"},{code:"payperemail",logo:"payperemail.svg"},{code:"Przelewy24",logo:"przelewy24.svg"},{code:"afterpay",logo:"afterpay.svg"},{code:"sepadirectdebit",logo:"sepa-directdebit.svg"},{code:"transfer",logo:"sepa-credittransfer.svg"},{code:"Trustly",logo:"trustly.svg"},{code:"WeChatPay",logo:"wechatpay.svg"}]}},methods:{getPaymentTitle(e){const t=this.configSettings.find(n=>n.name===e);if(t)return this.getInlineSnippet(t.title);const a=this.payments.find(n=>n.code===e);return a?a.code:"Unknown Payment"},assetFilter(e){return H.getByName("asset")(e)}}});const K=`<mt-button variant="primary" :disabled="!enabled" :is-loading="isLoading" :block="true" :square="false" @click="sendTestApi" > {{ $tc('buckaroo-payment.button.labelTestApi') }} </mt-button>`,{Component:W,Mixin:m}=Shopware;W.register("buckaroo-test-credentials",{template:K,mixins:[m.getByName("notification"),m.getByName("sw-inline-snippet")],data(){return{isLoading:!1}},inject:["BuckarooPaymentSettingsService"],props:{config:{type:Object,required:!0},currentSalesChannelId:{required:!0}},computed:{enabled:function(){return(this.getConfigValue("websiteKey")||"").length>0&&(this.getConfigValue("secretKey")||"").length>0}},methods:{getConfigValue:function(e){return this.config["BuckarooPayments.config."+e]},sendTestApi(){this.isLoading=!0;let e=this.getConfigValue("websiteKey"),t=this.getConfigValue("secretKey");this.BuckarooPaymentSettingsService.getApiTest(e,t,this.currentSalesChannelId).then(a=>{this.isLoading=!1,a.status=="success"?this.createNotificationSuccess({title:this.$tc("buckaroo-payment.settingsForm.titleSuccess"),message:this.$tc(a.message)}):this.createNotificationError({title:this.$tc("buckaroo-payment.settingsForm.titleError"),message:this.$tc(a.message)})}).catch(()=>{this.isLoading=!1})}}});const G=`<div class="bk-toogle-wrap"> <button type="button" :disabled="isLoading" :class="\`live \${getClass('live')}\`" @click="setStatus('live')" > Live </button> <button v-if="method !== 'idealqr'" type="button" :disabled="isLoading" :class="\`test \${getClass('test')}\`" @click="setStatus('test')" > Test </button> <button type="button" :disabled="isLoading" :class="\`disabled \${getClass('disabled')}\`" @click="setStatus('disabled')" > Off </button> </div>`,{Component:j,Mixin:U}=Shopware;j.register("buckaroo-toggle-status",{template:G,props:{method:{type:String,required:!0},value:{required:!0},currentSalesChannelId:{required:!0}},mixins:[U.getByName("notification")],inject:["systemConfigApiService"],data(){return{status:this.getStatus(),isLoading:!1}},watch:{value(){this.status=this.getStatus()}},methods:{getStatus(){return this.isActive()?this.getEnvironment():"disabled"},isActive(){return this.getValueForName(`${this.method}Enabled`)},getEnvironment(){const e=this.getValueForName(`${this.method}Environment`);return e===void 0?"test":e},getValueForName(e){var t;return(t=this.value)==null?void 0:t[`BuckarooPayments.config.${e}`]},setStatus(e){this.status=e,this.saveStatus()},getClass(e){return this.status===e?"active":""},async saveStatus(){const e=`BuckarooPayments.config.${this.method}Enabled`,t=`BuckarooPayments.config.${this.method}Environment`;let a={[e]:!1};this.$set(this.value,e,!1),["live","test"].indexOf(this.status)!==-1&&(a={[e]:!0,[t]:this.status},this.$set(this.value,e,!0),this.$set(this.value,t,this.status)),this.isLoading=!0;try{await this.systemConfigApiService.batchSave({[this.currentSalesChannelId]:a}).finally(()=>{this.isLoading=!1}),this.renderSuccess()}catch(n){this.renderError(n)}},renderSuccess(){this.createNotificationSuccess({message:this.$tc("sw-extension-store.component.sw-extension-config.messageSaveSuccess")})},renderError(e){this.createNotificationError({message:e})}}});
//# sourceMappingURL=buckaroo-payments-C1MVKcXx.js.map

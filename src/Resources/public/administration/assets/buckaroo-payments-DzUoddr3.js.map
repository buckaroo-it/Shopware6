{"version":3,"file":"buckaroo-payments-DzUoddr3.js","sources":["../../../app/administration/src/module/buckaroo-payment/extension/sw-order/sw-order.html.twig","../../../app/administration/src/module/buckaroo-payment/extension/sw-order/index.js","../../../app/administration/src/module/buckaroo-payment/extension/sw-order-detail-base/sw-order-detail-base.html.twig","../../../app/administration/src/module/buckaroo-payment/extension/sw-order-detail-base/index.js","../../../app/administration/src/module/buckaroo-payment/extension/sw-order-user-card/sw-order-user-card.html.twig","../../../app/administration/src/module/buckaroo-payment/extension/sw-order-user-card/index.js","../../../app/administration/src/module/buckaroo-payment/extension/sw-system-config/sw-system-config.html.twig","../../../app/administration/src/module/buckaroo-payment/extension/sw-system-config/index.js","../../../app/administration/src/module/buckaroo-payment/page/buckaroo-payment-detail/buckaroo-payment-detail.html.twig","../../../app/administration/src/module/buckaroo-payment/page/buckaroo-payment-detail/index.js","../../../app/administration/src/module/buckaroo-payment/page/buckaroo-payment-config/index.js","../../../app/administration/src/module/buckaroo-payment/index.js","../../../app/administration/src/api/buckaroo-payment.service.js","../../../app/administration/src/api/buckaroo-payment-settings.service.js","../../../app/administration/src/components/buckaroo-afterpay-old-tax/buckaroo-afterpay-old-tax.html.twig","../../../app/administration/src/components/buckaroo-afterpay-old-tax/index.js","../../../app/administration/src/components/buckaroo-main-config/buckaroo-main-config.html.twig","../../../app/administration/src/components/buckaroo-main-config/index.js","../../../app/administration/src/components/buckaroo-config-card/buckaroo-config-card.html.twig","../../../app/administration/src/components/buckaroo-config-card/index.js","../../../app/administration/src/components/buckaroo-payment-list/buckaroo-payment-list.html.twig","../../../app/administration/src/components/buckaroo-payment-list/index.js","../../../app/administration/src/components/buckaroo-test-credentials/buckaroo-test-credentials.twig","../../../app/administration/src/components/buckaroo-test-credentials/index.js","../../../app/administration/src/components/buckaroo-toggle-status/buckaroo-toggle-status.html.twig","../../../app/administration/src/components/buckaroo-toggle-status/index.js"],"sourcesContent":["{% block sw_order_detail_content_tabs %}\r\n    <div\r\n     v-if=\"isPaymentInTestMode && setIsBuckarooPayment\"\r\n     style=\"max-width: 960px; margin: 0 auto 15px; background: rgb(251, 227, 231); border-radius:4px; color: #de294c; display:flex; align-items:center;\">\r\n        <div style=\"background:#de294c;padding: 4px 8px;border-radius: 4px 0 0 4px;\"><svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><defs><path d=\"m13.7744 1.4124 9.7058 18.6649c.5096.98.1283 2.1875-.8517 2.6971a2 2 0 0 1-.9227.2256H2.2942c-1.1045 0-2-.8954-2-2a2 2 0 0 1 .2256-.9227l9.7058-18.665c.5096-.98 1.7171-1.3613 2.6971-.8517a2 2 0 0 1 .8517.8518zM2.2942 21h19.4116L12 2.335 2.2942 21zM12 17c.5523 0 1 .4477 1 1s-.4477 1-1 1-1-.4477-1-1 .4477-1 1-1zm1-2c0 .5523-.4477 1-1 1s-1-.4477-1-1v-5c0-.5523.4477-1 1-1s1 .4477 1 1v5z\" id=\"icons-default-warning\"></path></defs><use xlink:href=\"#icons-default-warning\" fill=\"#fff\" fill-rule=\"evenodd\"></use></svg></div>\r\n        <p style=\"margin-left:10px;\">{{ $tc('buckaroo-payment.paymentInTestMode') }}</p>\r\n    </div>\r\n    {% parent %}\r\n{% endblock %}\r\n\r\n\r\n{% block sw_order_detail_content_tabs_general %}\r\n    {% parent %}\r\n\r\n    <sw-tabs-item v-if=\"setIsBuckarooPayment\" :route=\"{ name: 'buckaroo.payment.detail', params: { id: $route.params.id } }\" :title=\"$tc('buckaroo-payment.tabs.title')\">\r\n        {{ $tc('buckaroo-payment.tabs.title') }}\r\n    </sw-tabs-item>\r\n    \r\n{% endblock %}\r\n\r\n{% block sw_order_detail_actions %}\r\n    <template v-if=\"isEditable\">\r\n    </template>\r\n    {% parent %}\r\n{% endblock %}","import template from './sw-order.html.twig';\r\n\r\nconst { Component, Context } = Shopware;\r\nconst Criteria = Shopware.Data.Criteria;\r\n\r\nComponent.override('sw-order-detail', {\r\n    template,\r\n\r\n    data() {\r\n        return {\r\n            isBuckarooPayment: false,\r\n            isPaymentInTestMode: false\r\n        };\r\n    },\r\n\r\n    computed: {\r\n        isEditable() {\r\n            return !this.isBuckarooPayment || this.$route.name !== 'buckaroo.payment.detail';\r\n        },\r\n\r\n        showTabs() {\r\n            return true;\r\n        }\r\n    },\r\n\r\n    watch: {\r\n        orderId: {\r\n            deep: true,\r\n            handler() {\r\n                if (!this.orderId) {\r\n                    this.setIsBuckarooPayment(null);\r\n                    return;\r\n                }\r\n\r\n                const orderRepository = this.repositoryFactory.create('order');\r\n                const orderCriteria = new Criteria(1, 1);\r\n                orderCriteria.addAssociation('transactions');\r\n\r\n                orderRepository.get(this.orderId, Context.api, orderCriteria).then((order) => {\r\n\r\n                    this.setPaymentInTestMode(order);\r\n\r\n                    if (order.transactions.length <= 0 ||\r\n                        !order.transactions.last().paymentMethodId\r\n                    ) {\r\n                        this.setIsBuckarooPayment(null);\r\n                        return;\r\n                    }\r\n\r\n                    const paymentMethodId = order.transactions.last().paymentMethodId;\r\n\r\n                    if (paymentMethodId !== undefined && paymentMethodId !== null) {\r\n                        this.setIsBuckarooPayment(paymentMethodId);\r\n                    }\r\n                });\r\n            },\r\n            immediate: true\r\n        }\r\n    },\r\n\r\n    methods: {\r\n        setPaymentInTestMode(order) {\r\n            if (order.customFields && order.customFields.buckaroo_payment_in_test_mode) {\r\n                this.isPaymentInTestMode = order.customFields.buckaroo_payment_in_test_mode === true;\r\n            }\r\n        },\r\n        setIsBuckarooPayment(paymentMethodId) {\r\n            if (!paymentMethodId) {\r\n                return;\r\n            }\r\n            const paymentMethodRepository = this.repositoryFactory.create('payment_method');\r\n            paymentMethodRepository.get(paymentMethodId, Context.api).then(\r\n                (paymentMethod) => {\r\n                this.isBuckarooPayment = paymentMethod.formattedHandlerIdentifier.indexOf('buckaroo') >= 0;\r\n                }\r\n            );\r\n        }\r\n    }\r\n});","{% block sw_order_detail_base_line_items_summary %}\r\n\r\n    <sw-card-section divider=\"top\" secondary slim v-if=\"order.customFields !== null\">\r\n        <sw-container columns=\"1fr 440px\"\r\n        class=\"sw-order-detail__summary\" v-if=\"order.customFields.buckarooFee !== null && order.customFields.buckarooFee > 0\">\r\n            <sw-description-list grid=\"265px 1fr\"\r\n            class=\"sw-order-detail__summary-data\">\r\n                <dt>{{ $tc('buckaroo-payment.fee') }}</dt>\r\n                <dd>{{ order.customFields.buckarooFee }}\r\n                    {% if order.currency.isoCode == \"PLN\" %}\r\n                        PLN\r\n                    {% else %}\r\n                        {{ order.currency.symbol }}\r\n                    {% endif %}\r\n                    </dd>\r\n            </sw-description-list>\r\n        </sw-container>\r\n    </sw-card-section>\r\n\r\n    {% parent %}\r\n    \r\n{% endblock %}","import template from './sw-order-detail-base.html.twig';\r\n\r\nconst { Component, Context } = Shopware;\r\nconst Criteria = Shopware.Data.Criteria;\r\n\r\nComponent.override('sw-order-detail-base', {\r\n    template\r\n});\r\n","{% block sw_order_detail_base_secondary_info_payment %}\r\n    <template v-if=\"currentOrder.transactions.length > 0 && (!currentOrder.transactions.last().paymentMethod.translated.customFields || !currentOrder.transactions.last().paymentMethod.translated.customFields.is_buckaroo)\">\r\n        {% parent %}\r\n    </template>\r\n    <template v-if=\"currentOrder.transactions.length > 0 && currentOrder.transactions.last().paymentMethod.translated.customFields && currentOrder.transactions.last().paymentMethod.translated.customFields.is_buckaroo\">\r\n        <dt>{{ $tc('sw-order.detailBase.labelPaymentMethod') }}</dt>\r\n        <dd>\r\n            <template v-if=\"config['BuckarooPayments.config.' + currentOrder.transactions.last().paymentMethod.translated.customFields.buckaroo_key + 'Label']\">\r\n                {{ config['BuckarooPayments.config.' + currentOrder.transactions.last().paymentMethod.translated.customFields.buckaroo_key + 'Label'] }}\r\n            </template>\r\n        </dd>\r\n    </template>\r\n{% endblock %}\r\n\r\n","import template from './sw-order-user-card.html.twig';\r\n\r\nconst { Component } = Shopware;\r\n\r\nComponent.override('sw-order-user-card', {\r\n    template,\r\n\r\n    inject: [ 'systemConfigApiService' ],\r\n\r\n    data() {\r\n        return {\r\n            config: {}\r\n        };\r\n    },\r\n\r\n    created() {\r\n        this.systemConfigApiService.getValues('BuckarooPayments.config', null)\r\n            .then(values => {\r\n                this.config = values;\r\n            })\r\n            .finally(() => {\r\n            });\r\n    }\r\n\r\n});\r\n"," {% block sw_system_config_content_card %}\r\n    <template v-if=\"domain !== 'BuckarooPayments.config'\">\r\n        {% parent() %}\r\n    </template>\r\n    <template v-else>\r\n       <buckaroo-main-config\r\n            :value=\"actualConfigData[currentSalesChannelId]\"\r\n            :configSettings=\"config\"\r\n            :isNotDefaultSalesChannel=\"isNotDefaultSalesChannel\"\r\n            :currentSalesChannelId=\"currentSalesChannelId\"\r\n            :elementMethods=\"{getElementBind, getFieldError, getInheritWrapperBind, getInheritedValue, hasMapInheritanceSupport, getInlineSnippet, kebabCase}\"\r\n            @input=\"onConfigDataUpdate\"\r\n            v-if=\"!isLoading && actualConfigData[currentSalesChannelId] && config && config.length > 0\"\r\n        ></buckaroo-main-config>\r\n    </template>\r\n {% endblock %}"," import template from './sw-system-config.html.twig';\r\n\r\nconst { Component } = Shopware;\r\n\r\nComponent.override('sw-system-config', {\r\n    template,\r\n    \r\n    createdComponent() {\r\n        this.$super('createdComponent');\r\n        this.loadBuckarooConfigData();\r\n    },\r\n\r\n    methods: {\r\n        loadBuckarooConfigData() {\r\n            \r\n            this.systemConfigApiService.getValues('BuckarooPayments.config', this.currentSalesChannelId)\r\n                .then(response => {\r\n                    \r\n                    if (!this.actualConfigData[this.currentSalesChannelId]) {\r\n                        this.actualConfigData[this.currentSalesChannelId] = {};\r\n                    }\r\n\r\n                    const processedData = {};\r\n                    \r\n                    if (response && typeof response === 'object') {\r\n                        Object.keys(response).forEach(key => {\r\n                            const value = response[key];\r\n\r\n                            if (value && typeof value === 'object' && value.hasOwnProperty('_value')) {\r\n                                processedData[key] = value._value;\r\n                            } else {\r\n                                processedData[key] = value;\r\n                            }\r\n\r\n                            const shortKey = key.replace('BuckarooPayments.config.', '');\r\n                            if (shortKey !== key) {\r\n                                processedData[shortKey] = processedData[key];\r\n                            }\r\n                        });\r\n                    }\r\n\r\n                    this.actualConfigData[this.currentSalesChannelId] = {};\r\n                    Object.keys(processedData).forEach(key => {\r\n                        this.actualConfigData[this.currentSalesChannelId][key] = processedData[key];\r\n                    });\r\n\r\n                    this.$nextTick(() => {\r\n                        this.$forceUpdate();\r\n                    });\r\n                })\r\n                .catch(error => {\r\n                    console.error('Error fetching system config:', error);\r\n                });\r\n        },\r\n\r\n        onConfigDataUpdate(newValue) {\r\n            if (!this.actualConfigData[this.currentSalesChannelId]) {\r\n                this.actualConfigData[this.currentSalesChannelId] = {};\r\n            }\r\n            Object.keys(newValue).forEach(key => {\r\n                this.actualConfigData[this.currentSalesChannelId][key] = newValue[key];\r\n                if (!key.startsWith('BuckarooPayments.config.')) {\r\n                    const fullFieldName = `BuckarooPayments.config.${key}`;\r\n                    this.actualConfigData[this.currentSalesChannelId][fullFieldName] = newValue[key];\r\n                }\r\n            });\r\n        },\r\n\r\n        saveAll() {\r\n            if (this.domain !== 'BuckarooPayments.config') {\r\n                return this.$super('saveAll');\r\n            }\r\n            return this.saveBuckaroo();\r\n        },\r\n        \r\n        saveBuckaroo() {\r\n            this.isLoading = true;\r\n            return this.systemConfigApiService\r\n                .batchSave(this.getSelectedValues())\r\n                .finally(() => {\r\n                    this.isLoading = false;\r\n                });\r\n        },\r\n        \r\n        getCurrentConfigCard() {\r\n            const code = this.$route.params?.paymentCode || 'general';\r\n            return this.config.filter((card) => card.name === code)?.pop();\r\n        },\r\n        \r\n        getSelectedValues() {\r\n            const currentConfigValues = this.actualConfigData[this.currentSalesChannelId];\r\n            const currentPaymentCard = this.getCurrentConfigCard();\r\n\r\n            if (currentPaymentCard?.elements) {\r\n                let actualConfigValues = {};\r\n                currentPaymentCard?.elements.forEach((element) => {\r\n                    if (element?.name) {\r\n                        let value = currentConfigValues[element.name];\r\n\r\n                        if (value === undefined) {\r\n                            const cleanFieldName = element.name.replace('BuckarooPayments.config.', '');\r\n                            value = currentConfigValues[cleanFieldName];\r\n                        }\r\n                        \r\n                        actualConfigValues[element.name] = value;\r\n                    }\r\n                });\r\n                return { [this.currentSalesChannelId]: actualConfigValues };\r\n            }\r\n\r\n            return this.actualConfigData;\r\n        }\r\n    }\r\n});\r\n","{% block buckaroo_payment_detail %}\r\n    <div class=\"buckaroo-payment-detail\">\r\n        \r\n        <sw-card positionIdentifier=\"bk-paylink\" :title=\"$tc('buckaroo-payment.paymentDetail.paylinkTitle')\" v-if=\"isPaylinkVisible\">\r\n\r\n            {{ $tc('buckaroo-payment.paymentDetail.paylinkDescription') }}\r\n            \r\n            <span v-if=\"paylink\"> <br>\r\n            {{ $tc('buckaroo-payment.paymentDetail.yourLink') }}: <a :href=\"paylink\">{{ paylink }}</a>\r\n            </span>\r\n\r\n            <sw-container columns=\"1fr 440px\" class=\"sw-order-detail__summary\">\r\n                <sw-description-list grid=\"265px 1fr\" class=\"sw-order-detail__summary-data\"><dt></dt> <dd>\r\n            \r\n                        <sw-button @click=\"createPaylink(orderId)\" :disabled=\"!isPaylinkAvailable\">\r\n                            {{ $tc('buckaroo-payment.paymentDetail.paylinkButton') }}\r\n                        </sw-button></dd>\r\n                </sw-description-list>\r\n            </sw-container>\r\n\r\n        </sw-card>\r\n\r\n         <sw-card positionIdentifier=\"bk-refund\" :title=\"$tc('buckaroo-payment.paymentDetail.refundTitle')\">\r\n            \r\n            {{ $tc('buckaroo-payment.orderItems.title') }}\r\n            <sw-data-grid :dataSource=\"orderItems\"\r\n                :columns=\"orderItemsColumns\"\r\n                :showActions=\"false\"\r\n                :showSelection=\"false\">\r\n\r\n                    <template #column-name=\"{ item }\">\r\n                        <sw-product-variant-info :showTooltip=\"false\" :variations=\"item.variations\">\r\n                            {{ item.name }}\r\n                        </sw-product-variant-info>\r\n                    </template>\r\n                    <template #column-quantity=\"{ item }\">\r\n                        <input class=\"bk-reund-qty\" type=\"number\" min=\"0\" :max=\"item.quantityMax\" v-model=\"item.quantity\" @input=\"recalculateOrderItems\" onkeydown=\"return event.keyCode !== 69\">\r\n                    </template>\r\n\r\n            </sw-data-grid>\r\n\r\n            <sw-container columns=\"1fr 440px\" class=\"sw-order-detail__summary\">\r\n                <sw-description-list grid=\"265px 1fr\" class=\"sw-order-detail__summary-data\">\r\n                        <dt>{{ $tc('buckaroo-payment.paymentDetail.amountTotalTitle') }}: </dt>\r\n                        <dd>{{ buckaroo_refund_amount }}  {{ currency }}</dd>\r\n                </sw-description-list>\r\n            </sw-container>\r\n                 \r\n            <sw-card-section divider=\"top\" secondary slim>\r\n                <sw-container columns=\"1fr 440px\"\r\n                              class=\"sw-order-detail__summary\">\r\n                </sw-container>\r\n\r\n                <sw-data-grid :dataSource=\"transactionsToRefund\"\r\n                    :columns=\"transactionsToRefundColumns\"\r\n                    :showHeader=\"false\"\r\n                    :showActions=\"false\"\r\n                    :showSelection=\"false\">\r\n\r\n                        <template #column-transaction_method=\"{ item }\">\r\n                                <span v-if=\"item.transaction_method == 'KbcPaymentButton'\">\r\n                                    Kbc\r\n                                </span>\r\n                                <span v-else>\r\n                                    {{ item.transaction_method }}\r\n                                </span>\r\n                        </template>\r\n\r\n                        <template #column-amount=\"{ item }\">\r\n                            <input type=\"number\" min=\"0\" :max=\"item.amountMax\" v-model=\"item.amount\"  @input=\"recalculateRefundItems\" onkeydown=\"return event.keyCode !== 69\">\r\n                        </template>\r\n\r\n                </sw-data-grid>\r\n\r\n                <sw-container v-if=\"!isAuthorized\" columns=\"1fr 440px\" class=\"sw-order-detail__summary\">\r\n                    <sw-description-list grid=\"265px 1fr\" class=\"sw-order-detail__summary-data\">\r\n                            <dt>{{ $tc('buckaroo-payment.paymentDetail.amountCustomRefundTitle') }}: </dt>\r\n                            <dd>\r\n                                <input id=\"buckaroo_custom_refund_enabled\" type=\"checkbox\"\r\n                                       @click=\"toggleCustomRefund()\">\r\n                                <input id=\"buckaroo_custom_refund_amount\" type=\"number\"\r\n                                       v-model=\"buckaroo_refund_total_amount\" disabled style=\"width:70px;\"> {{ currency }}\r\n                            </dd>\r\n                    </sw-description-list>\r\n                    <sw-description-list grid=\"265px 1fr\" class=\"sw-order-detail__summary-data\">\r\n                            <dt>{{ $tc('buckaroo-payment.paymentDetail.amountRefundTotalTitle') }}: </dt>\r\n                            <dd>{{ buckaroo_refund_total_amount }} {{ currency }}</dd>\r\n                    </sw-description-list>\r\n                </sw-container>\r\n                 \r\n            </sw-card-section>\r\n\r\n            <sw-container columns=\"1fr 440px\" class=\"sw-order-detail__summary\">\r\n                <sw-description-list grid=\"265px 1fr\" class=\"sw-order-detail__summary-data\"><dt></dt><dd>\r\n                    <sw-button @click=\"refundOrder(orderId, buckaroo_refund_amount)\" :disabled=\"!isRefundPossible || isAuthorized\">\r\n                    {{ $tc('buckaroo-payment.paymentDetail.buttonTitle') }}\r\n                    </sw-button></dd>\r\n                </sw-description-list>\r\n            </sw-container>\r\n\r\n         </sw-card>\r\n\r\n        <sw-card positionIdentifier=\"bk-pay-desc\" :title=\"$tc('buckaroo-payment.paymentDetail.payTitle')\">\r\n\r\n            {{ $tc('buckaroo-payment.paymentDetail.payDescription') }}\r\n\r\n            <sw-container columns=\"1fr 440px\" class=\"sw-order-detail__summary\">\r\n                <sw-description-list grid=\"265px 1fr\" class=\"sw-order-detail__summary-data\"><dt></dt><dd>\r\n                        <sw-button @click=\"captureOrder(orderId)\" :disabled=\"!isCapturePossible\">\r\n                            {{ $tc('buckaroo-payment.paymentDetail.payButton') }}\r\n                        </sw-button></dd>\r\n                </sw-description-list>\r\n            </sw-container>\r\n\r\n        </sw-card>\r\n\r\n         <sw-card positionIdentifier=\"bk-pay-transaction\" :title=\"$tc('buckaroo-payment.paymentDetail.transactionsTitle')\">\r\n            <sw-data-grid :dataSource=\"relatedResources\"\r\n                :columns=\"relatedResourceColumns\"\r\n                :showActions=\"false\"\r\n                :showSelection=\"false\">\r\n\r\n                    <template #column-transaction_method=\"{ item }\">\r\n                            <span v-if=\"item.transaction_method == 'KbcPaymentButton'\">\r\n                                Kbc\r\n                            </span>\r\n                            <span v-else>\r\n                                {{ item.transaction_method }}\r\n                            </span>\r\n                    </template>\r\n\r\n            </sw-data-grid>\r\n         </sw-card>\r\n\r\n\r\n        <sw-loader v-if=\"isLoading\">\r\n        </sw-loader>\r\n    </div>\r\n{% endblock %}","import template from './buckaroo-payment-detail.html.twig';\r\nimport './buckaroo-payment-detail.scss';\r\n\r\nconst { Component, Filter, Context } = Shopware;\r\nconst Criteria = Shopware.Data.Criteria;\r\n\r\nComponent.register('buckaroo-payment-detail', {\r\n    template,\r\n\r\n    inject: [\r\n        'repositoryFactory',\r\n        'BuckarooPaymentService',\r\n        'systemConfigApiService'\r\n    ],\r\n\r\n    data() {\r\n        return {\r\n            config: {},\r\n            buckaroo_refund_amount: '0',\r\n            buckaroo_refund_total_amount: '0',\r\n            currency: 'EUR',\r\n            isRefundPossible: true,\r\n            isCapturePossible: false,\r\n            isPaylinkAvailable: false,\r\n            isPaylinkVisible: false,\r\n            paylinkMessage: '',\r\n            paylink: '',\r\n            isLoading: false,\r\n            order: false,\r\n            buckarooTransactions: null,\r\n            orderItems: [],\r\n            transactionsToRefund: [],\r\n            relatedResources: [],\r\n            isAuthorized: false\r\n        };\r\n    },\r\n\r\n    computed: {\r\n        orderItemsColumns() {\r\n            return [\r\n            {\r\n                property: 'name',\r\n                label: this.$tc('buckaroo-payment.orderItems.types.name'),\r\n                allowResize: false,\r\n                primary: true,\r\n                inlineEdit: true,\r\n                multiLine: true,\r\n            },\r\n            {\r\n                property: 'quantity',\r\n                label: this.$tc('buckaroo-payment.orderItems.types.quantity'),\r\n                rawData: true,\r\n                align: 'right'\r\n            },\r\n            {\r\n                property: 'totalAmount',\r\n                label: this.$tc('buckaroo-payment.orderItems.types.totalAmount'),\r\n                rawData: true,\r\n                align: 'right'\r\n            }\r\n            ];\r\n        },\r\n\r\n        transactionsToRefundColumns() {\r\n            return [\r\n                {\r\n                    property: 'transaction_method',\r\n                    rawData: true\r\n            },{\r\n                property: 'amount',\r\n                rawData: true\r\n            }\r\n            ];\r\n        },\r\n\r\n        relatedResourceColumns() {\r\n            return [\r\n                {\r\n                    property: 'created_at',\r\n                    label: this.$tc('buckaroo-payment.transactionHistory.types.created_at'),\r\n                    rawData: true\r\n            },\r\n                {\r\n                    property: 'total',\r\n                    label: this.$tc('buckaroo-payment.transactionHistory.types.total'),\r\n                    rawData: true\r\n            },{\r\n                property: 'shipping_costs',\r\n                label: this.$tc('buckaroo-payment.transactionHistory.types.shipping_costs'),\r\n                rawData: true\r\n            },{\r\n                property: 'total_excluding_vat',\r\n                label: this.$tc('buckaroo-payment.transactionHistory.types.total_excluding_vat'),\r\n                rawData: true\r\n            },{\r\n                property: 'vat',\r\n                label: this.$tc('buckaroo-payment.transactionHistory.types.vat'),\r\n                rawData: true\r\n            },{\r\n                property: 'transaction_key',\r\n                label: this.$tc('buckaroo-payment.transactionHistory.types.transaction_key'),\r\n                rawData: true\r\n            },{\r\n                property: 'transaction_method',\r\n                label: this.$tc('buckaroo-payment.transactionHistory.types.transaction_method'),\r\n                rawData: true\r\n            },{\r\n                property: 'statuscode',\r\n                label: this.$tc('buckaroo-payment.transactionHistory.types.statuscode'),\r\n                rawData: true\r\n            }\r\n            ];\r\n        }\r\n    },\r\n\r\n    created() {\r\n        this.createdComponent();\r\n    },\r\n\r\n    methods: {\r\n        recalculateOrderItems() {\r\n            this.buckaroo_refund_amount = 0;\r\n            for (const key in this.orderItems) {\r\n                this.orderItems[key]['totalAmount'] = parseFloat(parseFloat(this.orderItems[key]['unitPrice']) * parseFloat(this.orderItems[key]['quantity'] || 0)).toFixed(2);\r\n                this.buckaroo_refund_amount = parseFloat(parseFloat(this.buckaroo_refund_amount) + parseFloat(this.orderItems[key]['totalAmount'])).toFixed(2);\r\n            }\r\n        },\r\n        recalculateRefundItems() {\r\n            this.buckaroo_refund_total_amount = 0;\r\n            for (const key in this.transactionsToRefund) {\r\n                if (this.transactionsToRefund[key]['amount']) {\r\n                    this.buckaroo_refund_total_amount = parseFloat(parseFloat(this.buckaroo_refund_total_amount) + parseFloat(this.transactionsToRefund[key]['amount'])).toFixed(2);\r\n                }\r\n            }\r\n        },\r\n\r\n        getCustomRefundEnabledEl() {\r\n            return document.getElementById('buckaroo_custom_refund_enabled');\r\n        },\r\n\r\n        getCustomRefundAmountEl() {\r\n            return document.getElementById('buckaroo_custom_refund_amount');\r\n        },\r\n\r\n        toggleCustomRefund() {\r\n            if (this.getCustomRefundEnabledEl() && this.getCustomRefundAmountEl()) {\r\n                this.getCustomRefundAmountEl().disabled = !this.getCustomRefundEnabledEl().checked;\r\n            }\r\n        },\r\n\r\n        getCustomRefundAmount() {\r\n            if (this.getCustomRefundEnabledEl() && this.getCustomRefundAmountEl() && this.getCustomRefundEnabledEl().checked) {\r\n                return this.getCustomRefundAmountEl().value;\r\n            }\r\n            return 0;\r\n        },\r\n\r\n        createdComponent() {\r\n            let that = this;\r\n            const orderId = this.$route.params.id;\r\n\r\n            this.systemConfigApiService.getValues('BuckarooPayments.config', null)\r\n            .then(values => {\r\n                this.config = values;\r\n            });\r\n\r\n            const orderRepository = this.repositoryFactory.create('order');\r\n            const orderCriteria = new Criteria(1, 1);\r\n\r\n            this.orderId = orderId;\r\n            orderCriteria.addAssociation('transactions.paymentMethod')\r\n                         .addAssociation('transactions');\r\n\r\n            orderCriteria.getAssociation('transactions').addSorting(Criteria.sort('createdAt'));\r\n\r\n            orderRepository.get(orderId, Context.api, orderCriteria).then((order) => {\r\n                that.checkedIsAuthorized(order);\r\n                that.isCapturePossible = order.transactions &&\r\n                order.transactions.last().paymentMethod &&\r\n                order.transactions.last().paymentMethod.customFields &&\r\n                order.transactions.last().paymentMethod.customFields.buckaroo_key &&\r\n                ['klarnakp', 'billink'].includes(order.transactions.last().paymentMethod.customFields.buckaroo_key.toLowerCase()) || that.isAfterpayCapturePossible(order);\r\n\r\n                that.isPaylinkVisible = that.isPaylinkAvailable = this.getConfigValue('paylinkEnabled') && order.stateMachineState && order.stateMachineState.technicalName && order.stateMachineState.technicalName == 'open' && order.transactions && order.transactions.last().stateMachineState.technicalName == 'open';\r\n            });\r\n\r\n            this.BuckarooPaymentService.getBuckarooTransaction(orderId)\r\n                .then((response) => {\r\n                    that.orderItems = [];\r\n                    that.transactionsToRefund = [];\r\n                    that.relatedResources = [];\r\n\r\n                    this.$emit('loading-change', false);\r\n                    response.orderItems.forEach((element) => {\r\n                        that.orderItems.push({\r\n                            id: element.id,\r\n                            name: element.name,\r\n                            quantity: element.quantity,\r\n                            quantityMax: element.quantity,\r\n                            unitPrice: element.unitPrice.value,\r\n                            totalAmount: element.totalAmount.value,\r\n                            variations: element.variations || [],\r\n                        });\r\n                    })\r\n                    that.recalculateOrderItems();\r\n\r\n                    response.transactionsToRefund.forEach((element) => {\r\n                        that.transactionsToRefund.push({\r\n                            id: element.id,\r\n                            transactions: element.transactions,\r\n                            amount: element.total,\r\n                            amountMax: element.total,\r\n                            currency: element.currency,\r\n                            transaction_method: element.transaction_method,\r\n                            logo: element.transaction_method ? element.logo : null\r\n                        });\r\n                        that.currency = element.currency;\r\n                    })\r\n                    that.recalculateRefundItems();\r\n\r\n                    response.transactions.forEach((element) => {\r\n                        that.relatedResources.push({\r\n                            id: element.id,\r\n                            transaction_key: element.transaction,\r\n                            total: element.total,\r\n                            total_excluding_vat: element.total_excluding_vat,\r\n                            shipping_costs: element.shipping_costs,\r\n                            vat: element.vat,\r\n                            transaction_method: element.transaction_method,\r\n                            logo: element.transaction_method ? element.logo : null,\r\n                            created_at: element.created_at,\r\n                            statuscode: element.statuscode\r\n                        });\r\n                    })\r\n\r\n                })\r\n                .catch((errorResponse) => {\r\n                    console.log('errorResponse', errorResponse);\r\n                });\r\n\r\n        },\r\n\r\n        isAfterpayCapturePossible(order) {\r\n            return order.customFields.buckaroo_is_authorize === true;\r\n        },\r\n\r\n        checkedIsAuthorized(order) {\r\n            this.isAuthorized = order?.transactions?.last()?.stateMachineState?.technicalName === \"authorized\";\r\n        },\r\n\r\n        refundOrder(transaction, amount) {\r\n            let that = this;\r\n            that.isRefundPossible = false;\r\n            this.BuckarooPaymentService.refundPayment(transaction, this.transactionsToRefund, this.orderItems, this.getCustomRefundAmount())\r\n                .then((response) => {\r\n                    for (const key in response) {\r\n                        if (response[key].status) {\r\n                            this.$store.dispatch('notification/createNotification', {\r\n                                variant: 'success',\r\n                                title: that.$tc('buckaroo-payment.settingsForm.titleSuccess'),\r\n                                message: that.$tc(response[key].message) + response[key].amount\r\n                            });\r\n                        } else {\r\n                            this.$store.dispatch('notification/createNotification', {\r\n                                variant: 'error',\r\n                                title: that.$tc('buckaroo-payment.settingsForm.titleError'),\r\n                                message: that.$tc(response[key].message)\r\n                            });\r\n                        }\r\n                    }\r\n                    that.isRefundPossible = true;\r\n                    this.createdComponent();\r\n                })\r\n                .catch((errorResponse) => {\r\n                    this.$store.dispatch('notification/createNotification', {\r\n                        variant: 'error',\r\n                        title: this.$tc('buckaroo-payment.settingsForm.titleError'),\r\n                        message: errorResponse.response.data.message\r\n                    });\r\n                    that.isRefundPossible = true;\r\n                });\r\n        },\r\n\r\n        createPaylink(transaction) {\r\n            let that = this;\r\n            that.isPaylinkAvailable = false;\r\n            this.BuckarooPaymentService.createPaylink(transaction, this.transactionsToRefund, this.orderItems)\r\n                .then((response) => {\r\n                    if (response.status) {\r\n                        that.paylinkMessage = that.$tc(response.message) + response.paylinkhref;\r\n                        that.paylink = response.paylink;\r\n                        this.$store.dispatch('notification/createNotification', {\r\n                            variant: 'success',\r\n                            title: that.$tc('buckaroo-payment.settingsForm.titleSuccess'),\r\n                            message: that.paylinkMessage\r\n                        });\r\n                    } else {\r\n                        this.$store.dispatch('notification/createNotification', {\r\n                            variant: 'error',\r\n                            title: that.$tc('buckaroo-payment.settingsForm.titleError'),\r\n                            message: that.$tc(response.message)\r\n                        });\r\n                    }\r\n                    that.isPaylinkAvailable = true;\r\n                })\r\n                .catch((errorResponse) => {\r\n                    this.$store.dispatch('notification/createNotification', {\r\n                        variant: 'error',\r\n                        title: this.$tc('buckaroo-payment.settingsForm.titleError'),\r\n                        message: errorResponse.response.data.message\r\n                    });\r\n                    that.isPaylinkAvailable = true;\r\n                });\r\n        },\r\n\r\n        getConfigValue(field) {\r\n            return this.config[`BuckarooPayments.config.${field}`];\r\n        },\r\n\r\n        captureOrder(transaction) {\r\n            let that = this;\r\n            that.isCapturePossible = false;\r\n            this.BuckarooPaymentService.captureOrder(transaction, this.transactionsToRefund, this.orderItems)\r\n                .then((response) => {\r\n                    if (response.status) {\r\n                        this.$store.dispatch('notification/createNotification', {\r\n                            variant: 'success',\r\n                            title: that.$tc('buckaroo-payment.settingsForm.titleSuccess'),\r\n                            message: response.message\r\n                        });\r\n                    } else {\r\n                        this.$store.dispatch('notification/createNotification', {\r\n                            variant: 'error',\r\n                            title: that.$tc('buckaroo-payment.settingsForm.titleError'),\r\n                            message: response.message\r\n                        });\r\n                    }\r\n                    that.isCapturePossible = true;\r\n                    this.createdComponent();\r\n                })\r\n                .catch((errorResponse) => {\r\n                    this.$store.dispatch('notification/createNotification', {\r\n                        variant: 'error',\r\n                        title: this.$tc('buckaroo-payment.settingsForm.titleError'),\r\n                        message: that.$tc(errorResponse.response.data.message)\r\n                    });\r\n                    that.isCapturePossible = true;\r\n                });\r\n        }\r\n    }\r\n});\r\n","\r\nconst { Component } = Shopware;\r\n\r\nComponent.extend('buckaroo-payment-config', 'sw-extension-config', {\r\n});","const { Module } = Shopware;\r\n\r\nimport './extension/sw-order';\r\nimport './extension/sw-order-detail-base';\r\nimport './extension/sw-order-user-card';\r\nimport './extension/sw-system-config';\r\nimport './page/buckaroo-payment-detail';\r\n\r\nimport './page/buckaroo-payment-config';\r\n\r\nimport nlNL from './snippet/nl-NL.json';\r\nimport deDE from './snippet/de-DE.json';\r\nimport enGB from './snippet/en-GB.json';\r\n\r\nModule.register('buckaroo-payment', {\r\n    type: 'plugin',\r\n    name: 'BuckarooPayment',\r\n    title: 'buckaroo-payment.general.title',\r\n    description: 'buckaroo-payment.general.description',\r\n    version: '1.0.0',\r\n    targetVersion: '1.0.0',\r\n    color: '#000000',\r\n    icon: 'default-action-settings',\r\n\r\n    snippets: {\r\n        'nl-NL': nlNL,\r\n        'de-DE': deDE,\r\n        'en-GB': enGB\r\n    },\r\n\r\n    routeMiddleware(next, currentRoute) {\r\n        if (currentRoute.name === 'sw.order.detail') {\r\n            currentRoute.children.push({\r\n                component: 'buckaroo-payment-detail',\r\n                name: 'buckaroo.payment.detail',\r\n                isChildren: true,\r\n                path: '/sw/order/buckaroo/detail/:id'\r\n            });\r\n        }\r\n        next(currentRoute);\r\n    },\r\n\r\n    routes: {\r\n        config: {\r\n            component: 'buckaroo-payment-config',\r\n            path: ':namespace/payment/:paymentCode',\r\n            name: 'buckaroo.config.payment',\r\n            meta: {\r\n                parentPath:'sw.extension.config'\r\n            },\r\n            props: {\r\n                default(route) {\r\n                    return { namespace: route.params.namespace };\r\n                },\r\n            },\r\n        }\r\n    }\r\n});\r\n","const { ApiService } = Shopware.Classes;\r\n\r\nclass BuckarooPaymentService extends ApiService {\r\n    constructor(httpClient, loginService, apiEndpoint = 'buckaroo')\r\n    {\r\n        super(httpClient, loginService, apiEndpoint);\r\n    }\r\n\r\n    getBasicHeaders() {\r\n        if (this.loginService && typeof this.loginService.getToken === 'function') {\r\n            return super.getBasicHeaders();\r\n        }\r\n\r\n        return {\r\n            'Content-Type': 'application/json',\r\n            'Accept': 'application/json'\r\n        };\r\n    }\r\n\r\n    getBuckarooTransaction(transaction)\r\n    {\r\n        const apiRoute = `_action/${this.getApiBasePath()}/getBuckarooTransaction`;\r\n\r\n        return this.httpClient.post(\r\n            apiRoute,\r\n            {\r\n                transaction: transaction\r\n            },\r\n            {\r\n                headers: this.getBasicHeaders()\r\n            }\r\n        ).then((response) => {\r\n            return ApiService.handleResponse(response);\r\n        });\r\n    }\r\n\r\n    refundPayment(transaction, transactionsToRefund, orderItems, customRefundAmount)\r\n    {\r\n        const apiRoute = `_action/${this.getApiBasePath()}/refund`;\r\n\r\n        return this.httpClient.post(\r\n            apiRoute,\r\n            {\r\n                transaction: transaction,\r\n                transactionsToRefund: transactionsToRefund,\r\n                orderItems: orderItems,\r\n                customRefundAmount: customRefundAmount\r\n            },\r\n            {\r\n                headers: this.getBasicHeaders()\r\n            }\r\n        ).then((response) => {\r\n            return ApiService.handleResponse(response);\r\n        });\r\n    }\r\n\r\n    captureOrder(transaction)\r\n    {\r\n        const apiRoute = `_action/${this.getApiBasePath()}/capture`;\r\n\r\n        return this.httpClient.post(\r\n            apiRoute,\r\n            {\r\n                transaction: transaction\r\n            },\r\n            {\r\n                headers: this.getBasicHeaders()\r\n            }\r\n        ).then((response) => {\r\n            return ApiService.handleResponse(response);\r\n        });\r\n    }\r\n\r\n    createPaylink(transaction)\r\n    {\r\n        const apiRoute = `_action/${this.getApiBasePath()}/paylink`;\r\n\r\n        return this.httpClient.post(\r\n            apiRoute,\r\n            {\r\n                transaction: transaction\r\n            },\r\n            {\r\n                headers: this.getBasicHeaders()\r\n            }\r\n        ).then((response) => {\r\n            return ApiService.handleResponse(response);\r\n        });\r\n    }\r\n\r\n}\r\n\r\nShopware.Service().register('BuckarooPaymentService', () => {\r\n    const initContainer = Shopware.Application.getContainer('init');\r\n    return new BuckarooPaymentService(initContainer.httpClient, initContainer.loginService || null);\r\n});\r\n\r\n","const { ApiService } = Shopware.Classes;\r\n\r\nclass BuckarooPaymentSettingsService extends ApiService {\r\n    constructor(httpClient, loginService, apiEndpoint = 'buckaroo')\r\n    {\r\n        super(httpClient, loginService, apiEndpoint);\r\n    }\r\n\r\n    getBasicHeaders() {\r\n        if (this.loginService && typeof this.loginService.getToken === 'function') {\r\n            return super.getBasicHeaders();\r\n        }\r\n        return {\r\n            'Content-Type': 'application/json',\r\n            'Accept': 'application/json'\r\n        };\r\n    }\r\n\r\n    getSupportVersion()\r\n    {\r\n        const apiRoute = `_action/${this.getApiBasePath()}/version`;\r\n\r\n        return this.httpClient.post(\r\n            apiRoute,\r\n            {\r\n            },\r\n            {\r\n                headers: this.getBasicHeaders()\r\n            }\r\n        ).then((response) => {\r\n            return ApiService.handleResponse(response);\r\n        });\r\n    }\r\n\r\n    getTaxes()\r\n    {\r\n        const apiRoute = `_action/${this.getApiBasePath()}/taxes`;\r\n\r\n        return this.httpClient.post(\r\n            apiRoute,\r\n            {\r\n            },\r\n            {\r\n                headers: this.getBasicHeaders()\r\n            }\r\n        ).then((response) => {\r\n            return ApiService.handleResponse(response);\r\n        });\r\n    }\r\n\r\n    getIn3Icons()\r\n    {\r\n        const apiRoute = `_action/${this.getApiBasePath()}/in3/logos`;\r\n\r\n        return this.httpClient.post(\r\n            apiRoute,\r\n            {\r\n            },\r\n            {\r\n                headers: this.getBasicHeaders()\r\n            }\r\n        ).then((response) => {\r\n            return ApiService.handleResponse(response);\r\n        });\r\n    }\r\n\r\n    getApiTest(websiteKeyId, secretKeyId, currentSalesChannelId)\r\n    {\r\n        const apiRoute = `_action/${this.getApiBasePath()}/getBuckarooApiTest`;\r\n\r\n        return this.httpClient.post(\r\n            apiRoute,\r\n            {\r\n                websiteKeyId: websiteKeyId,\r\n                secretKeyId: secretKeyId,\r\n                saleChannelId: currentSalesChannelId\r\n            },\r\n            {\r\n                headers: this.getBasicHeaders()\r\n            }\r\n        ).then((response) => {\r\n            return ApiService.handleResponse(response);\r\n        });\r\n    }\r\n}\r\n\r\nShopware.Service().register('BuckarooPaymentSettingsService', () => {\r\n    const initContainer = Shopware.Application.getContainer('init');\r\n    // Ensure we use the global loginService which always exists in admin\r\n    const loginService = Shopware.Service('loginService');\r\n    return new BuckarooPaymentSettingsService(initContainer.httpClient, loginService);\r\n});\r\n\r\n","<div>\r\n    <a style=\"margin-bottom:10px;\" @click=\"showTaxes = !showTaxes\">{{$tc('buckaroo-payment.afterpay.setup')}}</a>\r\n    <div v-if=\"showTaxes\" style=\"padding: 10px;background: rgb(246 246 246); margin-bottom:10px;\">\r\n        <div class=\"tax\" v-for=\"tax in taxes\">\r\n            <sw-select-field\r\n            :label=\"tax.name\"\r\n            label-property=\"name\"\r\n            value-property=\"id\"\r\n            :options=\"afterpayTaxes\"\r\n            @change=\"(value) => setTaxAssociation(tax.id, value)\"\r\n            @input=\"(value) => setTaxAssociation(tax.id, value)\"\r\n            @update:value=\"(value) => setTaxAssociation(tax.id, value)\"\r\n            :value=\"getSelectValue(tax.id)\"\r\n            ></sw-select-field>\r\n        </div>\r\n    </div>\r\n</div>","const { Component } = Shopware;\r\n\r\nimport template from './buckaroo-afterpay-old-tax.html.twig';\r\n\r\nComponent.register('buckaroo-afterpay-old-tax', {\r\n    template,\r\n\r\n    inject: ['BuckarooPaymentSettingsService'],\r\n\r\n    data() {\r\n        return {\r\n            taxes: [],\r\n            showTaxes: false,\r\n            afterpayTaxes: [\r\n                { name: this.$tc('buckaroo-payment.afterpay.hightTaxes'), id: 1 },\r\n                { name: this.$tc('buckaroo-payment.afterpay.middleTaxes'), id: 5 },\r\n                { name: this.$tc('buckaroo-payment.afterpay.lowTaxes'), id: 2 },\r\n                { name: this.$tc('buckaroo-payment.afterpay.zeroTaxes'), id: 3 },\r\n                { name: this.$tc('buckaroo-payment.afterpay.noTaxes'), id: 4 },\r\n            ],\r\n            taxAssociation: {}\r\n        };\r\n    },\r\n\r\n    model: {\r\n        prop: 'value',\r\n        event: 'change',\r\n    },\r\n\r\n    computed: {\r\n\r\n    },\r\n    props: {\r\n        name: {\r\n            type: String,\r\n            required: true,\r\n            default: ''\r\n                },\r\n                value: {\r\n                    type: Object,\r\n                    required: false,\r\n                    default() {\r\n                        return {}\r\n                    }\r\n                }\r\n                },\r\n\r\n\r\n                created() {\r\n                    this.BuckarooPaymentSettingsService.getTaxes()\r\n                        .then((result) => {\r\n                            this.taxes = result.taxes.map((tax) => {\r\n                                return {\r\n                                    id: tax.id,\r\n                                    name: tax.name\r\n                                };\r\n                            })\r\n                        });\r\n\r\n                },\r\n                methods: {\r\n                    setTaxAssociation(taxId, eventOrValue) {\r\n                        \r\n                        try {\r\n                            let actualValue = eventOrValue;\r\n                            \r\n                            if (eventOrValue && typeof eventOrValue === 'object') {\r\n                                if (eventOrValue.target) {\r\n                                    actualValue = eventOrValue.target.value;\r\n                                } else if (eventOrValue.hasOwnProperty('value')) {\r\n                                    actualValue = eventOrValue.value;\r\n                                } else if (eventOrValue.hasOwnProperty('id')) {\r\n                                    actualValue = eventOrValue.id;\r\n                                }\r\n                            }\r\n                            this.taxAssociation[taxId] = actualValue;\r\n                            this.$emit('change', {...this.value, ...this.taxAssociation});\r\n                            \r\n                        } catch (error) {\r\n                            console.error('Error in setTaxAssociation:', error);\r\n                        }\r\n                    },\r\n                    getSelectValue(taxId) {\r\n                        if (this.value[taxId]) {\r\n                            return this.value[taxId];\r\n                        }\r\n                        return;\r\n                    }\r\n                }\r\n                });\r\n","<div>\r\n    <buckaroo-config-card\r\n            :card=\"mainCard\"\r\n            :methods=\"elementMethods\"\r\n            :isNotDefaultSalesChannel=\"isNotDefaultSalesChannel\"\r\n            :value=\"value\"\r\n            :currentSalesChannelId=\"currentSalesChannelId\"\r\n            @input=\"onInput\"\r\n            v-if=\"mainCard && value\">\r\n    </buckaroo-config-card>\r\n\r\n    <buckaroo-payment-list\r\n        v-if=\"selectedCard === 'general'\"\r\n        :configSettings=\"configSettings\"\r\n        :currentSalesChannelId=\"currentSalesChannelId\"\r\n        :value=\"value\"\r\n        @input=\"onInput\">\r\n    </buckaroo-payment-list>\r\n</div>","const { Component } = Shopware;\r\n\r\nimport template from \"./buckaroo-main-config.html.twig\";\r\n\r\nComponent.register(\"buckaroo-main-config\", {\r\n    template,\r\n    props: {\r\n        configSettings: {\r\n            type: Array,\r\n            required: false,\r\n            default: () => []\r\n        },\r\n        value: {\r\n            type: Object,\r\n            required: false,\r\n            default: () => ({})\r\n        },\r\n        elementMethods: {\r\n            type: Object,\r\n            required: false,\r\n            default: () => ({})\r\n        },\r\n        isNotDefaultSalesChannel: {\r\n            type: Boolean,\r\n            required: false,\r\n            default: false\r\n        },\r\n        currentSalesChannelId: {\r\n            type: String,\r\n            required: false,\r\n            default: null\r\n        }\r\n    },\r\n    emits: ['input'],\r\n\r\n    model: {\r\n        prop: 'value',\r\n        event: 'input'\r\n    },\r\n\r\n\r\n    data() {\r\n        return {\r\n            selectedCard: this.$route.params?.paymentCode || 'general'\r\n        }\r\n    },\r\n\r\n    watch: {\r\n        value: {\r\n            handler(newVal, oldVal) {\r\n                this.$nextTick(() => {\r\n                    this.$forceUpdate();\r\n                });\r\n            },\r\n            deep: true,\r\n            immediate: true\r\n        },\r\n        $route(to) {\r\n            if (to.params?.paymentCode) {\r\n                this.selectedCard = to.params.paymentCode;\r\n            }\r\n        }\r\n    },\r\n\r\n    computed: {\r\n        mainCard() {\r\n            const card = this.configSettings.filter((card) => card.name === this.selectedCard)?.pop();\r\n            return card;\r\n        }\r\n    },\r\n\r\n    methods: {\r\n        onInput(value) {\r\n            this.$emit('input', value);\r\n        }\r\n    }\r\n\r\n})","{% block buckaroo_config_card %}\r\n    <sw-card position-identifier=\"xxsw-system-config-content\" v-if=\"card\">\r\n        <template #title>\r\n            {{ getInlineSnippet(card.title) || 'Configuration' }}\r\n        </template>\r\n\r\n        <div v-for=\"element in (card.elements || [])\" :key=\"element.name\">\r\n            <div v-if=\"canShow(element)\">\r\n                <slot name=\"card-element\" v-bind=\"{ element: getElementBind(element), config: value, card }\">\r\n                    <sw-inherit-wrapper\r\n                            :value=\"getValueForName(element.name.replace('BuckarooPayments.config.', ''))\"\r\n                            v-bind=\"getInheritWrapperBind(element)\"\r\n                            :has-parent=\"isNotDefaultSalesChannel\"\r\n                            :inherited-value=\"getInheritedValue(element)\"\r\n                            :class=\"'sw-system-config--field-' + kebabCase(getElementBind(element).name)\"\r\n                            @input=\"onFieldInput(element.name, $event)\"\r\n                    >\r\n                        <template #content=\"props\">\r\n                            <sw-form-field-renderer\r\n                                    v-bind=\"getElementBind(element, props)\"\r\n                                    :key=\"props.isInheritField + props.isInherited\"\r\n                                    :disabled=\"props.isInherited\"\r\n                                    :value=\"props.currentValue\"\r\n                                    :error=\"getFieldError(element.name)\"\r\n                                    @input=\"(value) => { props.updateCurrentValue(value); onFieldInput(element.name, value); }\"\r\n                                    @change=\"(value) => { props.updateCurrentValue(value); onFieldInput(element.name, value); }\"\r\n                                    @update:value=\"(value) => { props.updateCurrentValue(value); onFieldInput(element.name, value); }\"\r\n                            />\r\n                        </template>\r\n                    </sw-inherit-wrapper>\r\n                </slot>\r\n            </div>\r\n        </div>\r\n\r\n        <buckaroo-test-credentials\r\n                v-if=\"canShowCredentialTester\"\r\n                :config=\"value\"\r\n                :currentSalesChannelId=\"currentSalesChannelId\"\r\n        />\r\n    </sw-card>\r\n{% endblock %}\r\n","import template from './buckaroo-config-card.html.twig';\r\n\r\nconst { Component } = Shopware;\r\n\r\nComponent.register('buckaroo-config-card', {\r\n    template,\r\n\r\n    mounted() {\r\n        this.$nextTick(() => {\r\n            this.$forceUpdate();\r\n        });\r\n    },\r\n    watch: {\r\n        value: {\r\n            handler() {\r\n                this.$nextTick(() => {\r\n                    this.$forceUpdate();\r\n                });\r\n            },\r\n            deep: true,\r\n            immediate: true\r\n        },\r\n        \r\n        currentSalesChannelId: {\r\n            handler(newChannelId, oldChannelId) {\r\n                if (newChannelId !== oldChannelId) {\r\n                    \r\n                    this.$nextTick(() => {\r\n                        this.$forceUpdate();\r\n                    });\r\n                }\r\n            },\r\n            immediate: false\r\n        }\r\n    },\r\n    computed: {\r\n        canShowCredentialTester() {\r\n            const key = this.getValueForName('websiteKey');\r\n            const secretKey = this.getValueForName('secretKey');\r\n            const isGeneralConfig = this.card?.name === 'general';\r\n            \r\n            if (!isGeneralConfig) {\r\n                return false;\r\n            }\r\n\r\n            const hasWebsiteKey = key !== undefined && key !== null && key !== '';\r\n            const hasSecretKey = secretKey !== undefined && secretKey !== null && secretKey !== '';\r\n            const canShow = hasWebsiteKey || hasSecretKey;\r\n            return canShow;\r\n        },\r\n        \r\n        hasValidConfigData() {\r\n            return this.value && typeof this.value === 'object' && Object.keys(this.value).length > 0;\r\n        },\r\n        \r\n       reactiveValue() {\r\n            return this.value;\r\n        }\r\n    },\r\n\r\n    emits: ['input'],\r\n\r\n    model: {\r\n        prop: 'value',\r\n        event: 'input'\r\n    },\r\n\r\n    props: {\r\n        card: {\r\n            type: Object,\r\n            required: false,\r\n            default: () => ({ elements: [] })\r\n        },\r\n        methods: {\r\n            type: Object,\r\n            required: true,\r\n        },\r\n        isNotDefaultSalesChannel: {\r\n            type: Boolean,\r\n            required: true,\r\n        },\r\n        currentSalesChannelId: {\r\n            type: String,\r\n            required: true,\r\n        },\r\n        value: {\r\n            type: Object,\r\n            required: false,\r\n            default: () => ({})\r\n        },\r\n    },\r\n\r\n    methods: {\r\n        getElementBind(element, props = {}) {\r\n            if (!this.methods || !this.methods.getElementBind) {\r\n                return {\r\n                    name: element.name,\r\n                    type: element.type || 'text',\r\n                    config: element.config || {},\r\n                    value: this.getValueForName(element.name.replace('BuckarooPayments.config.', ''))\r\n                };\r\n            }\r\n            \r\n            const baseBinding = this.methods.getElementBind(element, props);\r\n            \r\n            const fieldName = element.name.replace('BuckarooPayments.config.', '');\r\n            const currentValue = this.getValueForName(fieldName);\r\n            \r\n            baseBinding.value = currentValue;\r\n\r\n            \r\n            return baseBinding;\r\n        },\r\n\r\n        getInheritWrapperBind(element) {\r\n            if (!this.methods || !this.methods.getInheritWrapperBind) {\r\n                const fieldName = element.name.replace('BuckarooPayments.config.', '');\r\n                return {\r\n                    name: element.name,\r\n                    currentValue: this.getValueForName(fieldName)\r\n                };\r\n            }\r\n            \r\n            const baseBinding = this.methods.getInheritWrapperBind(element);\r\n            const fieldName = element.name.replace('BuckarooPayments.config.', '');\r\n            const currentValue = this.getValueForName(fieldName);\r\n\r\n            baseBinding.currentValue = currentValue;\r\n\r\n            \r\n            return baseBinding;\r\n        },\r\n\r\n        getFieldError(name) {\r\n            if (!this.methods || !this.methods.getFieldError) {\r\n                return null;\r\n            }\r\n            return this.methods.getFieldError(name);\r\n        },\r\n\r\n        kebabCase(string) {\r\n            if (!this.methods || !this.methods.kebabCase) {\r\n                return string ? string.toLowerCase().replace(/[A-Z]/g, '-$&').replace(/^-/, '') : '';\r\n            }\r\n            return this.methods.kebabCase(string);\r\n        },\r\n\r\n        getInlineSnippet(title) {\r\n            try {\r\n                if (typeof title === 'object' && title !== null) {\r\n                    const locale = this.$i18n?.locale || 'en-GB';\r\n                    \r\n                    if (title[locale]) {\r\n                        return title[locale];\r\n                    }\r\n                    \r\n                    if (title['en-GB']) {\r\n                        return title['en-GB'];\r\n                    }\r\n                    const firstKey = Object.keys(title)[0];\r\n                    if (firstKey && title[firstKey]) {\r\n                        return title[firstKey];\r\n                    }\r\n                    \r\n                    return JSON.stringify(title);\r\n                }\r\n                \r\n                if (typeof title === 'string') {\r\n                    if (this.$t && typeof this.$t === 'function') {\r\n                        return this.$t(title);\r\n                    }\r\n                    return title;\r\n                }\r\n                return String(title);\r\n                \r\n            } catch (error) {\r\n                console.warn('Translation error for:', title, error);\r\n                return typeof title === 'object' ? JSON.stringify(title) : String(title);\r\n            }\r\n        },\r\n\r\n        getInheritedValue(element) {\r\n            if (!this.methods || !this.methods.getInheritedValue) {\r\n                return null;\r\n            }\r\n            return this.methods.getInheritedValue(element);\r\n        },\r\n\r\n        getValueForName(name) {\r\n            const currentValue = this.reactiveValue;\r\n            \r\n            if (!currentValue || typeof currentValue !== 'object') {\r\n                return null;\r\n            }\r\n\r\n            let val = undefined;\r\n\r\n            const keyVariations = [\r\n                `BuckarooPayments.config.${name}`, // Full prefixed key\r\n                name.toLowerCase(),\r\n                name.charAt(0).toLowerCase() + name.slice(1),\r\n                name.charAt(0).toUpperCase() + name.slice(1)\r\n            ];\r\n\r\n            for (const key of keyVariations) {\r\n                if (currentValue[key] !== undefined) {\r\n                    val = currentValue[key];\r\n                    break;\r\n                }\r\n            }\r\n\r\n            if (val === undefined && currentValue['BuckarooPayments.config'] && typeof currentValue['BuckarooPayments.config'] === 'object') {\r\n                for (const key of keyVariations) {\r\n                    if (currentValue['BuckarooPayments.config'][key] !== undefined) {\r\n                        val = currentValue['BuckarooPayments.config'][key];\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (val && typeof val === 'object' && val.hasOwnProperty('_value')) {\r\n                val = val._value;\r\n            }\r\n            return val;\r\n        },\r\n\r\n        canShow(element) {\r\n            if (!element || !element.name) {\r\n                return false;\r\n            }\r\n            \r\n            const name = element.name.replace('BuckarooPayments.config.', '');\r\n\r\n            const advancedToggleFields = [\r\n                'orderStatus',\r\n                'paymentSuccesStatus',\r\n                'automaticallyCloseOpenOrders',\r\n                'sendInvoiceEmail'\r\n            ];\r\n            if (advancedToggleFields.includes(name)) {\r\n                const advancedConfig = this.getValueForName('advancedConfiguration');\r\n                return Boolean(advancedConfig);\r\n            }\r\n\r\n            if (name === 'idealprocessingRenderMode') {\r\n                return Boolean(this.getValueForName('idealprocessingShowissuers'));\r\n            }\r\n\r\n            if (name === 'idealRenderMode') {\r\n                return Boolean(this.getValueForName('idealShowissuers'));\r\n            }\r\n\r\n            const idealFastCheckoutFields = [\r\n                'idealFastCheckoutEnabled',\r\n                'idealFastCheckoutVisibility',\r\n                'idealFastCheckoutLogoScheme'\r\n            ];\r\n            if (idealFastCheckoutFields.includes(name)) {\r\n                return Boolean(this.getValueForName('idealFastCheckout'));\r\n            }\r\n\r\n            if (name === 'afterpayPaymentstatus') {\r\n                return Boolean(this.getValueForName('afterpayCaptureonshippent'));\r\n            }\r\n\r\n            if (name === 'afterpayOldtax') {\r\n                return Boolean(this.getValueForName('afterpayEnabledold'));\r\n            }\r\n\r\n            return true;\r\n        },\r\n\r\n        onInput(value) {\r\n            this.$emit('input', value);\r\n        },\r\n        onFieldInput(fieldName, eventOrValue) {\r\n\r\n            try {\r\n                let actualValue = eventOrValue;\r\n                \r\n                if (eventOrValue && typeof eventOrValue === 'object') {\r\n                    if (eventOrValue.target) {\r\n                        const target = eventOrValue.target;\r\n\r\n                        if (target.type === 'checkbox' || target.type === 'radio') {\r\n                            actualValue = target.checked;\r\n                        } else if (target.tagName === 'SELECT' || target.type === 'select-one' || target.type === 'select-multiple') {\r\n                            if (target.multiple) {\r\n                                actualValue = Array.from(target.selectedOptions).map(option => option.value);\r\n                            } else {\r\n                                actualValue = target.value;\r\n                            }\r\n                        } else {\r\n                            actualValue = target.value;\r\n                        }\r\n                    } else if (eventOrValue.hasOwnProperty('value')) {\r\n                        actualValue = eventOrValue.value;\r\n                    } else if (eventOrValue.hasOwnProperty('id') && eventOrValue.hasOwnProperty('name')) {\r\n                        actualValue = eventOrValue.id;\r\n                    } else if (Array.isArray(eventOrValue)) {\r\n                        const totalCharacters = eventOrValue.filter(item => typeof item === 'string' && item.length === 1).length;\r\n                        const hasCommas = eventOrValue.some(item => item === ',');\r\n                        const hasLongStrings = eventOrValue.some(item => typeof item === 'string' && item.length > 1);\r\n\r\n                        const isCharacterArray = totalCharacters > 10 && hasCommas;\r\n\r\n                        \r\n                        if (isCharacterArray) {\r\n                            const correctValues = eventOrValue.filter(item => typeof item === 'string' && item.length > 1);\r\n                            const characterPart = eventOrValue.filter(item => typeof item === 'string' && item.length === 1);\r\n                            const rejoined = characterPart.join('');\r\n                            \r\n                            let splitValues = [];\r\n                            if (rejoined.includes(',')) {\r\n                                splitValues = rejoined.split(',').map(item => item.trim()).filter(item => item.length > 0);\r\n                            } else if (rejoined.length > 0) {\r\n                                splitValues = [rejoined];\r\n                            }\r\n\r\n                            actualValue = [...splitValues, ...correctValues].filter(item => item && item.length > 0);\r\n                        } else {\r\n                            actualValue = eventOrValue\r\n                                .filter(item => {\r\n                                    if (item === null || item === undefined || item === '') {\r\n                                        return false;\r\n                                    }\r\n\r\n                                    if (typeof item === 'string' && item.length === 1) {\r\n                                        return false;\r\n                                    }\r\n\r\n                                    if (typeof item === 'string' && (item.startsWith('+') || /^\\d+$/.test(item))) {\r\n\r\n                                        return false;\r\n                                    }\r\n                                    \r\n                                    return true;\r\n                                })\r\n                                .map(item => {\r\n                                    if (typeof item === 'object' && item !== null) {\r\n                                        let extractedValue = item.id || item.value || item.code || item.key || item;\r\n                                        return extractedValue;\r\n                                    }\r\n                                    return item;\r\n                                });\r\n                        }\r\n\r\n                    } else {\r\n                        const possibleKeys = ['id', 'value', 'key', 'code'];\r\n                        for (const key of possibleKeys) {\r\n                            if (eventOrValue[key] !== undefined) {\r\n                                actualValue = eventOrValue[key];\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n                } else if (typeof eventOrValue === 'boolean') {\r\n                    actualValue = eventOrValue;\r\n                } else if (typeof eventOrValue === 'string' || typeof eventOrValue === 'number') {\r\n                    actualValue = eventOrValue;\r\n                }\r\n\r\n                if (actualValue === \"on\") {\r\n                    actualValue = true;\r\n                } else if (actualValue === \"off\") {\r\n                    actualValue = false;\r\n                }\r\n                const cleanFieldName = fieldName.replace('BuckarooPayments.config.', '');\r\n                const updatedValue = { ...this.value };\r\n\r\n                updatedValue[cleanFieldName] = actualValue;\r\n                updatedValue[fieldName] = actualValue;\r\n\r\n                this.$emit('input', updatedValue);\r\n                \r\n            } catch (error) {\r\n                console.error('Error in onFieldInput:', error);\r\n                console.error('Error details:', error.stack);\r\n            }\r\n        }\r\n    }\r\n});\r\n","<sw-card\r\n    position-identifier=\"bk-config-payment-list\"\r\n    :title=\"$tc('buckaroo-payment.payment-methods')\"\r\n>\r\n<div class=\"bk-payment-wrap\">\r\n <template\r\n    v-for=\"payment in payments\" >\r\n    <div class=\"bk-payment\">\r\n        <div class=\"bk-payment-inner\">\r\n        <router-link  :title=\"$tc('buckaroo-payment.configure-payment')\" :to=\"{name: 'buckaroo.payment.config', params: {namespace: 'BuckarooPayments', paymentCode: payment.code } }\">\r\n            <div class=\"bk-payment-img\">\r\n                <img :src=\"assetFilter(`buckaroopayments/static/${payment.logo}`)\" alt=\"Payment logo\">\r\n            </div>\r\n            <div class=\"bk-payment-name\">\r\n                {{ getPaymentTitle(payment.code) }}\r\n            </div>\r\n        </router-link>\r\n\r\n        <buckaroo-toggle-status\r\n            :currentSalesChannelId=\"currentSalesChannelId\"\r\n            :method=\"payment.code\"\r\n            :value=\"value\"\r\n            @input=\"$emit('input', $event)\"\r\n        />\r\n\r\n        <router-link class=\"bk-link\" :title=\"$tc('buckaroo-payment.configure-payment')\" :to=\"{name: 'buckaroo.payment.config', params: {namespace: 'BuckarooPayments', paymentCode: payment.code } }\">\r\n            {{$tc('buckaroo-payment.configure-link')}}\r\n        </router-link>\r\n        </div>\r\n    </div>\r\n </template>\r\n </div>\r\n</sw-card>","const { Component, Filter } = Shopware;\r\nimport template from \"./buckaroo-payment-list.html.twig\";\r\nimport \"./style.scss\";\r\n\r\nComponent.register(\"buckaroo-payment-list\", {\r\n    template,\r\n    props: {\r\n        configSettings: {\r\n            type: Array,\r\n            required: false,\r\n            default: () => []\r\n        },\r\n        value: {\r\n            type: Object,\r\n            required: false,\r\n            default: () => ({})\r\n        },\r\n        currentSalesChannelId: {\r\n            type: String,\r\n            required: true\r\n        }\r\n    },\r\n\r\n    emits: ['input'],\r\n\r\n    data() {\r\n        return {\r\n            payments: [\r\n                {\r\n                    code: \"Alipay\",\r\n                    logo: \"alipay.svg\"\r\n                },\r\n                {\r\n                    code: \"applepay\",\r\n                    logo: \"applepay.svg\"\r\n                },\r\n                {\r\n                    code: \"bancontactmrcash\",\r\n                    logo: \"bancontact.svg\"\r\n                },\r\n                {\r\n                    code: \"blik\",\r\n                    logo: \"blik.svg\"\r\n                },\r\n                {\r\n                    code: \"belfius\",\r\n                    logo: \"belfius.svg\"\r\n                },\r\n                {\r\n                    code: \"Billink\",\r\n                    logo: \"billink.svg\"\r\n                },\r\n                {\r\n                    code: \"creditcard\",\r\n                    logo: \"creditcards.svg\"\r\n                },\r\n                {\r\n                    code: \"creditcards\",\r\n                    logo: \"creditcards.svg\"\r\n                },\r\n                {\r\n                    code: \"eps\",\r\n                    logo: \"eps.svg\"\r\n                },\r\n                {\r\n                    code: \"giftcards\",\r\n                    logo: \"giftcards.svg\"\r\n                },\r\n                {\r\n                    code: \"idealqr\",\r\n                    logo: \"ideal-qr.svg\"\r\n                },\r\n                {\r\n                    code: \"ideal\",\r\n                    logo: \"ideal.svg\"\r\n                },\r\n                {\r\n                    code: \"capayable\",\r\n                    logo: \"ideal-in3.svg\"\r\n                },\r\n                {\r\n                    code: \"KBCPaymentButton\",\r\n                    logo: \"kbc.svg\"\r\n                },\r\n                {\r\n                    code: \"klarnakp\",\r\n                    logo: \"klarna.svg\"\r\n                },\r\n                {\r\n                    code: \"knaken\",\r\n                    logo: \"gosettle.svg\"\r\n                },\r\n                {\r\n                    code: \"mbway\",\r\n                    logo: \"mbway.svg\"\r\n                },\r\n                {\r\n                    code: \"multibanco\",\r\n                    logo: \"multibanco.svg\"\r\n                },\r\n                {\r\n                    code: \"paybybank\",\r\n                    logo: \"paybybank.svg\"\r\n                },\r\n                {\r\n                    code: \"payconiq\",\r\n                    logo: \"payconiq.svg\"\r\n                },\r\n                {\r\n                    code: \"paypal\",\r\n                    logo: \"paypal.svg\"\r\n                },\r\n                {\r\n                    code: \"payperemail\",\r\n                    logo: \"payperemail.svg\"\r\n                },\r\n                {\r\n                    code: \"Przelewy24\",\r\n                    logo: \"przelewy24.svg\"\r\n                },\r\n                {\r\n                    code: \"afterpay\",\r\n                    logo: \"afterpay.svg\"\r\n                },\r\n                {\r\n                    code: \"sepadirectdebit\",\r\n                    logo: \"sepa-directdebit.svg\"\r\n                },\r\n                {\r\n                    code: \"transfer\",\r\n                    logo: \"sepa-credittransfer.svg\"\r\n                },\r\n                {\r\n                    code: \"Trustly\",\r\n                    logo: \"trustly.svg\"\r\n                },\r\n                {\r\n                    code: \"WeChatPay\",\r\n                    logo: \"wechatpay.svg\"\r\n                }\r\n            ]\r\n        };\r\n    },\r\n    methods: {\r\n        getPaymentTitle(code) {\r\n            if (this.configSettings && Array.isArray(this.configSettings)) {\r\n                const card = this.configSettings.find((card) => card.name === code);\r\n                if (card && card.title) {\r\n                    try {\r\n                        if (typeof card.title === 'object' && card.title !== null) {\r\n                            const locale = this.$i18n?.locale || 'en-GB';\r\n\r\n                            if (card.title[locale]) {\r\n                                return card.title[locale];\r\n                            }\r\n                            if (card.title['en-GB']) {\r\n                                return card.title['en-GB'];\r\n                            }\r\n                            \r\n                            const firstKey = Object.keys(card.title)[0];\r\n                            if (firstKey && card.title[firstKey]) {\r\n                                return card.title[firstKey];\r\n                            }\r\n                            \r\n                            return JSON.stringify(card.title);\r\n                        }\r\n                        \r\n                        if (typeof card.title === 'string') {\r\n                            if (this.$t && typeof this.$t === 'function') {\r\n                                return this.$t(card.title);\r\n                            }\r\n                            return card.title;\r\n                        }\r\n                        \r\n                        return String(card.title);\r\n                        \r\n                    } catch (error) {\r\n                        console.warn('Translation error for:', card.title, error);\r\n                        return typeof card.title === 'object' ? JSON.stringify(card.title) : String(card.title);\r\n                    }\r\n                }\r\n            }\r\n\r\n            const payment = this.payments.find(payment => payment.code === code);\r\n            return payment ? payment.code : 'Unknown Payment';\r\n        },\r\n        assetFilter(path) {\r\n            return Filter.getByName('asset')(path);\r\n        }\r\n    }\r\n});","    <sw-button @click=\"sendTestApi\" :disabled=\"!enabled\" variant=\"primary\" :square=\"false\" :block=\"true\" :isLoading=\"isLoading\">{{ $tc('buckaroo-payment.button.labelTestApi') }}</sw-button>","const { Component } = Shopware;\nimport template from \"./buckaroo-test-credentials.twig\";\n\nComponent.register(\"buckaroo-test-credentials\", {\n    template,\n    mixins: [\n        Shopware.Mixin.getByName('notification')\n    ],\n    data() {\n        return {\n            isLoading: false,\n        }\n    },\n    inject: [ 'BuckarooPaymentSettingsService' ],\n\n    props: {\n        config: {\n            type: Object,\n            required: true\n        },\n        currentSalesChannelId: {\n            required: true\n        }\n    },\n    computed: {\n        enabled: function() {\n            return (this.getConfigValue('websiteKey') || '').length > 0 &&\n            (this.getConfigValue('secretKey') || '').length > 0\n        }\n    },\n    methods: {\n        getConfigValue: function(name) {\n            return this.config[\"BuckarooPayments.config.\"+name];\n        },\n        sendTestApi() {\n            this.isLoading = true;\n            let websiteKeyId = this.getConfigValue('websiteKey'),\n                secretKeyId = this.getConfigValue('secretKey');\n            this.BuckarooPaymentSettingsService.getApiTest(websiteKeyId, secretKeyId, this.currentSalesChannelId)\n                .then((result) => {\n                    this.isLoading = false;\n\n                    if (result.status == 'success') {\n                        this.createNotificationSuccess({\n                            title: this.$tc('buckaroo-payment.settingsForm.titleSuccess'),\n                            message: this.$tc(result.message)\n                        });\n                    } else {\n                        this.createNotificationError({\n                            title: this.$tc('buckaroo-payment.settingsForm.titleError'),\n                            message: this.$tc(result.message)\n                        });\n                    }\n\n                })\n                .catch(() => {\n                    this.isLoading = false;\n                });\n        },\n    }\n})","<div class=\"bk-toogle-wrap\">\r\n    <button\r\n            type=\"button\"\r\n            :disabled=\"isLoading\"\r\n            :class=\"`live ${getClass('live')}`\"\r\n            @click=\"setStatus('live')\"\r\n    >\r\n        Live\r\n    </button>\r\n\r\n    <button\r\n            v-if=\"method !== 'idealqr'\"\r\n            type=\"button\"\r\n            :disabled=\"isLoading\"\r\n            :class=\"`test ${getClass('test')}`\"\r\n            @click=\"setStatus('test')\"\r\n    >\r\n        Test\r\n    </button>\r\n\r\n    <button\r\n            type=\"button\"\r\n            :disabled=\"isLoading\"\r\n            :class=\"`disabled ${getClass('disabled')}`\"\r\n            @click=\"setStatus('disabled')\"\r\n    >\r\n        Off\r\n    </button>\r\n</div>\r\n","const { Component } = Shopware;\r\nimport template from \"./buckaroo-toggle-status.html.twig\";\r\nimport './style.scss'\r\n\r\nComponent.register(\"buckaroo-toggle-status\", {\r\n    template,\r\n    props: {\r\n        method: {\r\n            type: String,\r\n            required: true\r\n        },\r\n        value: {\r\n            required: true\r\n        },\r\n        currentSalesChannelId: {\r\n            required: true,\r\n        }\r\n    },\r\n\r\n    emits: ['input'],\r\n\r\n    inject: ['systemConfigApiService'],\r\n    data() {\r\n        return {\r\n            status: 'disabled',\r\n            isLoading: false,\r\n        }\r\n    },\r\n\r\n    mounted() {\r\n        this.status = this.getStatus();\r\n    },\r\n\r\n    watch: {\r\n        value: {\r\n            handler(newVal) {\r\n                this.status = this.getStatus();\r\n            },\r\n            deep: true,\r\n            immediate: true\r\n        }\r\n    },\r\n    methods: {\r\n        getStatus() {\r\n            const isActive = this.isActive();\r\n            const environment = this.getEnvironment();\r\n            return isActive ? environment : 'disabled';\r\n        },\r\n        isActive() {\r\n            const enabled = this.getValueForName(`${this.method}Enabled`);\r\n            if (typeof enabled === 'string') {\r\n                return enabled.toLowerCase() === 'true';\r\n            }\r\n            return Boolean(enabled);\r\n        },\r\n        getEnvironment() {\r\n            const env = this.getValueForName(`${this.method}Environment`);\r\n            \r\n            if (env === undefined || env === null || env === '') {\r\n                return 'test';\r\n            }\r\n            const validEnvs = ['test', 'live'];\r\n            return validEnvs.includes(env) ? env : 'test';\r\n        },\r\n        getValueForName(name) {\r\n            const key = `BuckarooPayments.config.${name}`;\r\n            if (!this.value || typeof this.value !== 'object') {\r\n                return null;\r\n            }\r\n\r\n            let val = undefined;\r\n\r\n            if (this.value[key] !== undefined) {\r\n                val = this.value[key];\r\n            }\r\n            else if (this.value[name] !== undefined) {\r\n                val = this.value[name];\r\n            }\r\n            else if (this.value['BuckarooPayments.config'] && typeof this.value['BuckarooPayments.config'] === 'object') {\r\n                if (this.value['BuckarooPayments.config'][name] !== undefined) {\r\n                    val = this.value['BuckarooPayments.config'][name];\r\n                }\r\n            }\r\n            else {\r\n                const variations = [\r\n                    name,\r\n                    name.toLowerCase(),\r\n                    name.charAt(0).toLowerCase() + name.slice(1),\r\n                    name.charAt(0).toUpperCase() + name.slice(1)\r\n                ];\r\n                \r\n                for (const variation of variations) {\r\n                    const variationKey = `BuckarooPayments.config.${variation}`;\r\n                    if (this.value[variationKey] !== undefined) {\r\n                        val = this.value[variationKey];\r\n                        break;\r\n                    }\r\n                    if (this.value[variation] !== undefined) {\r\n                        val = this.value[variation];\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (val && typeof val === 'object' && val.hasOwnProperty('_value')) {\r\n                val = val._value;\r\n            }\r\n            \r\n            return val;\r\n        },\r\n        setStatus(status) {\r\n            this.status = status;\r\n            this.saveStatus();\r\n        },\r\n        getClass(buttonStatus) {\r\n            return this.status === buttonStatus ? 'active' : '';\r\n        },\r\n        async saveStatus() {\r\n            const enabledKey = `BuckarooPayments.config.${this.method}Enabled`;\r\n            const environmentKey = `BuckarooPayments.config.${this.method}Environment`;\r\n\r\n            let data = {[enabledKey]: false};\r\n            const updatedValue = { ...this.value };\r\n            updatedValue[enabledKey] = false;\r\n\r\n            if (['live', 'test'].indexOf(this.status) !== -1) {\r\n                data = {\r\n                    [enabledKey]: true,\r\n                    [environmentKey]: this.status\r\n                }\r\n                updatedValue[enabledKey] = true;\r\n                updatedValue[environmentKey] = this.status;\r\n            }\r\n\r\n            this.$emit('input', updatedValue);\r\n\r\n            this.isLoading = true;\r\n            try {\r\n                await this.systemConfigApiService\r\n                .batchSave({[this.currentSalesChannelId]: data})\r\n                .finally(() => {\r\n                    this.isLoading = false;\r\n                });\r\n                this.renderSuccess();\r\n            } catch (error) {\r\n                this.renderError(error);\r\n            }\r\n           \r\n        },\r\n        renderSuccess() {\r\n            this.$store.dispatch('notification/createNotification', {\r\n                variant: 'success',\r\n                message: this.$tc('sw-extension-store.component.sw-extension-config.messageSaveSuccess'),\r\n            });\r\n        },\r\n\r\n        renderError(err) {\r\n            this.$store.dispatch('notification/createNotification', {\r\n                variant: 'error',\r\n                message: err,\r\n            });\r\n        }\r\n    }\r\n})"],"names":["template$a","Component","Context","Criteria","template","orderRepository","orderCriteria","order","paymentMethodId","paymentMethod","template$9","template$8","values","template$7","response","processedData","key","value","shortKey","error","newValue","fullFieldName","_a","_b","code","card","currentConfigValues","currentPaymentCard","actualConfigValues","element","cleanFieldName","template$6","Filter","that","orderId","errorResponse","_c","transaction","amount","field","Module","nlNL","deDE","enGB","next","currentRoute","route","ApiService","BuckarooPaymentService","httpClient","loginService","apiEndpoint","apiRoute","transactionsToRefund","orderItems","customRefundAmount","initContainer","BuckarooPaymentSettingsService","websiteKeyId","secretKeyId","currentSalesChannelId","template$5","result","tax","taxId","eventOrValue","actualValue","template$4","newVal","oldVal","to","template$3","newChannelId","oldChannelId","secretKey","hasWebsiteKey","hasSecretKey","props","baseBinding","fieldName","currentValue","name","string","title","locale","firstKey","val","keyVariations","target","option","totalCharacters","item","hasCommas","hasLongStrings","correctValues","rejoined","splitValues","possibleKeys","updatedValue","template$2","payment","path","template$1","isActive","environment","enabled","env","variations","variation","variationKey","status","buttonStatus","enabledKey","environmentKey","data","err"],"mappings":"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KAAM,YACT,EACD,CACI,KAAM,WACN,KAAM,cACT,EACD,CACI,KAAM,mBACN,KAAM,gBACT,EACD,CACI,KAAM,OACN,KAAM,UACT,EACD,CACI,KAAM,UACN,KAAM,aACT,EACD,CACI,KAAM,UACN,KAAM,aACT,EACD,CACI,KAAM,aACN,KAAM,iBACT,EACD,CACI,KAAM,cACN,KAAM,iBACT,EACD,CACI,KAAM,MACN,KAAM,SACT,EACD,CACI,KAAM,YACN,KAAM,eACT,EACD,CACI,KAAM,UACN,KAAM,cACT,EACD,CACI,KAAM,QACN,KAAM,WACT,EACD,CACI,KAAM,YACN,KAAM,eACT,EACD,CACI,KAAM,mBACN,KAAM,SACT,EACD,CACI,KAAM,WACN,KAAM,YACT,EACD,CACI,KAAM,SACN,KAAM,cACT,EACD,CACI,KAAM,QACN,KAAM,WACT,EACD,CACI,KAAM,aACN,KAAM,gBACT,EACD,CACI,KAAM,YACN,KAAM,eACT,EACD,CACI,KAAM,WACN,KAAM,cACT,EACD,CACI,KAAM,SACN,KAAM,YACT,EACD,CACI,KAAM,cACN,KAAM,iBACT,EACD,CACI,KAAM,aACN,KAAM,gBACT,EACD,CACI,KAAM,WACN,KAAM,cACT,EACD,CACI,KAAM,kBACN,KAAM,sBACT,EACD,CACI,KAAM,WACN,KAAM,yBACT,EACD,CACI,KAAM,UACN,KAAM,aACT,EACD,CACI,KAAM,YACN,KAAM,eACT,CACJ,CACb,CACK,EACD,QAAS,CACL,gBAAgBoB,EAAM,CrBhJ9B,IAAAF,EqBiJY,GAAI,KAAK,gBAAkB,MAAM,QAAQ,KAAK,cAAc,EAAG,CAC3D,MAAMG,EAAO,KAAK,eAAe,KAAMA,GAASA,EAAK,OAASD,CAAI,EAClE,GAAIC,GAAQA,EAAK,MACb,GAAI,CACA,GAAI,OAAOA,EAAK,OAAU,UAAYA,EAAK,QAAU,KAAM,CACvD,MAAM2D,IAAS9D,EAAA,KAAK,QAAL,YAAAA,EAAY,SAAU,QAErC,GAAIG,EAAK,MAAM2D,CAAM,EACjB,OAAO3D,EAAK,MAAM2D,CAAM,EAE5B,GAAI3D,EAAK,MAAM,OAAO,EAClB,OAAOA,EAAK,MAAM,OAAO,EAG7B,MAAM4D,EAAW,OAAO,KAAK5D,EAAK,KAAK,EAAE,CAAC,EAC1C,OAAI4D,GAAY5D,EAAK,MAAM4D,CAAQ,EACxB5D,EAAK,MAAM4D,CAAQ,EAGvB,KAAK,UAAU5D,EAAK,KAAK,CACnC,CAED,OAAI,OAAOA,EAAK,OAAU,SAClB,KAAK,IAAM,OAAO,KAAK,IAAO,WACvB,KAAK,GAAGA,EAAK,KAAK,EAEtBA,EAAK,MAGT,OAAOA,EAAK,KAAK,CAE3B,OAAQN,EAAO,CACZ,eAAQ,KAAK,yBAA0BM,EAAK,MAAON,CAAK,EACjD,OAAOM,EAAK,OAAU,SAAW,KAAK,UAAUA,EAAK,KAAK,EAAI,OAAOA,EAAK,KAAK,CACzF,CAER,CAED,MAAM2E,EAAU,KAAK,SAAS,KAAKA,GAAWA,EAAQ,OAAS5E,CAAI,EACnE,OAAO4E,EAAUA,EAAQ,KAAO,iBACnC,EACD,YAAYC,EAAM,CACd,OAAOrE,EAAO,UAAU,OAAO,EAAEqE,CAAI,CACxC,CACJ,CACL,CAAC,EC9LD,MAAeC,EAAA,4LCAT,CAAErG,UAAAA,CAAW,EAAG,SAGtBA,EAAU,SAAS,4BAA6B,CAChD,SAAIG,EACA,OAAQ,CACJ,SAAS,MAAM,UAAU,cAAc,CAC1C,EACD,MAAO,CACH,MAAO,CACH,UAAW,EACvB,CACK,EACD,OAAQ,CAAE,gCAAkC,EAE5C,MAAO,CACH,OAAQ,CACJ,KAAM,OACN,SAAU,EACb,EACD,sBAAuB,CACnB,SAAU,EACtB,CACK,EACD,SAAU,CACN,QAAS,UAAW,CAChB,OAAQ,KAAK,eAAe,YAAY,GAAK,IAAI,OAAS,IACzD,KAAK,eAAe,WAAW,GAAK,IAAI,OAAS,CAC9D,CACK,EACD,QAAS,CACL,eAAgB,SAAS6E,EAAM,CAC3B,OAAO,KAAK,OAAO,2BAA2BA,CAAI,CACrD,EACD,aAAc,CACV,KAAK,UAAY,GACjB,IAAIvB,EAAe,KAAK,eAAe,YAAY,EAC/CC,EAAc,KAAK,eAAe,WAAW,EACjD,KAAK,+BAA+B,WAAWD,EAAcC,EAAa,KAAK,qBAAqB,EAC/F,KAAMG,GAAW,CACd,KAAK,UAAY,GAEbA,EAAO,QAAU,UACjB,KAAK,0BAA0B,CAC3B,MAAO,KAAK,IAAI,4CAA4C,EAC5D,QAAS,KAAK,IAAIA,EAAO,OAAO,CAC5D,CAAyB,EAED,KAAK,wBAAwB,CACzB,MAAO,KAAK,IAAI,0CAA0C,EAC1D,QAAS,KAAK,IAAIA,EAAO,OAAO,CAC5D,CAAyB,CAGR,CAAA,EACA,MAAM,IAAM,CACT,KAAK,UAAY,EACrC,CAAiB,CACR,CACT,CACA,CAAC,EC5DD,MAAe1D,EAAA,0cCAT,CAAE,UAAAH,CAAW,EAAG,SAItBA,EAAU,SAAS,yBAA0B,CACzC,SAAAG,EACA,MAAO,CACH,OAAQ,CACJ,KAAM,OACN,SAAU,EACb,EACD,MAAO,CACH,SAAU,EACb,EACD,sBAAuB,CACnB,SAAU,EACb,CACJ,EAED,MAAO,CAAC,OAAO,EAEf,OAAQ,CAAC,wBAAwB,EACjC,MAAO,CACH,MAAO,CACH,OAAQ,WACR,UAAW,EACd,CACJ,EAED,SAAU,CACN,KAAK,OAAS,KAAK,WACtB,EAED,MAAO,CACH,MAAO,CACH,QAAQgE,EAAQ,CACZ,KAAK,OAAS,KAAK,WACtB,EACD,KAAM,GACN,UAAW,EACd,CACJ,EACD,QAAS,CACL,WAAY,CACR,MAAMmC,EAAW,KAAK,WAChBC,EAAc,KAAK,iBACzB,OAAOD,EAAWC,EAAc,UACnC,EACD,UAAW,CACP,MAAMC,EAAU,KAAK,gBAAgB,GAAG,KAAK,MAAM,SAAS,EAC5D,OAAI,OAAOA,GAAY,SACZA,EAAQ,YAAa,IAAK,OAE9B,EAAQA,CAClB,EACD,gBAAiB,CACb,MAAMC,EAAM,KAAK,gBAAgB,GAAG,KAAK,MAAM,aAAa,EAE5D,OAAyBA,GAAQ,MAAQA,IAAQ,GACtC,OAEO,CAAC,OAAQ,MAAM,EAChB,SAASA,CAAG,EAAIA,EAAM,MAC1C,EACD,gBAAgBzB,EAAM,CAClB,MAAMjE,EAAM,2BAA2BiE,CAAI,GAC3C,GAAI,CAAC,KAAK,OAAS,OAAO,KAAK,OAAU,SACrC,OAAO,KAGX,IAAIK,EAEJ,GAAI,KAAK,MAAMtE,CAAG,IAAM,OACpBsE,EAAM,KAAK,MAAMtE,CAAG,UAEf,KAAK,MAAMiE,CAAI,IAAM,OAC1BK,EAAM,KAAK,MAAML,CAAI,UAEhB,KAAK,MAAM,yBAAyB,GAAK,OAAO,KAAK,MAAM,yBAAyB,GAAM,SAC3F,KAAK,MAAM,yBAAyB,EAAEA,CAAI,IAAM,SAChDK,EAAM,KAAK,MAAM,yBAAyB,EAAEL,CAAI,OAGnD,CACD,MAAM0B,EAAa,CACf1B,EACAA,EAAK,YAAa,EAClBA,EAAK,OAAO,CAAC,EAAE,YAAW,EAAKA,EAAK,MAAM,CAAC,EAC3CA,EAAK,OAAO,CAAC,EAAE,YAAW,EAAKA,EAAK,MAAM,CAAC,CAC/D,EAEgB,UAAW2B,KAAaD,EAAY,CAChC,MAAME,EAAe,2BAA2BD,CAAS,GACzD,GAAI,KAAK,MAAMC,CAAY,IAAM,OAAW,CACxCvB,EAAM,KAAK,MAAMuB,CAAY,EAC7B,KACH,CACD,GAAI,KAAK,MAAMD,CAAS,IAAM,OAAW,CACrCtB,EAAM,KAAK,MAAMsB,CAAS,EAC1B,KACH,CACJ,CACJ,CAED,OAAItB,GAAO,OAAOA,GAAQ,UAAYA,EAAI,eAAe,QAAQ,IAC7DA,EAAMA,EAAI,QAGPA,CACV,EACD,UAAUwB,EAAQ,CACd,KAAK,OAASA,EACd,KAAK,WAAU,CAClB,EACD,SAASC,EAAc,CACnB,OAAO,KAAK,SAAWA,EAAe,SAAW,EACpD,EACD,MAAM,YAAa,CACf,MAAMC,EAAa,2BAA2B,KAAK,MAAM,UACnDC,EAAiB,2BAA2B,KAAK,MAAM,cAE7D,IAAIC,EAAO,CAAC,CAACF,CAAU,EAAG,EAAK,EAC/B,MAAMd,EAAe,CAAE,GAAG,KAAK,KAAK,EACpCA,EAAac,CAAU,EAAI,GAEvB,CAAC,OAAQ,MAAM,EAAE,QAAQ,KAAK,MAAM,IAAM,KAC1CE,EAAO,CACH,CAACF,CAAU,EAAG,GACd,CAACC,CAAc,EAAG,KAAK,MAC1B,EACDf,EAAac,CAAU,EAAI,GAC3Bd,EAAae,CAAc,EAAI,KAAK,QAGxC,KAAK,MAAM,QAASf,CAAY,EAEhC,KAAK,UAAY,GACjB,GAAI,CACA,MAAM,KAAK,uBACV,UAAU,CAAC,CAAC,KAAK,qBAAqB,EAAGgB,CAAI,CAAC,EAC9C,QAAQ,IAAM,CACX,KAAK,UAAY,EACrC,CAAiB,EACD,KAAK,cAAa,CACrB,OAAQ/F,EAAO,CACZ,KAAK,YAAYA,CAAK,CACzB,CAEJ,EACD,eAAgB,CACZ,KAAK,OAAO,SAAS,kCAAmC,CACpD,QAAS,UACT,QAAS,KAAK,IAAI,qEAAqE,CACvG,CAAa,CACJ,EAED,YAAYgG,EAAK,CACb,KAAK,OAAO,SAAS,kCAAmC,CACpD,QAAS,QACT,QAASA,CACzB,CAAa,CACJ,CACJ,CACL,CAAC"}